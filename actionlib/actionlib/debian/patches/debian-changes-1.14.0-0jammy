Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ros-noetic-actionlib (1.14.0-0jammy) jammy; urgency=high
 .
   * Fix constructors of SimpleActionServer (#194 <https://github.com/ros/actionlib/issues/194>)
   * Added a check to see if the transition callback is for the current goal handle (#177 <https://github.com/ros/actionlib/issues/177>)
     Co-authored-by: Mart Moerdijk <mailto:mmoerdijk@smart-robotics.nl>
   * Noetic fixup spurious wakeup (#190 <https://github.com/ros/actionlib/issues/190>)
   * Use nullptr instead of NULL (#185 <https://github.com/ros/actionlib/issues/185>)
   * actionlib: remove unused client_goal_status.h (#184 <https://github.com/ros/actionlib/issues/184>)
     Co-authored-by: Kyle Fazzari <mailto:kyle@canonical.com>
   * Fix small type in debug log message (#187 <https://github.com/ros/actionlib/issues/187>)
   * Remove semicolons from action definitions (#188 <https://github.com/ros/actionlib/issues/188>)
   * Fix python wait_for_server premature return (#180 <https://github.com/ros/actionlib/issues/180>)
   * Add maintainer (#174 <https://github.com/ros/actionlib/issues/174>)
   * Contributors: C. Andy Martin, Guglielmo Gemignani, Hermann von Kleist, Jacob Perron, Jacob Seibert, Kyle Fazzari, Mart Moerdijk, Nick Lamprianidis, Ramon Wijnands
Author: Michael Carroll <michael@openrobotics.org>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2024-08-18

--- /dev/null
+++ ros-noetic-actionlib-1.14.0/CHANGELOG.rst
@@ -0,0 +1,240 @@
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Changelog for package actionlib
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+1.14.0 (2022-12-09)
+-------------------
+* Fix constructors of SimpleActionServer (`#194 <https://github.com/ros/actionlib/issues/194>`_)
+* Added a check to see if the transition callback is for the current goal handle (`#177 <https://github.com/ros/actionlib/issues/177>`_)
+  Co-authored-by: Mart Moerdijk <mmoerdijk@smart-robotics.nl>
+* Noetic fixup spurious wakeup (`#190 <https://github.com/ros/actionlib/issues/190>`_)
+* Use nullptr instead of NULL (`#185 <https://github.com/ros/actionlib/issues/185>`_)
+* actionlib: remove unused client_goal_status.h (`#184 <https://github.com/ros/actionlib/issues/184>`_)
+  Co-authored-by: Kyle Fazzari <kyle@canonical.com>
+* Fix small type in debug log message (`#187 <https://github.com/ros/actionlib/issues/187>`_)
+* Remove semicolons from action definitions (`#188 <https://github.com/ros/actionlib/issues/188>`_)
+* Fix python wait_for_server premature return (`#180 <https://github.com/ros/actionlib/issues/180>`_)
+* Add maintainer (`#174 <https://github.com/ros/actionlib/issues/174>`_)
+* Contributors: C. Andy Martin, Guglielmo Gemignani, Hermann von Kleist, Jacob Perron, Jacob Seibert, Kyle Fazzari, Mart Moerdijk, Nick Lamprianidis, Ramon Wijnands
+
+1.13.2 (2020-08-21)
+-------------------
+* narrow down required boost dependencies (`#168 <https://github.com/ros/actionlib/issues/168>`_)
+* Contributors: Mikael Arguedas
+
+1.13.1 (2020-05-19)
+-------------------
+* Fix tiny typo. (`#165 <https://github.com/ros/actionlib/issues/165>`_)
+* Add deleted copy constructor. (`#160 <https://github.com/ros/actionlib/issues/160>`_)
+* roscpp ActionClient subscription queue size should be consistent with rospy. (`#162 <https://github.com/ros/actionlib/issues/162>`_)
+* import setup from setuptools instead of distutils-core (`#163 <https://github.com/ros/actionlib/issues/163>`_)
+* Contributors: Alejandro Hern√°ndez Cordero, Ivor Wanders, jschleicher, tomoya
+
+1.13.0 (2020-03-03)
+-------------------
+* Switch to timer and allow stopping actionserver/client (`#142 <https://github.com/ros/actionlib/issues/142>`_)
+* bump CMake minimum version to use new behavior of CMP0048 (`#158 <https://github.com/ros/actionlib/issues/158>`_)
+* Split actionlib and tools into separate packages (`#152 <https://github.com/ros/actionlib/issues/152>`_)
+* Contributors: Michael Carroll, Paul Bovbel, jschleicher
+
+1.12.0 (2019-08-07)
+-------------------
+* Complete the full set of Ptr typedefs (`#106 <https://github.com/ros/actionlib/issues/106>`_)
+* action_server calls initialize in constructor (`#120 <https://github.com/ros/actionlib/issues/120>`_)
+* Print the correct error on waiting for result (`#123 <https://github.com/ros/actionlib/issues/123>`_)
+* Remove getState error when no goal is running (`#97 <https://github.com/ros/actionlib/issues/97>`_)
+* Update maintainer (`#122 <https://github.com/ros/actionlib/issues/122>`_)
+* Contributors: Alireza, Bence Magyar, Carl Saldanha, Christopher Wecht, Michael Carroll
+
+1.11.15 (2018-08-17)
+--------------------
+* unique name for axtools title bar (`#107 <https://github.com/ros/actionlib/issues/107>`_)
+* [bugfix] add missing ros / ros console includes (`#114 <https://github.com/ros/actionlib/issues/114>`_)
+* [bugfix] update posix_time::milliseconds for boost 1.67 (`#111 <https://github.com/ros/actionlib/issues/111>`_)
+* [test] Use portable boost::this_thread::sleep() to sleep so it can be built on Windows (`#112 <https://github.com/ros/actionlib/issues/112>`_)
+* Revert (`#106 <https://github.com/ros/actionlib/issues/106>`_) that broke downstream packages (`#113 <https://github.com/ros/actionlib/issues/113>`_)
+* Contributors: Felix Messmer, Gianfranco Costamagna, Johnson Shih, Mikael Arguedas
+
+1.11.14 (2018-05-21)
+--------------------
+* Complete the full set of Ptr typedefs (`#106 <https://github.com/ros/actionlib/issues/106>`_)
+* Change boost::posix_time::milliseconds init to int64_t (`#105 <https://github.com/ros/actionlib/issues/105>`_)
+* Added ROS_ERROR message for Release code when asserts are ignored (`#94 <https://github.com/ros/actionlib/issues/94>`_)
+* fix typos. (`#102 <https://github.com/ros/actionlib/issues/102>`_)
+* Contributors: Bence Magyar, Patrick Beeson, Tobias Fischer, csukuangfj
+
+1.11.13 (2018-03-14)
+--------------------
+* [bugfix] added missing boost/thread/reverse_lock.hpp include (`#95 <https://github.com/ros/actionlib/issues/95>`_)
+* Contributors: Robert Haschke
+
+1.11.12 (2017-12-18)
+--------------------
+* fix uncrustify mixup (`#92 <https://github.com/ros/actionlib/issues/92>`_)
+* Contributors: Mikael Arguedas
+
+1.11.11 (2017-10-27)
+--------------------
+* fix typo in server_goal_handle_imp.h (`#89 <https://github.com/ros/actionlib/issues/89>`_)
+* Use RAII to handle mutexes (`#87 <https://github.com/ros/actionlib/issues/87>`_)
+* Contributors: Cong Liu, Esteve Fernandez, Mikael Arguedas
+
+1.11.10 (2017-07-27)
+--------------------
+* Clang tidy fixes (`#86 <https://github.com/ros/actionlib/issues/86>`_)
+* C++ style (`#72 <https://github.com/ros/actionlib/issues/72>`_)
+* Proper return value after assert (`#83 <https://github.com/ros/actionlib/issues/83>`_)
+* switch to package format 2 (`#82 <https://github.com/ros/actionlib/issues/82>`_)
+* remove trailing whitespaces (`#81 <https://github.com/ros/actionlib/issues/81>`_)
+* lock listhandle earlier in getCommState in client_goal_handle_imp. active bool critical (`#77 <https://github.com/ros/actionlib/issues/77>`_)
+* add missing runtime dependencies (`#79 <https://github.com/ros/actionlib/issues/79>`_)
+* Contributors: Esteve Fernandez, Mikael Arguedas, johaq
+
+1.11.9 (2017-03-27)
+-------------------
+* Python3 compatibility + pep8 compliance (`#71 <https://github.com/ros/actionlib/issues/71>`_) follow-up of (`#43 <https://github.com/ros/actionlib/issues/43>`_)
+* - wait for ros::Time::now to become valid before init of connection_monitor (`#62 <https://github.com/ros/actionlib/issues/62>`_)
+  - bugfix : connection_monitor should wait for result
+* fixed default value for rosparam. closes `#69 <https://github.com/ros/actionlib/issues/69>`_ (`#70 <https://github.com/ros/actionlib/issues/70>`_)
+* Contributors: 1r0b1n0, Mikael Arguedas, Piyush Khandelwal
+
+1.11.8 (2017-02-17)
+-------------------
+* Fixes a deadlock (`#64 <https://github.com/ros/actionlib/issues/64>`_)
+* Removed unused variables warnings (`#63 <https://github.com/ros/actionlib/issues/63>`_ `#65 <https://github.com/ros/actionlib/issues/65>`_)
+* If using sim time, wait for /clock (`#59 <https://github.com/ros/actionlib/issues/59>`_)
+* add parameters to configure queue sizes (`#55 <https://github.com/ros/actionlib/pull/55>`_)
+* Contributors: Esteve Fernandez, Jonathan Meyer, Mikael Arguedas, Patrick Beeson, Robin Vanhove
+
+1.11.7 (2016-10-24)
+-------------------
+* Merge pull request `#57 <https://github.com/ros/actionlib/issues/57>`_ from stonier/patch-1
+  Remove misleading error log
+* Remove misleading error log
+  This was introduced in https://github.com/ros/actionlib/pull/43.
+  It is not actually correct - you can feasibly get feedback here before a new goal is confirmed. See `send_goal()`....
+  ```
+  def send_goal(self, goal, done_cb=None, active_cb=None, feedback_cb=None):
+  # destroys the old goal handle
+  self.stop_tracking_goal()
+  ...
+  self.gh = self.action_client.send_goal(goal, self._handle_transition, self._handle_feedback)
+  ```
+  and of course it will take more time on top of this for the server to actually process the incoming goal and confirm it. Meantime, it may have sent us feedback messages.
+* Improved the const-correctness of some actionlib classes. (`#50 <https://github.com/ros/actionlib/issues/50>`_)
+* Issue `#51 <https://github.com/ros/actionlib/issues/51>`_: Remove annoying debug messages that make useless to enable debug on Python nodes, as they overwhelm less spamming messages (`#54 <https://github.com/ros/actionlib/issues/54>`_)
+* reduce change of unncessary exception on shutdown bu checking directly in before publishing for a shutdown (`#53 <https://github.com/ros/actionlib/issues/53>`_)
+* Contributors: Blake Anderson, Daniel Stonier, Jorge Santos Sim√≥n, Mikael Arguedas, uliklank
+
+1.11.6 (2016-06-22)
+-------------------
+* Python code cleanup (`#43 <https://github.com/ros/actionlib/issues/43>`_)
+  * Cleaned up semicolons, indentation, spaces.
+  * Removed unused local var after further confirmation of no risk of side effects.
+* Contributors: Andrew Blakey
+
+1.11.5 (2016-03-14)
+-------------------
+* update maintainer
+* Merge pull request `#42 <https://github.com/ros/actionlib/issues/42>`_ from jonbinney/python3-compat
+  Python 3 compatibility changes
+* More readable iteration in state name lookup
+* Update syntax for exception handling
+* Iterate over dictionary in python3 compatible way
+* Use absolute imports for python3 compatibility
+* Merge pull request `#39 <https://github.com/ros/actionlib/issues/39>`_ from clearpathrobotics/action-fixup
+  Minor improvements
+* Enable UI feedback for preempt-requested goal in axserver.py
+* Clean up axclient.py initialization to allow starting before actionserver, requires action type passed in
+* Add hashes to ServerGoalHandle and ClientGoalHandles
+* Contributors: Esteve Fernandez, Jon Binney, Mikael Arguedas, Paul Bovbel
+
+1.11.4 (2015-04-22)
+-------------------
+* Initialize `execute_thread_` to NULL
+* Contributors: Esteve Fernandez
+
+1.11.3 (2014-12-23)
+-------------------
+* Increase queue sizes to match Python client publishers.
+* Adjust size of client publishers in Python
+* Contributors: Esteve Fernandez, Michael Ferguson
+
+1.11.2 (2014-05-20)
+-------------------
+* Update python publishers to define queue_size.
+* Use the correct queue for processing MessageEvents
+* Contributors: Esteve Fernandez, Michael Ferguson, Nican
+
+1.11.1 (2014-05-08)
+-------------------
+* Fix uninitialised `execute_thread_` member pointer
+* Make rostest in CMakeLists optional
+* Use catkin_install_python() to install Python scripts
+* Contributors: Dirk Thomas, Esteve Fernandez, Jordi Pages, Lukas Bulwahn
+
+1.11.0 (2014-02-13)
+-------------------
+* replace usage of __connection_header with MessageEvent (`#20 <https://github.com/ros/actionlib/issues/20>`_)
+
+1.10.3 (2013-08-27)
+-------------------
+* Merged pull request `#15 <https://github.com/ros/actionlib/issues/15>`_
+  Fixes a compile issue for actionlib headers on OS X
+
+1.10.2 (2013-08-21)
+-------------------
+* separating ActionServer implementation into base class and ros-publisher-based class (`#11 <https://github.com/ros/actionlib/issues/11>`_)
+* support CATKIN_ENABLE_TESTING
+* add isValid to ServerGoalHandle (`#14 <https://github.com/ros/actionlib/issues/14>`_)
+* make operators const (`#10 <https://github.com/ros/actionlib/issues/10>`_)
+* add counting of connections to avoid reconnect problem when callbacks are invoked in different order (`#7 <https://github.com/ros/actionlib/issues/7>`_)
+* fix deadlock in simple_action_server.py (`#4 <https://github.com/ros/actionlib/issues/4>`_)
+* fix missing runtime destination for library (`#3 <https://github.com/ros/actionlib/issues/3>`_)
+
+1.10.1 (2013-06-06)
+-------------------
+* fix location of library before installation (`#1 <https://github.com/ros/actionlib/issues/1>`_)
+
+1.10.0 (2013-04-11)
+-------------------
+* define DEPRECATED only if not defined already
+* modified dependency type of catkin to buildtool
+
+1.9.11 (2012-12-13)
+-------------------
+* first public release for Groovy
+
+1.8.7 (2012-06-14)
+------------------
+* add new CommState LOST
+* added more missing dependencies
+
+1.8.6 (2012-06-05)
+------------------
+* added missing dependencies
+
+1.8.5 (2012-05-31)
+------------------
+* make axclient work base on topic name only
+
+1.8.4 (2012-04-05)
+------------------
+* add missing axserver/axclient install
+
+1.8.3 (2012-03-15)
+------------------
+* fix issue with locking in action server (`#5391 <https://code.ros.org/trac/ros-pkg/ticket/5391>`_)
+
+1.8.2 (2012-02-29)
+------------------
+* update to newer catkin API
+
+1.8.1 (2012-02-21)
+------------------
+* fix Python packaging
+
+1.8.0 (2012-02-07)
+------------------
+* separated from common stack
+* converted to use catkin
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/CMakeLists.txt
@@ -0,0 +1,37 @@
+cmake_minimum_required(VERSION 3.0.2)
+project(actionlib)
+
+find_package(catkin REQUIRED COMPONENTS actionlib_msgs message_generation roscpp std_msgs)
+find_package(Boost REQUIRED COMPONENTS thread)
+
+include_directories(include ${catkin_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS})
+link_directories(${catkin_LIBRARY_DIRS})
+
+catkin_python_setup()
+
+add_action_files(DIRECTORY action FILES Test.action TestRequest.action TwoInts.action)
+generate_messages(DEPENDENCIES actionlib_msgs std_msgs)
+
+catkin_package(
+  INCLUDE_DIRS include
+  LIBRARIES actionlib
+  CATKIN_DEPENDS actionlib_msgs message_runtime roscpp std_msgs
+  DEPENDS Boost
+)
+
+add_library(actionlib src/connection_monitor.cpp src/goal_id_generator.cpp)
+target_link_libraries(actionlib ${catkin_LIBRARIES} ${Boost_LIBRARIES})
+add_dependencies(actionlib actionlib_gencpp)
+
+install(TARGETS ${PROJECT_NAME}
+  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
+  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
+  RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION})
+install(DIRECTORY include/${PROJECT_NAME}/
+  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
+  FILES_MATCHING PATTERN "*.h")
+
+if(CATKIN_ENABLE_TESTING)
+  find_package(rostest)
+  add_subdirectory(test)
+endif()
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/action/Test.action
@@ -0,0 +1,5 @@
+int32 goal
+---
+int32 result
+---
+int32 feedback
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/action/TestRequest.action
@@ -0,0 +1,18 @@
+int32 TERMINATE_SUCCESS = 0
+int32 TERMINATE_ABORTED = 1
+int32 TERMINATE_REJECTED = 2
+int32 TERMINATE_LOSE = 3
+int32 TERMINATE_DROP = 4
+int32 TERMINATE_EXCEPTION = 5
+int32 terminate_status
+bool ignore_cancel  # If true, ignores requests to cancel
+string result_text
+int32 the_result    # Desired value for the_result in the Result
+bool is_simple_client
+duration delay_accept  # Delays accepting the goal by this amount of time
+duration delay_terminate  # Delays terminating for this amount of time
+duration pause_status  # Pauses the status messages for this amount of time
+---
+int32 the_result
+bool is_simple_server
+---
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/action/TwoInts.action
@@ -0,0 +1,5 @@
+int64 a
+int64 b
+---
+int64 sum
+---
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/docs/action_interface.svg
@@ -0,0 +1,497 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="744.09448819"
+   height="1052.3622047"
+   id="svg4236"
+   version="1.1"
+   inkscape:version="0.47pre4 r22446"
+   sodipodi:docname="action_interface.svg">
+  <defs
+     id="defs4238">
+    <inkscape:perspective
+       sodipodi:type="inkscape:persp3d"
+       inkscape:vp_x="0 : 526.18109 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_z="744.09448 : 526.18109 : 1"
+       inkscape:persp3d-origin="372.04724 : 350.78739 : 1"
+       id="perspective4244" />
+    <inkscape:perspective
+       id="perspective4254"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-8-0"
+       style="overflow:visible">
+      <path
+         id="path3179-0-7"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective4826"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective4861"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5070"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-8-0-2"
+       style="overflow:visible">
+      <path
+         id="path3179-0-7-4"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective5098"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5123"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-8-0-23"
+       style="overflow:visible">
+      <path
+         id="path3179-0-7-3"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective5151"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5176"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-8-0-8"
+       style="overflow:visible">
+      <path
+         id="path3179-0-7-49"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective5210"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-8-0-87"
+       style="overflow:visible">
+      <path
+         id="path3179-0-7-0"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective5244"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-8"
+       style="overflow:visible">
+      <path
+         id="path3179-0"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker5250"
+       style="overflow:visible">
+      <path
+         id="path5252"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective5307"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5360"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+  </defs>
+  <sodipodi:namedview
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1.0"
+     inkscape:pageopacity="1"
+     inkscape:pageshadow="2"
+     inkscape:zoom="0.98994949"
+     inkscape:cx="301.07391"
+     inkscape:cy="445.86279"
+     inkscape:document-units="px"
+     inkscape:current-layer="layer1"
+     showgrid="false"
+     inkscape:window-width="1369"
+     inkscape:window-height="1146"
+     inkscape:window-x="777"
+     inkscape:window-y="174"
+     inkscape:window-maximized="0" />
+  <metadata
+     id="metadata4241">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+        <dc:title></dc:title>
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <g
+     inkscape:label="Layer 1"
+     inkscape:groupmode="layer"
+     id="layer1">
+    <text
+       xml:space="preserve"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       x="43.095909"
+       y="465.42322"
+       id="text7210-9"
+       inkscape:transform-center-x="78.867159"
+       inkscape:transform-center-y="-21.946782"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan7212-6"
+         x="43.095909"
+         y="465.42322"
+         style="font-size:20px;fill:#336699;fill-opacity:1">Action Interface</tspan></text>
+    <rect
+       style="fill:#cdcdcd;fill-opacity:1;stroke:#000000;stroke-width:0.99999994;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:7.99999952, 0.99999994;stroke-dashoffset:0"
+       id="rect5342"
+       width="163.64471"
+       height="124.24876"
+       x="190.91882"
+       y="523.7196"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2"
+       width="123"
+       height="191.69038"
+       x="68.938438"
+       y="489.99878"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"
+       ry="10.000001"
+       rx="10" />
+    <text
+       id="text3947-3"
+       y="581.30444"
+       x="131.14157"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:20;font-weight:normal;text-align:center;text-anchor:middle"
+         y="581.30444"
+         x="131.14157"
+         sodipodi:role="line"
+         id="tspan3140">Action</tspan><tspan
+         style="font-size:20;font-weight:normal;text-align:center;text-anchor:middle"
+         y="603.80444"
+         x="131.14157"
+         sodipodi:role="line"
+         id="tspan4816">Client</tspan></text>
+    <rect
+       style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2-1"
+       width="123"
+       height="186.39091"
+       x="341.6524"
+       y="492.6485"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"
+       ry="10"
+       rx="10" />
+    <text
+       id="text3947-3-8"
+       y="581.30444"
+       x="402.56793"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:20;font-weight:normal;text-align:center;text-anchor:middle"
+         y="581.30444"
+         x="402.56793"
+         sodipodi:role="line"
+         id="tspan3140-7">Action</tspan><tspan
+         style="font-size:20;font-weight:normal;text-align:center;text-anchor:middle"
+         y="603.80444"
+         x="402.56793"
+         sodipodi:role="line"
+         id="tspan4816-0">Server</tspan></text>
+    <path
+       style="fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-8-0)"
+       d="m 192.92755,542.13362 149.00016,0"
+       id="path4851"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-9-5-9"
+       y="538.55011"
+       x="254.16183"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#ae0000;fill-opacity:1"
+         y="538.55011"
+         x="254.16183"
+         id="tspan3963-9-0-9"
+         sodipodi:role="line">goal</tspan></text>
+    <path
+       style="fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-8-0)"
+       d="m 192.92755,560.97552 149.00016,0"
+       id="path4851-6"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-9-5-9-6"
+       y="558.95844"
+       x="247.52902"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#ae0000;fill-opacity:1"
+         y="558.95844"
+         x="247.52902"
+         id="tspan3963-9-0-9-9"
+         sodipodi:role="line">cancel</tspan></text>
+    <path
+       style="fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-8-0)"
+       d="m 342.21437,593.81746 -149.00016,0"
+       id="path4851-4"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8"
+       y="588.12976"
+       x="266.72433"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="588.12976"
+         x="266.72433"
+         sodipodi:role="line"
+         id="tspan3432">status</tspan></text>
+    <path
+       style="fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-8-0)"
+       d="m 342.21437,612.65937 -149.00016,0"
+       id="path4851-4-2"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-1"
+       y="608.20886"
+       x="266.35519"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="608.20886"
+         x="266.35519"
+         sodipodi:role="line"
+         id="tspan3432-6">result</tspan></text>
+    <path
+       style="fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-8-0)"
+       d="m 342.21437,631.50127 -149.00016,0"
+       id="path4851-4-2-2"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-1-1"
+       y="626.98315"
+       x="266.63937"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="626.98315"
+         x="266.63937"
+         sodipodi:role="line"
+         id="tspan3432-6-9">feedback</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:1;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect4321-2"
+       width="108.57143"
+       height="63.597984"
+       x="498.76578"
+       y="610.43738"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:0.99999994px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-8)"
+       d="m 507.76577,633.97325 89,0"
+       id="path4072-2"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-1-2"
+       y="628.4469"
+       x="509.76184"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#ae0000;fill-opacity:1"
+         y="628.4469"
+         x="509.76184"
+         id="tspan3963-3-63"
+         sodipodi:role="line">From Client</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:0.99999994px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-8)"
+       d="m 507.76577,659.04502 89,0"
+       id="path4072-0-7"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-1-0-7"
+       y="653.51868"
+       x="509.64465"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#336699;fill-opacity:1"
+         y="653.51868"
+         x="509.64465"
+         id="tspan3963-3-6-8"
+         sodipodi:role="line">From Server </tspan></text>
+    <text
+       id="text3961-9-5-9-1"
+       y="507.15988"
+       x="224.85497"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/action_interface.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:16px;font-weight:normal;fill:#000000;fill-opacity:1"
+         y="507.15988"
+         x="224.85497"
+         id="tspan3963-9-0-9-1"
+         sodipodi:role="line">ROS Topics</tspan></text>
+  </g>
+</svg>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/docs/cancel_policy.svg
@@ -0,0 +1,307 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="958.31525"
+   height="513.98163"
+   id="svg6606"
+   sodipodi:version="0.32"
+   inkscape:version="0.47pre4 r22446"
+   version="1.0"
+   sodipodi:docname="cancel_policy.svg"
+   inkscape:output_extension="org.inkscape.output.svg.inkscape"
+   inkscape:export-filename="/u/eitan/wiki/actions/preempt_policy.png"
+   inkscape:export-xdpi="90"
+   inkscape:export-ydpi="90">
+  <defs
+     id="defs6608">
+    <inkscape:perspective
+       sodipodi:type="inkscape:persp3d"
+       inkscape:vp_x="0 : 300 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_z="800 : 300 : 1"
+       inkscape:persp3d-origin="400 : 200 : 1"
+       id="perspective6614" />
+    <inkscape:perspective
+       id="perspective3926"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+  </defs>
+  <sodipodi:namedview
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1.0"
+     inkscape:pageopacity="1"
+     inkscape:pageshadow="2"
+     inkscape:zoom="1"
+     inkscape:cx="461.0301"
+     inkscape:cy="185.75044"
+     inkscape:current-layer="layer1"
+     inkscape:document-units="px"
+     showgrid="false"
+     inkscape:window-width="1379"
+     inkscape:window-height="954"
+     inkscape:window-x="632"
+     inkscape:window-y="530"
+     inkscape:window-maximized="0" />
+  <metadata
+     id="metadata6611">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+        <dc:title></dc:title>
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <g
+     id="layer1"
+     inkscape:label="Layer 1"
+     inkscape:groupmode="layer"
+     transform="translate(-7.6477224,-14.457794)">
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate"
+       id="rect6616"
+       width="248.48979"
+       height="248.48981"
+       x="127.67825"
+       y="173.08934"
+       rx="0.15264323"
+       ry="0.075367458"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/cancel_policy.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+       d="m 251.92315,172.96096 0,248.74657"
+       id="path7127"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/cancel_policy.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+       d="m 127.42491,297.33425 248.99647,0"
+       id="path7129"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/cancel_policy.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       xml:space="preserve"
+       style="font-size:18;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       x="293.49945"
+       y="161.35841"
+       id="text7140"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/cancel_policy.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan7142"
+         x="293.49945"
+         y="161.35841"
+         style="font-size:18">filled</tspan></text>
+    <text
+       xml:space="preserve"
+       style="font-size:18;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       x="156.12367"
+       y="161.00139"
+       id="text7144"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/cancel_policy.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan7146"
+         x="156.12367"
+         y="161.00139"
+         style="font-size:18">empty</tspan></text>
+    <text
+       xml:space="preserve"
+       style="font-size:18;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       x="-272.84833"
+       y="117.6222"
+       id="text7148"
+       transform="matrix(0,-1,1,0,0,0)"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/cancel_policy.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan7150"
+         x="-272.84833"
+         y="117.6222"
+         style="font-size:18">empty</tspan></text>
+    <text
+       xml:space="preserve"
+       style="font-size:18;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       x="-385.19232"
+       y="121.51474"
+       id="text7152"
+       transform="matrix(0,-1,1,0,0,0)"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/cancel_policy.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan7154"
+         x="-385.19232"
+         y="121.51474"
+         style="font-size:18">filled</tspan></text>
+    <text
+       xml:space="preserve"
+       style="font-size:40px;font-style:normal;font-weight:normal;text-align:center;text-anchor:middle;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       x="249.24095"
+       y="131.58717"
+       id="text7156"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/cancel_policy.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan7158"
+         x="249.24095"
+         y="131.58717"
+         style="font-size:20px;text-align:center;text-anchor:middle">stamp</tspan></text>
+    <text
+       xml:space="preserve"
+       style="font-size:40px;font-style:normal;font-weight:normal;text-align:center;text-anchor:middle;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       x="80.276649"
+       y="304.75568"
+       id="text7160"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/cancel_policy.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan7162"
+         x="80.276649"
+         y="304.75568"
+         style="font-size:20px;text-align:center;text-anchor:middle">ID</tspan></text>
+    <text
+       xml:space="preserve"
+       style="font-size:14;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       x="189.57484"
+       y="230.75166"
+       id="text7164"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/cancel_policy.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan7166"
+         x="192.12172"
+         y="230.75166"
+         style="font-size:14;text-align:center;text-anchor:middle">cancel all </tspan><tspan
+         sodipodi:role="line"
+         x="189.57484"
+         y="250.75166"
+         style="font-size:14;text-align:center;text-anchor:middle"
+         id="tspan7168">goals</tspan></text>
+    <text
+       xml:space="preserve"
+       style="font-size:14;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       x="316.88861"
+       y="224.50166"
+       id="text7170"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/cancel_policy.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         x="319.43549"
+         y="224.50166"
+         style="font-size:14;text-align:center;text-anchor:middle"
+         id="tspan7174">cancel all </tspan><tspan
+         sodipodi:role="line"
+         x="319.43549"
+         y="244.50166"
+         style="font-size:14;text-align:center;text-anchor:middle"
+         id="tspan7178">goals before </tspan><tspan
+         sodipodi:role="line"
+         x="316.88861"
+         y="264.50165"
+         style="font-size:14;font-style:italic;text-align:center;text-anchor:middle"
+         id="tspan7196">stamp</tspan></text>
+    <text
+       xml:space="preserve"
+       style="font-size:14;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       x="189.00014"
+       y="353.0141"
+       id="text7180"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/cancel_policy.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         x="189.00014"
+         y="353.0141"
+         style="font-size:14;text-align:center;text-anchor:middle"
+         id="tspan7190">cancel goal</tspan><tspan
+         sodipodi:role="line"
+         x="189.00014"
+         y="373.0141"
+         style="font-size:14;font-style:italic;text-align:center;text-anchor:middle"
+         id="tspan3095">Goal ID</tspan></text>
+    <text
+       xml:space="preserve"
+       style="font-size:14px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       x="314.71918"
+       y="324.76947"
+       id="text7198"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/cancel_policy.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         x="314.71918"
+         y="324.76947"
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         id="tspan7202">cancel goal</tspan><tspan
+         sodipodi:role="line"
+         x="314.71918"
+         y="342.26947"
+         style="font-size:14px;font-style:italic;text-align:center;text-anchor:middle"
+         id="tspan3896">Goal ID</tspan><tspan
+         sodipodi:role="line"
+         x="314.71918"
+         y="359.76947"
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         id="tspan3910">+</tspan><tspan
+         sodipodi:role="line"
+         x="314.71918"
+         y="377.26947"
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         id="tspan3894">cancel all</tspan><tspan
+         sodipodi:role="line"
+         x="314.71918"
+         y="394.76947"
+         style="font-size:14px;font-style:italic;text-align:center;text-anchor:middle"
+         id="tspan3886"><tspan
+   id="tspan3914"
+   style="font-size:14px;font-style:normal;text-align:center;text-anchor:middle">goals before</tspan></tspan><tspan
+         sodipodi:role="line"
+         x="314.71918"
+         y="412.26947"
+         style="font-size:14px;font-style:italic;text-align:center;text-anchor:middle"
+         id="tspan3916">stamp</tspan></text>
+    <text
+       xml:space="preserve"
+       style="font-size:20px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       x="39.160015"
+       y="96.725761"
+       id="text7210"
+       inkscape:transform-center-x="78.867159"
+       inkscape:transform-center-y="-21.946782"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/cancel_policy.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan7212"
+         x="39.160015"
+         y="96.725761"
+         style="font-size:20px;fill:#336699;fill-opacity:1">Cancel Request Policy</tspan></text>
+  </g>
+</svg>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/docs/server_states_detailed.svg
@@ -0,0 +1,6147 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:xlink="http://www.w3.org/1999/xlink"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="1000"
+   height="1000"
+   id="svg7483"
+   sodipodi:version="0.32"
+   inkscape:version="0.47pre4 r22446"
+   version="1.0"
+   sodipodi:docname="server_states_detailed.svg"
+   inkscape:output_extension="org.inkscape.output.svg.inkscape"
+   inkscape:export-filename="/u/eitan/wiki/actions/goal_status_transitions.png"
+   inkscape:export-xdpi="90"
+   inkscape:export-ydpi="90">
+  <defs
+     id="defs7485">
+    <linearGradient
+       id="linearGradient3935">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937" />
+      <stop
+         id="stop3943"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lstart"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lstart"
+       style="overflow:visible">
+      <path
+         id="path3785"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(0.8,0,0,0.8,10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend"
+       style="overflow:visible">
+      <path
+         id="path3179"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       sodipodi:type="inkscape:persp3d"
+       inkscape:vp_x="0 : 300 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_z="800 : 300 : 1"
+       inkscape:persp3d-origin="400 : 200 : 1"
+       id="perspective7491" />
+    <inkscape:perspective
+       id="perspective3656"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3681"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3703"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3916"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient3935"
+       id="radialGradient3941"
+       cx="297.5"
+       cy="516.5"
+       fx="297.5"
+       fy="516.5"
+       r="31.5"
+       gradientTransform="matrix(1.1311475,0,0,0.80129336,-75.92544,-892.49035)"
+       gradientUnits="userSpaceOnUse" />
+    <inkscape:perspective
+       id="perspective3973"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-8"
+       style="overflow:visible">
+      <path
+         id="path3179-0"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <linearGradient
+       id="linearGradient3935-8">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-4" />
+      <stop
+         id="stop3943-1"
+         offset="0.15384616"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-5" />
+    </linearGradient>
+    <inkscape:perspective
+       id="perspective5629"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5654"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5679"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5707"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5707-3"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5760"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5760-6"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5809"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5838"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient3935-2"
+       id="radialGradient3941-9"
+       cx="297.5"
+       cy="516.5"
+       fx="297.5"
+       fy="516.5"
+       r="31.5"
+       gradientTransform="matrix(1.1311475,0,0,0.80129336,-159.92544,-563.49035)"
+       gradientUnits="userSpaceOnUse" />
+    <linearGradient
+       id="linearGradient3935-2">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-47" />
+      <stop
+         id="stop3943-8"
+         offset="0.21153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-3" />
+    </linearGradient>
+    <inkscape:perspective
+       id="perspective6271"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.7377049,0,0,1.4832452,-5.3762528,-872.2186)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient5848-0"
+       xlink:href="#linearGradient3935-2-5"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-2-5">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-47-3" />
+      <stop
+         id="stop3943-8-6"
+         offset="0.57692307"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-3-4" />
+    </linearGradient>
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient3935"
+       id="radialGradient6316"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,-75.92544,-669.65349)"
+       cx="297.5"
+       cy="516.5"
+       fx="297.5"
+       fy="516.5"
+       r="31.5" />
+    <inkscape:perspective
+       id="perspective6326"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.3278688,0,0,0.32392712,117.04997,-281.43072)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient5848-1"
+       xlink:href="#linearGradient3935-2-2"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-2-2">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-47-0" />
+      <stop
+         id="stop3943-8-0"
+         offset="0.57692307"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-3-9" />
+    </linearGradient>
+    <inkscape:perspective
+       id="perspective6369"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective6369-0"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective6400"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective6437"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective2979"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3024"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3049"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient3935-6"
+       id="radialGradient6316-5"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,-114.92544,-338.15349)"
+       cx="297.5"
+       cy="516.5"
+       fx="297.5"
+       fy="516.5"
+       r="31.5" />
+    <linearGradient
+       id="linearGradient3935-6">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9" />
+      <stop
+         id="stop3943-87"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,130.32456,-669.65351)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient3059"
+       xlink:href="#linearGradient3935-6"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective4082"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective4295"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-8-0"
+       style="overflow:visible">
+      <path
+         id="path3179-0-7"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective4551"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective4576"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective4601"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective4623"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective4840"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective4865"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient3935-9"
+       id="radialGradient6316-53"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,-47.92544,-528.65349)"
+       cx="297.5"
+       cy="516.5"
+       fx="297.5"
+       fy="516.5"
+       r="31.5" />
+    <linearGradient
+       id="linearGradient3935-9">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-8" />
+      <stop
+         id="stop3943-6"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-6" />
+    </linearGradient>
+    <inkscape:perspective
+       id="perspective3390"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <linearGradient
+       id="linearGradient3935-9-6">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-8-4" />
+      <stop
+         id="stop3943-6-0"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-6-0" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-8-0-4"
+       style="overflow:visible">
+      <path
+         id="path3179-0-7-6"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3401"
+       style="overflow:visible">
+      <path
+         id="path3403"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-8-2"
+       style="overflow:visible">
+      <path
+         id="path3179-0-6"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3407"
+       style="overflow:visible">
+      <path
+         id="path3409"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3411"
+       style="overflow:visible">
+      <path
+         id="path3413"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3415"
+       style="overflow:visible">
+      <path
+         id="path3417"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3419"
+       style="overflow:visible">
+      <path
+         id="path3421"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3423"
+       style="overflow:visible">
+      <path
+         id="path3425"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <linearGradient
+       id="linearGradient3935-6-5">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-6" />
+      <stop
+         id="stop3943-87-9"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-8" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3432"
+       style="overflow:visible">
+      <path
+         id="path3434"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3436"
+       style="overflow:visible">
+      <path
+         id="path3438"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3440"
+       style="overflow:visible">
+      <path
+         id="path3442"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <linearGradient
+       id="linearGradient3935-28">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-2" />
+      <stop
+         id="stop3943-9"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-9" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-6"
+       style="overflow:visible">
+      <path
+         id="path3179-02"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <linearGradient
+       id="linearGradient3452">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3454" />
+      <stop
+         id="stop3456"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3458" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3460"
+       style="overflow:visible">
+      <path
+         id="path3462"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective3807"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3807-7"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3807-4"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5165"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5630"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5661"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5692"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5946"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5971"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5996"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective6461"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective6483"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective6508"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient3935-60"
+       id="radialGradient6316-51"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,-63.92544,-528.65349)"
+       cx="297.5"
+       cy="516.5"
+       fx="297.5"
+       fy="516.5"
+       r="31.5" />
+    <linearGradient
+       id="linearGradient3935-60">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-40" />
+      <stop
+         id="stop3943-4"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-8" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,-76.425447,-557.51915)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6518"
+       xlink:href="#linearGradient3935-60"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6549"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,-64.425447,-416.51915)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6518-6"
+       xlink:href="#linearGradient3935-60-1"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-60-1">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-40-6" />
+      <stop
+         id="stop3943-4-6"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-8-0" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,131.35691,-556.34759)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6559"
+       xlink:href="#linearGradient3935-60-1"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6590"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,129.35691,-415.34759)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6559-6"
+       xlink:href="#linearGradient3935-60-1-3"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-60-1-3">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-40-6-6" />
+      <stop
+         id="stop3943-4-6-1"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-8-0-8" />
+    </linearGradient>
+    <inkscape:perspective
+       id="perspective6631"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,129.35691,-415.34759)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6559-0"
+       xlink:href="#linearGradient3935-60-1-7"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-60-1-7">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-40-6-0" />
+      <stop
+         id="stop3943-4-6-8"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-8-0-5" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,213.62395,-646.15016)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6641"
+       xlink:href="#linearGradient3935-60-1-7"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6672"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,211.62395,-505.15016)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6641-7"
+       xlink:href="#linearGradient3935-60-1-7-3"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-60-1-7-3">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-40-6-0-7" />
+      <stop
+         id="stop3943-4-6-8-5"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-8-0-5-4" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,214.67421,-681.3842)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6682"
+       xlink:href="#linearGradient3935-60-1-7-3"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6885"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3095"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3120"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3150"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3150-9"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3200"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3228"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3259"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3287"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3339"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3374"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3413"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3442"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3470"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3495"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3520"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3548"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3578"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3603"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3648"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3676"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3738"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3763"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3794"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective6224"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-8-0-0"
+       style="overflow:visible">
+      <path
+         id="path3179-0-7-4"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective6492"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,128.32456,-669.65351)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient3059-4"
+       xlink:href="#linearGradient3935-6-9"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-9">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-3" />
+      <stop
+         id="stop3943-87-2"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-4" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,-254.42544,-191.65355)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502"
+       xlink:href="#linearGradient3935-6-9"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6492-1"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,128.32456,-669.65351)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient3059-8"
+       xlink:href="#linearGradient3935-6-4"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-4">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-1" />
+      <stop
+         id="stop3943-87-7"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-7" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,-191.42544,-126.65355)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-9"
+       xlink:href="#linearGradient3935-6-4"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6492-8"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,128.32456,-669.65351)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient3059-7"
+       xlink:href="#linearGradient3935-6-3"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-3">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-7" />
+      <stop
+         id="stop3943-87-1"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-9" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,-68.425439,-122.65355)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-4"
+       xlink:href="#linearGradient3935-6-3"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6492-6"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,128.32456,-669.65351)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient3059-6"
+       xlink:href="#linearGradient3935-6-54"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-54">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-77" />
+      <stop
+         id="stop3943-87-25"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-6" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,-201.42544,-239.65355)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-96"
+       xlink:href="#linearGradient3935-6-54"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6492-11"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,128.32456,-669.65351)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient3059-1"
+       xlink:href="#linearGradient3935-6-1"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9" />
+      <stop
+         id="stop3943-87-3"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,-100.42544,-241.65355)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-2"
+       xlink:href="#linearGradient3935-6-1"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6492-5"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,128.32456,-669.65351)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient3059-0"
+       xlink:href="#linearGradient3935-6-16"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-16">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65" />
+      <stop
+         id="stop3943-87-97"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,42.57456,-119.65355)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-968"
+       xlink:href="#linearGradient3935-6-16"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6492-7"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,128.32456,-669.65351)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient3059-63"
+       xlink:href="#linearGradient3935-6-32"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-32">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-4" />
+      <stop
+         id="stop3943-87-78"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-5" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,-145.42544,-6.6535455)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-3"
+       xlink:href="#linearGradient3935-6-32"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6492-0"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,128.32456,-669.65351)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient3059-10"
+       xlink:href="#linearGradient3935-6-7"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-7">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-17" />
+      <stop
+         id="stop3943-87-0"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-3" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,-17.425439,-2.6535455)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-98"
+       xlink:href="#linearGradient3935-6-7"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6492-74"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,128.32456,-669.65351)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient3059-2"
+       xlink:href="#linearGradient3935-6-75"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-75">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-5" />
+      <stop
+         id="stop3943-87-71"
+         offset="0.67307693"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-37" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,1.1593181,144.57456,-482.41027)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-7"
+       xlink:href="#linearGradient3935-6-75"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6701"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,1.1593181,246.57456,-482.41027)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-7-3"
+       xlink:href="#linearGradient3935-6-75-4"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-75-4">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-5-8" />
+      <stop
+         id="stop3943-87-71-9"
+         offset="0.76923078"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-37-2" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.819672,0,0,1.1593181,-116.2615,-408.91032)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6711"
+       xlink:href="#linearGradient3935-6-75-4"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6742"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.819672,0,0,1.1593181,-14.261498,-408.91032)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6711-4"
+       xlink:href="#linearGradient3935-6-75-4-5"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-75-4-5">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-5-8-9" />
+      <stop
+         id="stop3943-87-71-9-4"
+         offset="0.76923078"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-37-2-8" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.3934425,0,0,1.1593181,19.54178,-339.91032)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6752"
+       xlink:href="#linearGradient3935-6-75-4-5"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6783"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,1.5745607,-241.65355)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-2-6"
+       xlink:href="#linearGradient3935-6-1-0"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1-0">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9-4" />
+      <stop
+         id="stop3943-87-3-6"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67-6" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.76719577,266.57456,-197.3791)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6793"
+       xlink:href="#linearGradient3935-6-1-0"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6783-9"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,1.5745607,-241.65355)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-2-0"
+       xlink:href="#linearGradient3935-6-1-4"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1-4">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9-42" />
+      <stop
+         id="stop3943-87-3-8"
+         offset="0.80769229"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67-9" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.5573769,0,0,0.39212228,-267.22871,-65.653566)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6793-7"
+       xlink:href="#linearGradient3935-6-1-4"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6845"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-8-7"
+       style="overflow:visible">
+      <path
+         id="path3179-0-3"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker6851"
+       style="overflow:visible">
+      <path
+         id="path6853"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective3305"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,-100.42544,-241.65355)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-2-7"
+       xlink:href="#linearGradient3935-6-1-8"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1-8">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9-8" />
+      <stop
+         id="stop3943-87-3-60"
+         offset="0.57692307"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67-4" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,-22.425439,-176.65357)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient3317"
+       xlink:href="#linearGradient3935-6-1-8"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective3313"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,964.37339,-328.77515)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient3317-2"
+       xlink:href="#linearGradient3935-6-1-8-9"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1-8-9">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9-8-3" />
+      <stop
+         id="stop3943-87-3-60-9"
+         offset="0.57692307"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67-4-0" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-8-8"
+       style="overflow:visible">
+      <path
+         id="path3179-0-8"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3324"
+       style="overflow:visible">
+      <path
+         id="path3326"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,912.37339,-274.77513)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-4-5"
+       xlink:href="#linearGradient3935-6-3-0"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-3-0">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-7-9" />
+      <stop
+         id="stop3943-87-1-6"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-9-3" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,1031.3734,-278.77513)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-9-8"
+       xlink:href="#linearGradient3935-6-4-5"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-4-5">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-1-6" />
+      <stop
+         id="stop3943-87-7-1"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-7-1" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,761.37339,-372.77513)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-5"
+       xlink:href="#linearGradient3935-6-9-9"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-9-9">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-3-8" />
+      <stop
+         id="stop3943-87-2-4"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-4-8" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-8-0-1"
+       style="overflow:visible">
+      <path
+         id="path3179-0-7-0"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.76719577,970.3734,-130.50068)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6793-3"
+       xlink:href="#linearGradient3935-6-1-0-0"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1-0-0">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9-4-4" />
+      <stop
+         id="stop3943-87-3-6-4"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67-6-4" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,1.0570253,1037.3734,-386.69762)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-7-4"
+       xlink:href="#linearGradient3935-6-75-7"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-75-7">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-5-6" />
+      <stop
+         id="stop3943-87-71-3"
+         offset="0.67307693"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-37-1" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,1029.3734,-159.77513)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-968-7"
+       xlink:href="#linearGradient3935-6-16-5"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-16-5">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-9" />
+      <stop
+         id="stop3943-87-97-6"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-2" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3460-1"
+       style="overflow:visible">
+      <path
+         id="path3462-7"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.3934425,0,0,0.7671958,1116.3406,-345.50067)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6752-8"
+       xlink:href="#linearGradient3935-6-75-4-5-5"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-75-4-5-5">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-5-8-9-7" />
+      <stop
+         id="stop3943-87-71-9-4-4"
+         offset="0.76923078"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-37-2-8-1" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient3935-6-7-5">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-17-9" />
+      <stop
+         id="stop3943-87-0-7"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-3-5" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3372"
+       style="overflow:visible">
+      <path
+         id="path3374"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.5520732,0,0,0.79594504,782.14798,-255.34966)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6711-3"
+       xlink:href="#linearGradient3935-6-75-4-8"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-75-4-8">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-5-8-8" />
+      <stop
+         id="stop3943-87-71-9-3"
+         offset="0.67307693"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-37-2-1" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3381"
+       style="overflow:visible">
+      <path
+         id="path3383"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,902.37339,-158.77513)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-3-8"
+       xlink:href="#linearGradient3935-6-32-9"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-32-9">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-4-6" />
+      <stop
+         id="stop3943-87-78-4"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-5-3" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(0.73770485,0,0,0.56261023,1198.4226,-297.8322)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6793-7-3"
+       xlink:href="#linearGradient3935-6-1-4-3"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1-4-3">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9-42-8" />
+      <stop
+         id="stop3943-87-3-8-6"
+         offset="0.5"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67-9-0" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,1028.3734,-383.77513)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-2-4"
+       xlink:href="#linearGradient3935-6-1-88"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1-88">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9-89" />
+      <stop
+         id="stop3943-87-3-7"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67-7" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,909.37339,-384.77513)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-96-6"
+       xlink:href="#linearGradient3935-6-54-4"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-54-4">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-77-3" />
+      <stop
+         id="stop3943-87-25-0"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-6-3" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3405"
+       style="overflow:visible">
+      <path
+         id="path3407"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3409"
+       style="overflow:visible">
+      <path
+         id="path3411"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3413"
+       style="overflow:visible">
+      <path
+         id="path3415"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3417"
+       style="overflow:visible">
+      <path
+         id="path3419"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3421"
+       style="overflow:visible">
+      <path
+         id="path3423"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3425"
+       style="overflow:visible">
+      <path
+         id="path3427"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3429"
+       style="overflow:visible">
+      <path
+         id="path3431"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3433"
+       style="overflow:visible">
+      <path
+         id="path3435"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3437"
+       style="overflow:visible">
+      <path
+         id="path3439"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3441"
+       style="overflow:visible">
+      <path
+         id="path3443"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3445"
+       style="overflow:visible">
+      <path
+         id="path3447"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective5239"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(0.73770485,0,0,0.56261023,1198.4226,-297.8322)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6793-7-3-6"
+       xlink:href="#linearGradient3935-6-1-4-3-9"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1-4-3-9">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9-42-8-4" />
+      <stop
+         id="stop3943-87-3-8-6-1"
+         offset="0.5"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67-9-0-4" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(0.73770485,0,0,0.56261023,970.62378,-283.71062)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient5251"
+       xlink:href="#linearGradient3935-6-1-4-3-9"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective5286"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(0.73770485,0,0,0.56261023,968.62378,-287.71062)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient5251-4"
+       xlink:href="#linearGradient3935-6-1-4-3-9-8"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1-4-3-9-8">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9-42-8-4-1" />
+      <stop
+         id="stop3943-87-3-8-6-1-6"
+         offset="0.26923078"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67-9-0-4-5" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(0.44262292,0,0,0.56261023,1059.4106,-320.71064)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient5296"
+       xlink:href="#linearGradient3935-6-1-4-3-9-8"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective5331"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5353"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5375"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5397"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5422"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5447"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5472"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5494"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5516"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5541"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-8-4"
+       style="overflow:visible">
+      <path
+         id="path3179-0-9"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker5547"
+       style="overflow:visible">
+      <path
+         id="path5549"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(0.73770485,0,0,0.56261023,971.77122,-910.68219)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient5251-44"
+       xlink:href="#linearGradient3935-6-1-4-3-9-81"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1-4-3-9-81">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9-42-8-4-3" />
+      <stop
+         id="stop3943-87-3-8-6-1-66"
+         offset="0.5"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67-9-0-4-7" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3445-7"
+       style="overflow:visible">
+      <path
+         id="path3447-0"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(0.44262292,0,0,0.56261023,1060.558,-947.68229)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient5296-1"
+       xlink:href="#linearGradient3935-6-1-4-3-9-8-1"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1-4-3-9-8-1">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9-42-8-4-1-8" />
+      <stop
+         id="stop3943-87-3-8-6-1-6-3"
+         offset="0.26923078"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67-9-0-4-5-2" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,965.52083,-955.74679)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient3317-2-3"
+       xlink:href="#linearGradient3935-6-1-8-9-6"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1-8-9-6">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9-8-3-3" />
+      <stop
+         id="stop3943-87-3-60-9-6"
+         offset="0.57692307"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67-4-0-4" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,913.52084,-901.74669)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-4-5-5"
+       xlink:href="#linearGradient3935-6-3-0-5"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-3-0-5">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-7-9-1" />
+      <stop
+         id="stop3943-87-1-6-5"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-9-3-0" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,1032.5208,-905.74669)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-9-8-6"
+       xlink:href="#linearGradient3935-6-4-5-9"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-4-5-9">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-1-6-3" />
+      <stop
+         id="stop3943-87-7-1-7"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-7-1-5" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,768.52083,-900.74669)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-5-5"
+       xlink:href="#linearGradient3935-6-9-9-3"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-9-9-3">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-3-8-9" />
+      <stop
+         id="stop3943-87-2-4-5"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-4-8-4" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-8-0-41"
+       style="overflow:visible">
+      <path
+         id="path3179-0-7-2"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.76719577,1093.5208,-807.47229)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6793-3-1"
+       xlink:href="#linearGradient3935-6-1-0-0-0"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1-0-0-0">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9-4-4-5" />
+      <stop
+         id="stop3943-87-3-6-4-2"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67-6-4-2" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,1.0570253,1038.5208,-1013.6692)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-7-4-3"
+       xlink:href="#linearGradient3935-6-75-7-7"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-75-7-7">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-5-6-6" />
+      <stop
+         id="stop3943-87-71-3-8"
+         offset="0.67307693"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-37-1-4" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,1030.5208,-786.74669)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-968-7-1"
+       xlink:href="#linearGradient3935-6-16-5-6"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-16-5-6">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-9-0" />
+      <stop
+         id="stop3943-87-97-6-6"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-2-1" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(0.73770485,0,0,0.56261023,1199.5701,-924.80379)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6793-7-3-1"
+       xlink:href="#linearGradient3935-6-1-4-3-4"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1-4-3-4">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9-42-8-1" />
+      <stop
+         id="stop3943-87-3-8-6-0"
+         offset="0.5"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67-9-0-5" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker3460-7"
+       style="overflow:visible">
+      <path
+         id="path3462-70"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.3934425,0,0,1.1593181,1131.488,-1175.0035)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6752-8-2"
+       xlink:href="#linearGradient3935-6-75-4-5-5-1"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-75-4-5-5-1">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-5-8-9-7-1" />
+      <stop
+         id="stop3943-87-71-9-4-4-9"
+         offset="0.76923078"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-37-2-8-1-7" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker5612"
+       style="overflow:visible">
+      <path
+         id="path5614"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.5520732,0,0,0.98883014,785.29542,-977.94649)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6711-3-5"
+       xlink:href="#linearGradient3935-6-75-4-8-0"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-75-4-8-0">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-5-8-8-0" />
+      <stop
+         id="stop3943-87-71-9-3-8"
+         offset="0.67307693"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-37-2-1-1" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker5621"
+       style="overflow:visible">
+      <path
+         id="path5623"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,903.52084,-785.74669)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-3-8-7"
+       xlink:href="#linearGradient3935-6-32-9-2"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-32-9-2">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-4-6-5" />
+      <stop
+         id="stop3943-87-78-4-0"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-5-3-0" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,1029.5208,-1010.7467)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-2-4-1"
+       xlink:href="#linearGradient3935-6-1-88-0"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1-88-0">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9-89-6" />
+      <stop
+         id="stop3943-87-3-7-3"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67-7-7" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,910.52084,-1011.7467)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-96-6-6"
+       xlink:href="#linearGradient3935-6-54-4-1"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-54-4-1">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-77-3-8" />
+      <stop
+         id="stop3943-87-25-0-7"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-6-3-7" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker5640"
+       style="overflow:visible">
+      <path
+         id="path5642"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker5644"
+       style="overflow:visible">
+      <path
+         id="path5646"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker5648"
+       style="overflow:visible">
+      <path
+         id="path5650"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker5652"
+       style="overflow:visible">
+      <path
+         id="path5654"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker5656"
+       style="overflow:visible">
+      <path
+         id="path5658"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker5660"
+       style="overflow:visible">
+      <path
+         id="path5662"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker5664"
+       style="overflow:visible">
+      <path
+         id="path5666"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker5668"
+       style="overflow:visible">
+      <path
+         id="path5670"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker5672"
+       style="overflow:visible">
+      <path
+         id="path5674"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker5676"
+       style="overflow:visible">
+      <path
+         id="path5678"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker5680"
+       style="overflow:visible">
+      <path
+         id="path5682"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective3672"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3700"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3700-6"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5459"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.76719577,266.57456,-197.3791)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6793-2"
+       xlink:href="#linearGradient3935-6-1-0-8"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1-0-8">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9-4-1" />
+      <stop
+         id="stop3943-87-3-6-7"
+         offset="0.46153846"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67-6-7" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.76719577,1154.5404,159.79455)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient5472"
+       xlink:href="#linearGradient3935-6-1-0-8"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective5509"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,1.1593181,144.57456,-482.41027)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-7-5"
+       xlink:href="#linearGradient3935-6-75-0"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-75-0">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-5-1" />
+      <stop
+         id="stop3943-87-71-6"
+         offset="0.67307693"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-37-0" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,1.1593181,919.02362,-42.150864)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient5523"
+       xlink:href="#linearGradient3935-6-75-0"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective3704"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective3736"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(0.44262292,0,0,0.56261023,1059.4106,-320.71064)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient5296-11"
+       xlink:href="#linearGradient3935-6-1-4-3-9-8-0"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-1-4-3-9-8-0">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-9-42-8-4-1-0" />
+      <stop
+         id="stop3943-87-3-8-6-1-6-7"
+         offset="0.26923078"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-67-9-0-4-5-0" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(0.44262292,0,0,0.56261023,1007.4106,-344.71066)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient3746"
+       xlink:href="#linearGradient3935-6-1-4-3-9-8-0"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective5171"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5202"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.5520732,0,0,0.79594504,782.14798,-255.34966)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6711-3-9"
+       xlink:href="#linearGradient3935-6-75-4-8-8"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-75-4-8-8">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-5-8-8-1" />
+      <stop
+         id="stop3943-87-71-9-3-5"
+         offset="0.67307693"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-37-2-1-6" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.5520732,0,0,0.45496912,676.34918,-67.113946)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient5212"
+       xlink:href="#linearGradient3935-6-75-4-8-8"
+       inkscape:collect="always" />
+  </defs>
+  <sodipodi:namedview
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1.0"
+     inkscape:pageopacity="1"
+     inkscape:pageshadow="2"
+     inkscape:zoom="1"
+     inkscape:cx="529.72623"
+     inkscape:cy="735.71988"
+     inkscape:current-layer="layer1"
+     inkscape:document-units="px"
+     showgrid="false"
+     inkscape:window-width="2312"
+     inkscape:window-height="1124"
+     inkscape:window-x="0"
+     inkscape:window-y="25"
+     inkscape:window-maximized="0" />
+  <metadata
+     id="metadata7488">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+        <dc:title />
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <g
+     id="layer1"
+     inkscape:label="Layer 1"
+     inkscape:groupmode="layer"
+     transform="translate(17.909055,678.12233)"
+     style="display:inline">
+    <text
+       xml:space="preserve"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       x="5.8828163"
+       y="-605.80103"
+       id="text7210"
+       inkscape:transform-center-x="78.867159"
+       inkscape:transform-center-y="-21.946782"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan7212"
+         x="5.8828163"
+         y="-605.80103"
+         style="font-size:20px;fill:#336699;fill-opacity:1"
+         rotate="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0">Server State Transitions</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-9"
+       width="123"
+       height="48"
+       x="199.09094"
+       y="-426.62231"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend)"
+       d="m 260.59094,-491.12231 0,64.5"
+       id="path3720"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"
+       inkscape:connection-end="#rect2862-9" />
+    <rect
+       style="fill:url(#radialGradient3941);fill-opacity:1;stroke:none"
+       id="rect3933"
+       width="69"
+       height="47"
+       x="226.09094"
+       y="-502.12231"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3947"
+       y="-510.02612"
+       x="260.48157"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="-510.02612"
+         x="260.48157"
+         id="tspan3949"
+         sodipodi:role="line">PENDING</tspan></text>
+    <text
+       id="text3953"
+       y="-397.52612"
+       x="260.48157"
+       style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="-397.52612"
+         x="260.48157"
+         id="tspan3955"
+         sodipodi:role="line">RECALLING</tspan></text>
+    <path
+       inkscape:connector-type="polyline"
+       id="path3957"
+       d="m 260.59094,-491.12231 0,64.5"
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend)"
+       inkscape:connection-start="#rect2862"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"
+       inkscape:connection-end="#rect2862-9" />
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862"
+       width="123"
+       height="48"
+       x="199.09094"
+       y="-539.12231"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       y="-478.62231"
+       x="226.09094"
+       height="23"
+       width="69"
+       id="rect3959"
+       style="fill:url(#radialGradient6316);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961"
+       y="-462.57007"
+       x="260.40051"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#ae0000;fill-opacity:1"
+         y="-462.57007"
+         x="260.40051"
+         id="tspan3963"
+         sodipodi:role="line">CancelRequest</tspan></text>
+    <rect
+       rx="20"
+       ry="20"
+       y="-539.12231"
+       x="406.34094"
+       height="48"
+       width="123"
+       id="rect3945-1"
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3947-1"
+       y="-510.02612"
+       x="468.24084"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="-510.02612"
+         x="468.24084"
+         id="tspan3949-0"
+         sodipodi:role="line">ACTIVE</tspan></text>
+    <rect
+       rx="20"
+       ry="20"
+       y="-426.62231"
+       x="405.34094"
+       height="48"
+       width="123"
+       id="rect3951-9"
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3953-5"
+       y="-397.52612"
+       x="466.73157"
+       style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="-397.52612"
+         x="466.73157"
+         id="tspan3955-6"
+         sodipodi:role="line">PREEMPTING</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-mid:none;marker-end:url(#Arrow1Lend-8)"
+       d="m 467.62761,-491.12231 -0.57333,64.5"
+       id="path4867"
+       inkscape:connector-type="polyline"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"
+       inkscape:connection-end="#rect3951-9"
+       inkscape:connection-start="#rect3945-1" />
+    <rect
+       y="-478.62231"
+       x="432.34094"
+       height="23"
+       width="69"
+       id="rect3959-8"
+       style="fill:url(#radialGradient3059);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-2"
+       y="-462.57007"
+       x="466.65051"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#ae0000;fill-opacity:1"
+         y="-462.57007"
+         x="466.65051"
+         id="tspan3963-5"
+         sodipodi:role="line">CancelRequest</tspan></text>
+    <text
+       id="text3961-0"
+       y="-523.64868"
+       x="324.72961"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#336699;fill-opacity:1"
+         y="-523.64868"
+         x="324.72961"
+         id="tspan3963-7"
+         sodipodi:role="line">setAccepted</tspan></text>
+    <text
+       id="text3961-0-0"
+       y="-388.32251"
+       x="324.72961"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#336699;fill-opacity:1"
+         y="-388.32251"
+         x="324.72961"
+         id="tspan3963-7-1"
+         sodipodi:role="line">setAccepted</tspan></text>
+    <text
+       id="text3961-0-0-9"
+       y="-522.4856"
+       x="575.31067"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-522.4856"
+         x="575.31067"
+         id="tspan3963-7-1-0"
+         sodipodi:role="line">setSucceeded</tspan><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-507.4856"
+         x="575.31067"
+         sodipodi:role="line"
+         id="tspan6359" /><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-492.4856"
+         x="575.31067"
+         sodipodi:role="line"
+         id="tspan5828" /></text>
+    <rect
+       style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-9-9"
+       width="123"
+       height="48"
+       x="12.590946"
+       y="-482.87231"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       xml:space="preserve"
+       style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       x="73.032837"
+       y="-454.57013"
+       id="text2461-0-5"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan2463-6-9"
+         x="73.032837"
+         y="-454.57013"
+         style="font-size:14px;text-align:center;text-anchor:middle">REJECTED</tspan></text>
+    <rect
+       style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-9-9-0"
+       width="123"
+       height="48"
+       x="198.59094"
+       y="-314.12231"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       xml:space="preserve"
+       style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       x="259.81409"
+       y="-285.02612"
+       id="text2461-0-5-9"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan2463-6-9-2"
+         x="259.81409"
+         y="-285.02612"
+         style="font-size:14px;text-align:center;text-anchor:middle">RECALLED</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-8-0-0)"
+       d="m 260.48428,-378.62231 -0.28667,64.5"
+       id="path6244"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862-9"
+       inkscape:connection-end="#rect2862-9-9-0"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       y="-366.48795"
+       x="225.59094"
+       height="23"
+       width="69"
+       id="rect3959-1"
+       style="fill:url(#radialGradient6518);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1"
+       y="-350.64868"
+       x="260.31067"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-350.64868"
+         x="260.31067"
+         sodipodi:role="line"
+         id="tspan5828-6">setCanceled</tspan></text>
+    <text
+       id="text3961-0-0-9-1-1"
+       y="-496.64868"
+       x="154.31067"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-496.64868"
+         x="154.31067"
+         sodipodi:role="line"
+         id="tspan5828-6-0">setRejected</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:0.99999994;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect4321"
+       width="130"
+       height="98.597984"
+       x="607.59094"
+       y="-355.12231"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:0.99999994px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-8)"
+       d="m 616.59094,-331.58644 112.00001,0"
+       id="path4072"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-1"
+       y="-337.11279"
+       x="618.58704"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#ae0000;fill-opacity:1"
+         y="-337.11279"
+         x="618.58704"
+         id="tspan3963-3"
+         sodipodi:role="line">Client Triggered</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:0.99999994px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-8)"
+       d="m 616.59094,-306.51467 112.00001,0"
+       id="path4072-0"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-1-0"
+       y="-312.04102"
+       x="618.46985"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#336699;fill-opacity:1"
+         y="-312.04102"
+         x="618.46985"
+         id="tspan3963-3-6"
+         sodipodi:role="line">Server Triggered</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-8-0)"
+       d="m 261.09094,-565.12233 0,26"
+       id="path4337"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-9"
+       y="-570.64868"
+       x="221.49133"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#ae0000;fill-opacity:1"
+         y="-570.64868"
+         x="221.49133"
+         id="tspan3963-9"
+         sodipodi:role="line">Receive Goal</tspan></text>
+    <rect
+       rx="20"
+       ry="20"
+       y="-539.12231"
+       x="623.59094"
+       height="48"
+       width="123"
+       id="rect3945-1-0"
+       style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       rx="20"
+       ry="20"
+       y="-426.62231"
+       x="626.59094"
+       height="48"
+       width="123"
+       id="rect3945-1-7"
+       style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       rx="20"
+       ry="20"
+       y="-314.12231"
+       x="405.59094"
+       height="48"
+       width="123"
+       id="rect3945-1-06"
+       style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 466.89428,-378.62231 0.14333,64.5"
+       id="path3839"
+       inkscape:connector-type="polyline"
+       inkscape:connection-end="#rect3945-1-06"
+       inkscape:connection-start="#rect3951-9"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="M 512.54814,-426.18272 639.38375,-491.5619"
+       id="path4933"
+       inkscape:connector-type="polyline"
+       sodipodi:nodetypes="cc"
+       inkscape:connection-start="#rect3951-9"
+       inkscape:connection-end="#rect3945-1-0"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 513.84076,-491.62638 128.25037,65.50813"
+       id="path4935"
+       inkscape:connector-type="polyline"
+       sodipodi:nodetypes="cc"
+       inkscape:connection-start="#rect3945-1"
+       inkscape:connection-end="#rect3945-1-7"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 528.34094,-402.62231 98.25,0"
+       id="path4931"
+       inkscape:connector-type="polyline"
+       sodipodi:nodetypes="cc"
+       inkscape:connection-start="#rect3951-9"
+       inkscape:connection-end="#rect3945-1-7"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 529.34094,-515.12231 94.25,0"
+       id="path4937"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect3945-1"
+       inkscape:connection-end="#rect3945-1-0"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       y="-365.31638"
+       x="433.37329"
+       height="23"
+       width="69"
+       id="rect3959-1-1"
+       style="fill:url(#radialGradient6559);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-0"
+       y="-350.64868"
+       x="467.31067"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-350.64868"
+         x="467.31067"
+         id="tspan3963-7-1-0-6"
+         sodipodi:role="line">setCancelled</tspan><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-335.64868"
+         x="467.31067"
+         sodipodi:role="line"
+         id="tspan6359-4" /><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-320.64868"
+         x="467.31067"
+         sodipodi:role="line"
+         id="tspan5828-4" /></text>
+    <rect
+       y="-455.11893"
+       x="515.64032"
+       height="23"
+       width="69"
+       id="rect3959-1-1-1"
+       style="fill:url(#radialGradient6641);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-4"
+       y="-440.64871"
+       x="559.31067"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-440.64871"
+         x="559.31067"
+         id="tspan3963-7-1-0-5"
+         sodipodi:role="line">setSucceeded</tspan><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-425.64871"
+         x="559.31067"
+         sodipodi:role="line"
+         id="tspan6359-8" /><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-410.64871"
+         x="559.31067"
+         sodipodi:role="line"
+         id="tspan5828-5" /></text>
+    <text
+       id="text3961-0-0-9-4-9"
+       y="-387.15942"
+       x="573.31067"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-387.15942"
+         x="573.31067"
+         id="tspan3963-7-1-0-5-6"
+         sodipodi:role="line">setAborted</tspan><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-372.15942"
+         x="573.31067"
+         sodipodi:role="line"
+         id="tspan6359-8-1" /><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-357.15942"
+         x="573.31067"
+         sodipodi:role="line"
+         id="tspan5828-5-8" /></text>
+    <rect
+       y="-490.35297"
+       x="516.69061"
+       height="23"
+       width="69"
+       id="rect3959-1-1-1-6"
+       style="fill:url(#radialGradient6682);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-4-9-5"
+       y="-473.64868"
+       x="559.31067"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-473.64868"
+         x="559.31067"
+         sodipodi:role="line"
+         id="tspan5828-5-8-6">setAborted</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 322.09094,-515.12231 84.25,0"
+       id="path5720"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862"
+       inkscape:connection-end="#rect3945-1"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3953-5-2"
+       y="-285.01929"
+       x="466.81409"
+       style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="-285.01929"
+         x="466.81409"
+         id="tspan3955-6-1"
+         sodipodi:role="line">PREEMPTED</tspan></text>
+    <text
+       id="text3953-5-2-6"
+       y="-510.02612"
+       x="685.03967"
+       style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="-510.02612"
+         x="685.03967"
+         id="tspan3955-6-1-4"
+         sodipodi:role="line">SUCCEEDED</tspan></text>
+    <text
+       id="text3953-5-2-6-3"
+       y="-397.52612"
+       x="688.44641"
+       style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="-397.52612"
+         x="688.44641"
+         id="tspan3955-6-1-4-7"
+         sodipodi:role="line">ABORTED</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 322.09094,-402.62231 83.25,0"
+       id="path6013"
+       inkscape:connector-type="polyline"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"
+       inkscape:connection-end="#rect3951-9"
+       inkscape:connection-start="#rect2862-9" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 203.94203,-419.70811 -73.20217,-22.07841"
+       id="path6233"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862-9"
+       inkscape:connection-end="#rect2862-9-9"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 203.94203,-498.03652 -73.20217,22.07841"
+       id="path6235"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862"
+       inkscape:connection-end="#rect2862-9-9"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:0.99999994;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-9-9-0-6"
+       width="98.958374"
+       height="23.95837"
+       x="619.56421"
+       y="-292.92194"
+       ry="9.9826536"
+       rx="11.721677"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-1-7"
+       y="-278.33929"
+       x="633.19794"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:10px;fill:#000000;fill-opacity:1"
+         y="-278.33929"
+         x="633.19794"
+         id="tspan3963-3-9"
+         sodipodi:role="line">Terminal State</tspan></text>
+    <text
+       id="text3961-0-0-9-1-1-5"
+       y="-412.51886"
+       x="154.31067"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/u/eitan/wiki/actions/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-412.51886"
+         x="154.31067"
+         sodipodi:role="line"
+         id="tspan5828-6-0-4">setRejected</tspan></text>
+    <text
+       xml:space="preserve"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       x="2.8702393"
+       y="-181.68385"
+       id="text7210-9"
+       inkscape:transform-center-x="78.867159"
+       inkscape:transform-center-y="-21.946782"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan7212-6"
+         x="2.8702393"
+         y="-181.68385"
+         style="font-size:20px;fill:#336699;fill-opacity:1">Client State Transitions</tspan></text>
+    <text
+       id="text3947-3"
+       y="-92.026138"
+       x="78.063599"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="-92.026138"
+         x="78.063599"
+         id="tspan3949-09"
+         sodipodi:role="line">WAITING FOR</tspan><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="-74.526138"
+         x="78.063599"
+         sodipodi:role="line"
+         id="tspan3140">GOAL ACK</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2"
+       width="123"
+       height="48"
+       x="16.590942"
+       y="-112.37233"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3947-3-2"
+       y="29.848862"
+       x="202.98157"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="29.848862"
+         x="202.98157"
+         sodipodi:role="line"
+         id="tspan3140-2">PENDING</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2-0"
+       width="123"
+       height="48"
+       x="141.59094"
+       y="0.75267029"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3947-3-0"
+       y="29.848862"
+       x="435.49084"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="29.848862"
+         x="435.49084"
+         sodipodi:role="line"
+         id="tspan3140-3">ACTIVE</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2-8"
+       width="123"
+       height="48"
+       x="373.59094"
+       y="0.75267029"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3947-3-2-0"
+       y="142.97386"
+       x="318.98157"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="142.97386"
+         x="318.98157"
+         sodipodi:role="line"
+         id="tspan3140-2-1">PREEMPTING</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2-0-7"
+       width="123"
+       height="48"
+       x="257.59094"
+       y="113.87767"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3947-3-1"
+       y="134.22386"
+       x="78.063599"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="134.22386"
+         x="78.063599"
+         id="tspan3949-09-9"
+         sodipodi:role="line">WAITING FOR</tspan><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="151.72386"
+         x="78.063599"
+         sodipodi:role="line"
+         id="tspan3140-0">CANCEL ACK</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2-5"
+       width="123"
+       height="48"
+       x="16.590942"
+       y="113.87767"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3947-3-2-0-2"
+       y="263.97388"
+       x="318.98157"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="263.97388"
+         x="318.98157"
+         sodipodi:role="line"
+         id="tspan3140-2-1-2">RECALLING</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2-0-7-0"
+       width="123"
+       height="48"
+       x="257.59094"
+       y="234.87767"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3947-3-0-4"
+       y="255.22386"
+       x="556.0636"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="255.22386"
+         x="556.0636"
+         sodipodi:role="line"
+         id="tspan3140-3-9">WAITING FOR</tspan><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="272.72388"
+         x="556.0636"
+         sodipodi:role="line"
+         id="tspan3307">RESULT</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2-8-1"
+       width="123"
+       height="48"
+       x="494.59094"
+       y="234.87767"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="M 104.61028,-64.37233 176.57161,0.75267029"
+       id="path3309"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862-2"
+       inkscape:connection-end="#rect2862-2-0"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="M 134.132,-70.614221 379.04988,6.9945611"
+       id="path3313"
+       inkscape:connector-type="polyline"
+       inkscape:connection-end="#rect2862-2-8"
+       inkscape:connection-start="#rect2862-2"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 264.59094,24.75267 109,0"
+       id="path3315"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862-2-0"
+       inkscape:connection-end="#rect2862-2-8"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 176.57161,48.75267 -71.96133,65.125"
+       id="path3317"
+       inkscape:connector-type="polyline"
+       inkscape:connection-end="#rect2862-2-5"
+       inkscape:connection-start="#rect2862-2-0"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 139.59094,137.87767 118,0"
+       id="path3319"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862-2-5"
+       inkscape:connection-end="#rect2862-2-0-7"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 124.6285,161.243 147.92489,74.26934"
+       id="path3321"
+       inkscape:connector-type="polyline"
+       inkscape:connection-end="#rect2862-2-0-7-0"
+       inkscape:connection-start="#rect2862-2-5"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 380.59094,258.87767 114,0"
+       id="path3323"
+       inkscape:connector-type="polyline"
+       inkscape:connection-end="#rect2862-2-8-1"
+       inkscape:connection-start="#rect2862-2-0-7-0"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 365.10536,161.37026 144.97116,74.01482"
+       id="path3325"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862-2-0-7"
+       inkscape:connection-end="#rect2862-2-8-1"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 447.49457,48.75267 96.19274,186.125"
+       id="path3327"
+       inkscape:connector-type="polyline"
+       inkscape:connection-end="#rect2862-2-8-1"
+       inkscape:connection-start="#rect2862-2-8"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="M 379.04988,42.510779 134.132,120.11956"
+       id="path3329"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862-2-8"
+       inkscape:connection-end="#rect2862-2-5"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2-8-1-3"
+       width="123"
+       height="48"
+       x="592.59094"
+       y="114.12769"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3947-3-0-4-2"
+       y="143.22388"
+       x="653.85852"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="143.22388"
+         x="653.85852"
+         sodipodi:role="line"
+         id="tspan3307-0">DONE</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 575.56921,234.87767 59.04347,-72.74998"
+       id="path3364"
+       inkscape:connector-type="polyline"
+       inkscape:connection-end="#rect2862-2-8-1-3"
+       inkscape:connection-start="#rect2862-2-8-1"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-9-5"
+       y="-146.6487"
+       x="47.563599"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#ae0000;fill-opacity:1"
+         y="-146.6487"
+         x="47.563599"
+         id="tspan3963-9-0"
+         sodipodi:role="line">Send Goal</tspan></text>
+    <rect
+       y="-48.62233"
+       x="100.59094"
+       height="23"
+       width="69"
+       id="rect3959-8-7"
+       style="fill:url(#radialGradient6502-96);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8"
+       y="-33.811783"
+       x="137.31067"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-33.811783"
+         x="137.31067"
+         sodipodi:role="line"
+         id="tspan3432">[PENDING]</tspan></text>
+    <rect
+       y="-50.62233"
+       x="201.59094"
+       height="23"
+       width="69"
+       id="rect3959-8-44"
+       style="fill:url(#radialGradient6502-2);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-9"
+       y="-36.854752"
+       x="240.09387"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-36.854752"
+         x="240.09387"
+         sodipodi:role="line"
+         id="tspan3432-1">[ACTIVE]</tspan></text>
+    <rect
+       y="125.37767"
+       x="148.59094"
+       height="23"
+       width="95"
+       id="rect3959-8-44-2"
+       style="fill:url(#radialGradient6793-7);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-8"
+       y="141.64525"
+       x="195.09387"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="141.64525"
+         x="195.09387"
+         sodipodi:role="line"
+         id="tspan3432-5">[PREEMPTING]</tspan></text>
+    <rect
+       y="184.37767"
+       x="156.59094"
+       height="23"
+       width="69"
+       id="rect3959-8-09"
+       style="fill:url(#radialGradient6502-3);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-8-3"
+       y="200.14525"
+       x="194.09387"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="200.14525"
+         x="194.09387"
+         sodipodi:role="line"
+         id="tspan3432-5-4">[RECALLING]</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 78.090942,-64.37233 0,178.25"
+       id="path3568"
+       inkscape:connector-type="polyline"
+       sodipodi:nodetypes="cc"
+       inkscape:connection-end="#rect2862-2-5"
+       inkscape:connection-start="#rect2862-2"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       y="155.87767"
+       x="369.59094"
+       height="68"
+       width="111"
+       id="rect3959-8-8-2"
+       style="fill:url(#radialGradient6711);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-2"
+       y="177.14525"
+       x="428.09387"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="177.14525"
+         x="428.09387"
+         sodipodi:role="line"
+         id="tspan3432-6">[PREEMPTED]</tspan><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="192.14525"
+         x="428.09387"
+         sodipodi:role="line"
+         id="tspan6212">[ABORTED[</tspan><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="207.14525"
+         x="428.09387"
+         sodipodi:role="line"
+         id="tspan6214">[SUCCEEDED]</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 319.09094,234.87767 0,-73"
+       id="path3638"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862-2-0-7-0"
+       inkscape:connection-end="#rect2862-2-0-7"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       y="188.37767"
+       x="284.59094"
+       height="23"
+       width="69"
+       id="rect3959-8-6"
+       style="fill:url(#radialGradient6502-98);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-8-9"
+       y="204.14525"
+       x="319.09387"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="204.14525"
+         x="319.09387"
+         sodipodi:role="line"
+         id="tspan3432-5-3">[PREEMPTING]</tspan></text>
+    <rect
+       y="224.87767"
+       x="391.59094"
+       height="68"
+       width="85"
+       id="rect3959-8-8-2-4"
+       style="fill:url(#radialGradient6752);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-8-9-0"
+       y="247.14525"
+       x="432.09387"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="247.14525"
+         x="432.09387"
+         sodipodi:role="line"
+         id="tspan3432-5-3-9">[PREEMPTED]</tspan><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="262.14526"
+         x="432.09387"
+         sodipodi:role="line"
+         id="tspan3708">[RECALLED]</tspan><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="277.14526"
+         x="432.09387"
+         sodipodi:role="line"
+         id="tspan3710">[REJECTED]</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 410.481,48.75267 -66.78011,65.125"
+       id="path3728"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862-2-8"
+       inkscape:connection-end="#rect2862-2-0-7"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       y="71.37767"
+       x="344.59094"
+       height="23"
+       width="69"
+       id="rect3959-8-5"
+       style="fill:url(#radialGradient6502-968);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-8-6"
+       y="85.645248"
+       x="382.09387"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="85.645248"
+         x="382.09387"
+         sodipodi:role="line"
+         id="tspan3432-5-42">[PREEMPTING]</tspan></text>
+    <rect
+       y="82.37767"
+       x="446.59094"
+       height="68"
+       width="69"
+       id="rect3959-8-8"
+       style="fill:url(#radialGradient6502-7);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-8-9-0-4"
+       y="107.23509"
+       x="486.09387"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="107.23509"
+         x="486.09387"
+         sodipodi:role="line"
+         id="tspan3432-5-3-9-2">[PREEMPTED]</tspan><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="122.23509"
+         x="486.09387"
+         sodipodi:role="line"
+         id="tspan3708-4">[ABORTED]</tspan><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="137.23509"
+         x="486.09387"
+         sodipodi:role="line"
+         id="tspan3710-5">[SUCCEEDED]</tspan></text>
+    <rect
+       y="176.37767"
+       x="568.59094"
+       height="45"
+       width="69"
+       id="rect3959-8-44-3"
+       style="fill:url(#radialGradient6793);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-8-9-0-3"
+       y="194.23509"
+       x="605.09387"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="194.23509"
+         x="605.09387"
+         sodipodi:role="line"
+         id="tspan3710-0">Receive</tspan><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="209.23509"
+         x="605.09387"
+         sodipodi:role="line"
+         id="tspan3822">Result Msg</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-8-0)"
+       d="m 78.090942,-139.12233 0,26"
+       id="path4337-0"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       y="-0.62232971"
+       x="47.590942"
+       height="23"
+       width="69"
+       id="rect3959-8-9"
+       style="fill:url(#radialGradient6502);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-9-5-9"
+       y="15.351303"
+       x="42.39563"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#ae0000;fill-opacity:1"
+         y="15.351303"
+         x="42.39563"
+         id="tspan3963-9-0-9"
+         sodipodi:role="line">Cancel Goal</tspan></text>
+    <rect
+       y="64.37767"
+       x="110.59094"
+       height="23"
+       width="69"
+       id="rect3959-8-4"
+       style="fill:url(#radialGradient6502-9);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-9-5-9-6"
+       y="80.351303"
+       x="110.39563"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#ae0000;fill-opacity:1"
+         y="80.351303"
+         x="110.39563"
+         id="tspan3963-9-0-9-0"
+         sodipodi:role="line">Cancel Goal</tspan></text>
+    <rect
+       y="68.37767"
+       x="233.59094"
+       height="23"
+       width="69"
+       id="rect3959-8-0"
+       style="fill:url(#radialGradient6502-4);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-9-5-9-6-6"
+       y="82.351303"
+       x="228.39563"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#ae0000;fill-opacity:1"
+         y="82.351303"
+         x="228.39563"
+         id="tspan3963-9-0-9-0-8"
+         sodipodi:role="line">Cancel Goal</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:0.99999994;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect4321-2"
+       width="130"
+       height="98.597984"
+       x="585.09094"
+       y="-33.421326"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:0.99999994px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-8)"
+       d="m 594.09094,-9.88547 112.00002,0"
+       id="path4072-2"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-1-2"
+       y="-15.411804"
+       x="596.08704"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#ae0000;fill-opacity:1"
+         y="-15.411804"
+         x="596.08704"
+         id="tspan3963-3-63"
+         sodipodi:role="line">Client Triggered</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:0.99999994px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-8)"
+       d="m 594.09094,15.1863 112.00002,0"
+       id="path4072-0-7"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-1-0-7"
+       y="9.6599731"
+       x="595.96985"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#336699;fill-opacity:1"
+         y="9.6599731"
+         x="595.96985"
+         id="tspan3963-3-6-8"
+         sodipodi:role="line">Server Triggered</tspan></text>
+    <rect
+       style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:0.99999994;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-9-9-0-6-5"
+       width="98.958374"
+       height="23.95837"
+       x="597.06421"
+       y="28.779053"
+       ry="9.9826536"
+       rx="11.721677"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-1-7-3"
+       y="43.361694"
+       x="610.69794"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:10px;fill:#000000;fill-opacity:1"
+         y="43.361694"
+         x="610.69794"
+         id="tspan3963-3-9-9"
+         sodipodi:role="line">Terminal State</tspan></text>
+    <rect
+       y="14.37767"
+       x="279.59094"
+       height="23"
+       width="69"
+       id="rect3959-8-44-6"
+       style="fill:url(#radialGradient3317);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-9-7"
+       y="28.145248"
+       x="314.09387"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="28.145248"
+         x="314.09387"
+         sodipodi:role="line"
+         id="tspan3432-1-6">[ACTIVE]</tspan></text>
+    <text
+       id="text3947-3-25"
+       y="-242.14771"
+       x="1305.8624"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="-242.14771"
+         x="1305.8624"
+         id="tspan3949-09-4"
+         sodipodi:role="line">WAITING FOR</tspan><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="-224.64771"
+         x="1305.8624"
+         sodipodi:role="line"
+         id="tspan3140-05">GOAL ACK</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2-9"
+       width="123"
+       height="48"
+       x="1244.3898"
+       y="-262.4939"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3947-3-2-4"
+       y="-120.08524"
+       x="1189.7804"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="-120.08524"
+         x="1189.7804"
+         sodipodi:role="line"
+         id="tspan3140-2-6">PENDING</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2-0-9"
+       width="123"
+       height="48"
+       x="1128.3898"
+       y="-149.18143"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3947-3-0-2"
+       y="-120.08524"
+       x="1422.2897"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="-120.08524"
+         x="1422.2897"
+         sodipodi:role="line"
+         id="tspan3140-3-2">ACTIVE</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2-8-4"
+       width="123"
+       height="48"
+       x="1360.3898"
+       y="-149.18143"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3947-3-2-0-7"
+       y="106.53979"
+       x="1421.7804"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="106.53979"
+         x="1421.7804"
+         sodipodi:role="line"
+         id="tspan3140-2-1-7">PREEMPTING</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2-0-7-5"
+       width="123"
+       height="48"
+       x="1360.3898"
+       y="77.443604"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3947-3-1-4"
+       y="-15.522736"
+       x="1305.8624"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="-15.522736"
+         x="1305.8624"
+         id="tspan3949-09-9-8"
+         sodipodi:role="line">WAITING FOR</tspan><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="1.9772644"
+         x="1305.8624"
+         sodipodi:role="line"
+         id="tspan3140-0-1">CANCEL ACK</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2-5-2"
+       width="123"
+       height="48"
+       x="1244.3898"
+       y="-35.868927"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3947-3-2-0-2-8"
+       y="106.53979"
+       x="1189.7804"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="106.53979"
+         x="1189.7804"
+         sodipodi:role="line"
+         id="tspan3140-2-1-2-9">RECALLING</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2-0-7-0-3"
+       width="123"
+       height="48"
+       x="1128.3898"
+       y="77.443604"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3947-3-0-4-6"
+       y="211.10229"
+       x="1305.8624"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="211.10229"
+         x="1305.8624"
+         sodipodi:role="line"
+         id="tspan3140-3-9-8">WAITING FOR</tspan><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="228.60229"
+         x="1305.8624"
+         sodipodi:role="line"
+         id="tspan3307-02">RESULT</tspan></text>
+    <rect
+       style="fill:none;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2-8-1-1"
+       width="123"
+       height="48"
+       x="1244.3898"
+       y="190.7561"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 1281.3205,-214.4939 -66.8615,65.31247"
+       id="path3309-0"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862-2-9"
+       inkscape:connection-end="#rect2862-2-0-9"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 1330.459,-214.4939 66.8615,65.31247"
+       id="path3313-5"
+       inkscape:connector-type="polyline"
+       inkscape:connection-end="#rect2862-2-8-4"
+       inkscape:connection-start="#rect2862-2-9"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 1251.3898,-125.18143 109,0"
+       id="path3315-1"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862-2-0-9"
+       inkscape:connection-end="#rect2862-2-8-4"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 1214.459,-101.18143 66.8615,65.312503"
+       id="path3317-1"
+       inkscape:connector-type="polyline"
+       inkscape:connection-end="#rect2862-2-5-2"
+       inkscape:connection-start="#rect2862-2-0-9"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 1330.459,12.131073 66.8616,65.312531"
+       id="path3319-0"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862-2-5-2"
+       inkscape:connection-end="#rect2862-2-0-7-5"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="M 1281.3206,12.131073 1214.459,77.443604"
+       id="path3321-8"
+       inkscape:connector-type="polyline"
+       inkscape:connection-end="#rect2862-2-0-7-0-3"
+       inkscape:connection-start="#rect2862-2-5-2"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 1214.459,125.4436 66.8615,65.3125"
+       id="path3323-5"
+       inkscape:connector-type="polyline"
+       inkscape:connection-end="#rect2862-2-8-1-1"
+       inkscape:connection-start="#rect2862-2-0-7-0-3"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"
+       sodipodi:nodetypes="cc" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 1397.3205,125.4436 -66.8615,65.3125"
+       id="path3325-0"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862-2-0-7-5"
+       inkscape:connection-end="#rect2862-2-8-1-1"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 1448.7,-99.18143 c 158.0592,198.71355 75.7596,244.87229 -83.6205,301.93753"
+       id="path3327-6"
+       inkscape:connector-type="polyline"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"
+       inkscape:connection-end="#rect2862-2-8-1-1"
+       inkscape:connection-start="#rect2862-2-8-4"
+       sodipodi:nodetypes="cc" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 1397.3205,-101.18143 -66.8615,65.312503"
+       id="path3329-4"
+       inkscape:connector-type="polyline"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"
+       inkscape:connection-end="#rect2862-2-5-2"
+       inkscape:connection-start="#rect2862-2-8-4" />
+    <rect
+       style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-2-8-1-3-6"
+       width="123"
+       height="48"
+       x="1243.3251"
+       y="298.84293"
+       ry="20"
+       rx="20"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3947-3-0-4-2-2"
+       y="326.18909"
+       x="1304.5927"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:14px;text-align:center;text-anchor:middle"
+         y="326.18909"
+         x="1304.5927"
+         sodipodi:role="line"
+         id="tspan3307-0-5">DONE</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 1305.6534,238.7561 -0.5919,60.08683"
+       id="path3364-8"
+       inkscape:connector-type="polyline"
+       inkscape:connection-end="#rect2862-2-8-1-3-6"
+       inkscape:connection-start="#rect2862-2-8-1-1"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-9-5-6"
+       y="-296.77026"
+       x="1273.3624"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#ae0000;fill-opacity:1"
+         y="-296.77026"
+         x="1273.3624"
+         id="tspan3963-9-0-2"
+         sodipodi:role="line">Send Goal</tspan></text>
+    <rect
+       y="-193.7439"
+       x="1211.3898"
+       height="23"
+       width="69"
+       id="rect3959-8-7-8"
+       style="fill:url(#radialGradient6502-96-6);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-4"
+       y="-178.93335"
+       x="1248.1095"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-178.93335"
+         x="1248.1095"
+         sodipodi:role="line"
+         id="tspan3432-7">[PENDING]</tspan></text>
+    <rect
+       y="-192.7439"
+       x="1330.3898"
+       height="23"
+       width="69"
+       id="rect3959-8-44-24"
+       style="fill:url(#radialGradient6502-2-4);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-9-0"
+       y="-178.97632"
+       x="1368.8927"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-178.97632"
+         x="1368.8927"
+         sodipodi:role="line"
+         id="tspan3432-1-62">[ACTIVE]</tspan></text>
+    <rect
+       y="32.256073"
+       x="1204.3898"
+       height="23"
+       width="69"
+       id="rect3959-8-09-1"
+       style="fill:url(#radialGradient6502-3-8);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-8-3-3"
+       y="48.023651"
+       x="1241.8927"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="48.023651"
+         x="1241.8927"
+         sodipodi:role="line"
+         id="tspan3432-5-4-1">[RECALLING]</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 1242.8898,-237.4939 c -197.6203,11.74161 -232.4249,172.53812 0,226.624973"
+       id="path3568-1"
+       inkscape:connector-type="polyline"
+       sodipodi:nodetypes="cc"
+       inkscape:connection-end="#rect2862-2-5-2"
+       inkscape:connection-start="#rect2862-2-9"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       y="132.41293"
+       x="1196.5515"
+       height="46.686291"
+       width="94.676468"
+       id="rect3959-8-8-2-0"
+       style="fill:url(#radialGradient6711-3);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-2-3"
+       y="139.02365"
+       x="1246.8927"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="139.02365"
+         x="1246.8927"
+         sodipodi:role="line"
+         id="tspan3432-6-4" /><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="154.02365"
+         x="1246.8927"
+         sodipodi:role="line"
+         id="tspan6212-0">[RECALLED]</tspan><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="169.02365"
+         x="1246.8927"
+         sodipodi:role="line"
+         id="tspan6214-3">[REJECTED]</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 1251.3898,101.4436 109,0"
+       id="path3638-9"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862-2-0-7-0-3"
+       inkscape:connection-end="#rect2862-2-0-7-5"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-8-9-9"
+       y="97.023651"
+       x="1300.8927"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="97.023651"
+         x="1300.8927"
+         sodipodi:role="line"
+         id="tspan3432-5-3-6">[PREEMPTING]</tspan></text>
+    <rect
+       y="28.256073"
+       x="1488.3898"
+       height="45"
+       width="85"
+       id="rect3959-8-8-2-4-9"
+       style="fill:url(#radialGradient6752-8);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-8-9-0-33"
+       y="47.023682"
+       x="1530.8927"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="47.023682"
+         x="1530.8927"
+         sodipodi:role="line"
+         id="tspan3432-5-3-9-8">[ABORTED]</tspan><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="62.023682"
+         x="1530.8927"
+         sodipodi:role="line"
+         id="tspan3710-56">[SUCCEEDED]</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3460)"
+       d="m 1421.8898,-101.18143 0,178.625034"
+       id="path3728-6"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862-2-8-4"
+       inkscape:connection-end="#rect2862-2-0-7-5"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       y="-23.743927"
+       x="1395.3898"
+       height="33"
+       width="45"
+       id="rect3959-8-44-2-9"
+       style="fill:url(#radialGradient6793-7-3);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-8-90"
+       y="-3.4763489"
+       x="1427.8927"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-3.4763489"
+         x="1427.8927"
+         sodipodi:role="line"
+         id="tspan3432-5-8">[PREEMPTING]</tspan></text>
+    <rect
+       y="31.256073"
+       x="1331.3898"
+       height="23"
+       width="69"
+       id="rect3959-8-5-4"
+       style="fill:url(#radialGradient6502-968-7);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-8-6-0"
+       y="45.523651"
+       x="1368.8927"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="45.523651"
+         x="1368.8927"
+         sodipodi:role="line"
+         id="tspan3432-5-42-0">[PREEMPTING]</tspan></text>
+    <rect
+       y="128.25607"
+       x="1339.3898"
+       height="62"
+       width="69"
+       id="rect3959-8-8-4"
+       style="fill:url(#radialGradient6502-7-4);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-8-9-0-4-6"
+       y="146.11349"
+       x="1370.8927"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="146.11349"
+         x="1370.8927"
+         sodipodi:role="line"
+         id="tspan3432-5-3-9-2-2">[PREEMPTED]</tspan><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="161.11349"
+         x="1370.8927"
+         sodipodi:role="line"
+         id="tspan3708-4-6">[ABORTED]</tspan><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="176.11349"
+         x="1370.8927"
+         sodipodi:role="line"
+         id="tspan3710-5-7">[SUCCEEDED]</tspan></text>
+    <rect
+       y="243.25607"
+       x="1272.3898"
+       height="45"
+       width="69"
+       id="rect3959-8-44-3-5"
+       style="fill:url(#radialGradient6793-3);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-8-9-0-3-6"
+       y="261.11349"
+       x="1308.8927"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="261.11349"
+         x="1308.8927"
+         sodipodi:role="line"
+         id="tspan3710-0-9">Receive</tspan><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="276.11349"
+         x="1308.8927"
+         sodipodi:role="line"
+         id="tspan3822-8">Result Msg</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-8-0)"
+       d="m 1303.8898,-289.24391 0,26"
+       id="path4337-0-7"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       y="-181.74393"
+       x="1063.3898"
+       height="23"
+       width="69"
+       id="rect3959-8-9-2"
+       style="fill:url(#radialGradient6502-5);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-9-5-9-8"
+       y="-167.77029"
+       x="1056.1945"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#ae0000;fill-opacity:1"
+         y="-167.77029"
+         x="1056.1945"
+         id="tspan3963-9-0-9-2"
+         sodipodi:role="line">Cancel Goal</tspan></text>
+    <rect
+       y="-87.743927"
+       x="1333.3898"
+       height="23"
+       width="69"
+       id="rect3959-8-4-9"
+       style="fill:url(#radialGradient6502-9-8);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-9-5-9-6-9"
+       y="-71.770294"
+       x="1333.1945"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#ae0000;fill-opacity:1"
+         y="-71.770294"
+         x="1333.1945"
+         id="tspan3963-9-0-9-0-6"
+         sodipodi:role="line">Cancel Goal</tspan></text>
+    <rect
+       y="-83.743927"
+       x="1214.3898"
+       height="23"
+       width="69"
+       id="rect3959-8-0-0"
+       style="fill:url(#radialGradient6502-4-5);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-9-5-9-6-6-2"
+       y="-69.770294"
+       x="1215.1945"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#ae0000;fill-opacity:1"
+         y="-69.770294"
+         x="1215.1945"
+         id="tspan3963-9-0-9-0-8-7"
+         sodipodi:role="line">Cancel Goal</tspan></text>
+    <rect
+       y="-137.74393"
+       x="1266.3898"
+       height="23"
+       width="69"
+       id="rect3959-8-44-6-9"
+       style="fill:url(#radialGradient3317-2);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-9-7-1"
+       y="-123.97635"
+       x="1300.8927"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="-123.97635"
+         x="1300.8927"
+         sodipodi:role="line"
+         id="tspan3432-1-6-0">[ACTIVE]</tspan></text>
+    <rect
+       y="-46.62233"
+       x="1177.5909"
+       height="33"
+       width="27"
+       id="rect3959-8-44-2-9-5-0"
+       style="fill:url(#radialGradient5296);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker3445)"
+       d="m 1207.7988,576.9409 0,178.62503"
+       id="path4973"
+       transform="translate(-17.909055,-678.12233)"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862-2-0-9"
+       inkscape:connection-end="#rect2862-2-0-7-0-3"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       y="-9.6223297"
+       x="1167.5909"
+       height="33"
+       width="45"
+       id="rect3959-8-44-2-9-5"
+       style="fill:url(#radialGradient5251);fill-opacity:1;stroke:none"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-8-90-6"
+       y="12.645248"
+       x="1188.0939"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="12.645248"
+         x="1188.0939"
+         sodipodi:role="line"
+         id="tspan3432-5-8-7">[RECALLING]</tspan></text>
+    <rect
+       style="fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.99999994;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect4321-2-6"
+       width="130"
+       height="98.597984"
+       x="1458.8898"
+       y="-307.54291"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:0.99999994px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-8)"
+       d="m 1467.8898,-284.00705 112,0"
+       id="path4072-2-1"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-1-2-3"
+       y="-289.53339"
+       x="1469.8859"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#ae0000;fill-opacity:1"
+         y="-289.53339"
+         x="1469.8859"
+         id="tspan3963-3-63-2"
+         sodipodi:role="line">Client Triggered</tspan></text>
+    <path
+       style="fill:none;stroke:#000000;stroke-width:0.99999994px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-8)"
+       d="m 1467.8898,-258.93528 112,0"
+       id="path4072-0-7-1"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-1-0-7-5"
+       y="-264.46161"
+       x="1469.7687"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;fill:#336699;fill-opacity:1"
+         y="-264.46161"
+         x="1469.7687"
+         id="tspan3963-3-6-8-9"
+         sodipodi:role="line">Server Triggered</tspan></text>
+    <rect
+       style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:0.99999994;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+       id="rect2862-9-9-0-6-5-9"
+       width="98.958374"
+       height="23.95837"
+       x="1470.863"
+       y="-245.34253"
+       ry="9.9826536"
+       rx="11.721677"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-1-7-3-1"
+       y="-230.75989"
+       x="1484.4968"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:10px;fill:#000000;fill-opacity:1"
+         y="-230.75989"
+         x="1484.4968"
+         id="tspan3963-3-9-9-4"
+         sodipodi:role="line">Terminal State</tspan></text>
+    <rect
+       y="-70.62233"
+       x="1125.5909"
+       height="33"
+       width="27"
+       id="rect3959-8-44-2-9-5-0-8"
+       style="fill:url(#radialGradient3746);fill-opacity:1;stroke:none;display:inline"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <path
+       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker5680)"
+       d="m 1187.9557,576.9409 c -73.3534,117.02294 -146.3685,263.90026 72.6215,317.02436"
+       id="path3726"
+       transform="translate(-17.909055,-678.12233)"
+       inkscape:connector-type="polyline"
+       inkscape:connection-start="#rect2862-2-0-9"
+       inkscape:connection-end="#rect2862-2-8-1-3-6"
+       sodipodi:nodetypes="cc"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       y="154.53453"
+       x="1090.7527"
+       height="26.686291"
+       width="94.676468"
+       id="rect3959-8-8-2-0-4"
+       style="fill:url(#radialGradient5212);fill-opacity:1;stroke:none;display:inline"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       id="text3961-0-0-9-1-1-8-2-3-9"
+       y="155.73509"
+       x="1136.0939"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;display:inline;font-family:Bitstream Vera Sans"
+       xml:space="preserve"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="155.73509"
+         x="1136.0939"
+         sodipodi:role="line"
+         id="tspan3432-6-4-7" /><tspan
+         style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+         y="170.73509"
+         x="1136.0939"
+         sodipodi:role="line"
+         id="tspan6214-3-7">[REJECTED]</tspan></text>
+  </g>
+  <g
+     inkscape:groupmode="layer"
+     id="layer2"
+     inkscape:label="Overlay"
+     style="display:none">
+    <rect
+       transform="translate(17.909055,678.12233)"
+       style="fill:#578fc2;fill-opacity:0.51739131;stroke:none;display:inline"
+       id="rect5321"
+       width="547"
+       height="105.27208"
+       x="1053.8549"
+       y="261.21451"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       style="fill:#d2d046;fill-opacity:0.51739131;stroke:none;display:inline"
+       id="rect5321-8"
+       width="253"
+       height="579"
+       x="-1307.3409"
+       y="-317.87231"
+       transform="matrix(-1,0,0,1,17.909055,678.12233)"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       style="fill:#4aaf36;fill-opacity:0.51739131;stroke:none;display:inline"
+       id="rect5321-8-3"
+       width="294.22034"
+       height="460.15399"
+       x="-1601.4363"
+       y="-198.87233"
+       transform="matrix(-1,0,0,1,17.909055,678.12233)"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <rect
+       style="fill:#d2d046;fill-opacity:0.51739131;stroke:none;display:inline"
+       id="rect5321-8-5"
+       width="294"
+       height="119"
+       x="-1601.3864"
+       y="-317.62231"
+       transform="matrix(-1,0,0,1,17.909055,678.12233)"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90" />
+    <text
+       transform="translate(17.909055,678.12233)"
+       xml:space="preserve"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;display:inline;font-family:Bitstream Vera Sans"
+       x="1071.5929"
+       y="-286.66629"
+       id="text7210-9-0-2"
+       inkscape:transform-center-x="78.867159"
+       inkscape:transform-center-y="-21.946782"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan7212-6-9-8"
+         x="1071.5929"
+         y="-286.66629"
+         style="font-size:20px;font-weight:bold;fill:#336699;fill-opacity:1">PENDING</tspan></text>
+    <text
+       transform="translate(17.909055,678.12233)"
+       xml:space="preserve"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;display:inline;font-family:Bitstream Vera Sans"
+       x="1518.5194"
+       y="290.24478"
+       id="text7210-9-0-2-7-0"
+       inkscape:transform-center-x="78.867159"
+       inkscape:transform-center-y="-21.946782"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan7212-6-9-8-6-6"
+         x="1518.5194"
+         y="290.24478"
+         style="font-size:20px;font-weight:bold;fill:#336699;fill-opacity:1">DONE</tspan></text>
+    <text
+       transform="translate(17.909055,678.12233)"
+       xml:space="preserve"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;display:inline;font-family:Bitstream Vera Sans"
+       x="1504.7531"
+       y="-168.84207"
+       id="text7210-9-0-2-7"
+       inkscape:transform-center-x="78.867159"
+       inkscape:transform-center-y="-21.946782"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan7212-6-9-8-6"
+         x="1504.7531"
+         y="-168.84207"
+         style="font-size:20px;font-weight:bold;fill:#336699;fill-opacity:1">ACTIVE</tspan></text>
+  </g>
+  <g
+     inkscape:groupmode="layer"
+     id="layer3"
+     inkscape:label="Simple Title"
+     style="display:none">
+    <text
+       transform="translate(17.909055,678.12233)"
+       xml:space="preserve"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;display:inline;font-family:Bitstream Vera Sans"
+       x="1028.6692"
+       y="-331.80542"
+       id="text7210-9-0"
+       inkscape:transform-center-x="78.867159"
+       inkscape:transform-center-y="-21.946782"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/simple_client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan7212-6-9"
+         x="1028.6692"
+         y="-331.80542"
+         style="font-size:20px;fill:#336699;fill-opacity:1">Simple Client State Transitions</tspan></text>
+  </g>
+  <g
+     inkscape:groupmode="layer"
+     id="layer4"
+     inkscape:label="Title"
+     style="display:inline">
+    <text
+       xml:space="preserve"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;display:inline;font-family:Bitstream Vera Sans"
+       x="1046.5782"
+       y="346.31693"
+       id="text7210-9-0-8"
+       inkscape:transform-center-x="78.867159"
+       inkscape:transform-center-y="-21.946782"
+       inkscape:export-filename="/home/vpradeep/work/wg/home/ros_overlays/lowlevel/common/actionlib/docs/client_state_transitions.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan7212-6-9-9"
+         x="1046.5782"
+         y="346.31693"
+         style="font-size:20px;fill:#336699;fill-opacity:1">Client State Transitions</tspan></text>
+  </g>
+</svg>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/docs/simple_goal_reception.svg
@@ -0,0 +1,2713 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:xlink="http://www.w3.org/1999/xlink"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="837.63727"
+   height="403.33795"
+   id="svg3664"
+   version="1.1"
+   inkscape:version="0.47pre4 r22446"
+   sodipodi:docname="simple_goal_reception.svg"
+   inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_reception.png"
+   inkscape:export-xdpi="90"
+   inkscape:export-ydpi="90">
+  <defs
+     id="defs3666">
+    <marker
+       inkscape:stockid="Arrow1Lstart"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lstart"
+       style="overflow:visible">
+      <path
+         id="path8348"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(0.8,0,0,0.8,10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend"
+       style="overflow:visible">
+      <path
+         id="path4816"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       sodipodi:type="inkscape:persp3d"
+       inkscape:vp_x="0 : 526.18109 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_z="744.09448 : 526.18109 : 1"
+       inkscape:persp3d-origin="372.04724 : 350.78739 : 1"
+       id="perspective3672" />
+    <inkscape:perspective
+       id="perspective4459"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective4484"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective4510"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective4535"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective4560"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective4588"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective4616"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective4641"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective4666"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective4691"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective4773"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5266"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5297"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5297-0"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5403"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-1"
+       style="overflow:visible">
+      <path
+         id="path4816-2"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective5458"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5489"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5511"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective6539"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-8"
+       style="overflow:visible">
+      <path
+         id="path3179-0"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker6545"
+       style="overflow:visible">
+      <path
+         id="path6547"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective2919"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-9"
+       style="overflow:visible">
+      <path
+         id="path4816-6"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective2947"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective2999"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective5892"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.1311475,0,0,0.39212228,42.57456,-119.65355)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6502-968"
+       xlink:href="#linearGradient3935-6-16"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-16">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65" />
+      <stop
+         id="stop3943-87-97"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.4121779,0,0,0.39212228,-289.93089,-84.026174)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient5902"
+       xlink:href="#linearGradient3935-6-16"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6735"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.4121779,0,0,0.39212228,-289.93089,-84.026174)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient5902-5"
+       xlink:href="#linearGradient3935-6-16-8"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-16-8">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-7" />
+      <stop
+         id="stop3943-87-97-1"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-7" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.5292739,0,0,0.39212228,-94.766955,-86.026177)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient6745"
+       xlink:href="#linearGradient3935-6-16-8"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective6776"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective6819"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective6841"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective6907"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective6947"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.4121779,0,0,0.39212228,-289.93089,-84.026174)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient5902-8"
+       xlink:href="#linearGradient3935-6-16-1"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-16-1">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-6" />
+      <stop
+         id="stop3943-87-97-4"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-1" />
+    </linearGradient>
+    <inkscape:perspective
+       id="perspective7050"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7078"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-6"
+       style="overflow:visible">
+      <path
+         id="path4816-67"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective7113"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-2"
+       style="overflow:visible">
+      <path
+         id="path4816-22"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective7153"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.4121779,0,0,0.39212228,-289.93089,-84.026174)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient5902-2"
+       xlink:href="#linearGradient3935-6-16-4"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-16-4">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-5" />
+      <stop
+         id="stop3943-87-97-41"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-6" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.4121779,0,0,0.39212228,-264.50231,253.4024)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient7163"
+       xlink:href="#linearGradient3935-6-16-4"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective7153-0"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.4121779,0,0,0.39212228,-289.93089,-84.026174)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient5902-52"
+       xlink:href="#linearGradient3935-6-16-5"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-16-5">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-1" />
+      <stop
+         id="stop3943-87-97-5"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-11" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.4121779,0,0,0.39212228,-260.93088,401.97382)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient7163-5"
+       xlink:href="#linearGradient3935-6-16-5"
+       inkscape:collect="always" />
+    <inkscape:perspective
+       id="perspective7215"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <linearGradient
+       id="linearGradient3935-6-16-5-7">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-1-8" />
+      <stop
+         id="stop3943-87-97-5-0"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-11-5" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-28"
+       style="overflow:visible">
+      <path
+         id="path4816-5"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <linearGradient
+       id="linearGradient3935-6-16-4-2">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-5-5" />
+      <stop
+         id="stop3943-87-97-41-7"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-6-9" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker7231"
+       style="overflow:visible">
+      <path
+         id="path7233"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective7374"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7415"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7451"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7476"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7504"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <linearGradient
+       id="linearGradient3935-6-16-5-8">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-1-9" />
+      <stop
+         id="stop3943-87-97-5-9"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-11-9" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-98"
+       style="overflow:visible">
+      <path
+         id="path4816-63"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <linearGradient
+       id="linearGradient3935-6-16-4-8">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-5-6" />
+      <stop
+         id="stop3943-87-97-41-6"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-6-8" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker7520"
+       style="overflow:visible">
+      <path
+         id="path7522"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective7679"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7701"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7723"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7754"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7833"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7867"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7889"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.4121779,0,0,0.58696565,-371.35944,-119.37708)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient7163-8-1"
+       xlink:href="#linearGradient3935-6-16-4-8-8"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-16-4-8-8">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-5-6-8" />
+      <stop
+         id="stop3943-87-97-41-6-0"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-6-8-1" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-0"
+       style="overflow:visible">
+      <path
+         id="path4816-4"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective7951"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7990"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <linearGradient
+       id="linearGradient3935-6-16-4-8-8-3">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-5-6-8-7" />
+      <stop
+         id="stop3943-87-97-41-6-0-5"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-6-8-1-6" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-86"
+       style="overflow:visible">
+      <path
+         id="path4816-633"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective8114"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective8148"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-5"
+       style="overflow:visible">
+      <path
+         id="path4816-56"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <linearGradient
+       id="linearGradient3935-6-16-5-87">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-1-1" />
+      <stop
+         id="stop3943-87-97-5-92"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-11-56" />
+    </linearGradient>
+    <inkscape:perspective
+       id="perspective8220"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective8245"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective8270"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective8270-7"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective8301"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective8326"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective9253"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.4121779,0,0,0.39212228,-279.50231,782.6881)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient7163-5-6-2"
+       xlink:href="#linearGradient3935-6-16-5-87-0"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-16-5-87-0">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-1-1-1" />
+      <stop
+         id="stop3943-87-97-5-92-1"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-11-56-6" />
+    </linearGradient>
+    <inkscape:perspective
+       id="perspective9294"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective9325"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.4121779,0,0,0.39212228,-279.50231,782.6881)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient7163-5-6-1"
+       xlink:href="#linearGradient3935-6-16-5-87-9"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-16-5-87-9">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-1-1-8" />
+      <stop
+         id="stop3943-87-97-5-92-4"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-11-56-9" />
+    </linearGradient>
+    <inkscape:perspective
+       id="perspective9580"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective10039"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <linearGradient
+       id="linearGradient3935-6-16-5-87-9-3">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-1-1-8-9" />
+      <stop
+         id="stop3943-87-97-5-92-4-7"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-11-56-9-7" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-5-0"
+       style="overflow:visible">
+      <path
+         id="path4816-56-0"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <linearGradient
+       id="linearGradient3935-6-16-5-87-8">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-1-1-15" />
+      <stop
+         id="stop3943-87-97-5-92-3"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-11-56-7" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-50"
+       style="overflow:visible">
+      <path
+         id="path4816-62"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective10305"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective10333"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective10361"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective10389"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective11525"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-50-3"
+       style="overflow:visible">
+      <path
+         id="path4816-62-7"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker11531"
+       style="overflow:visible">
+      <path
+         id="path11533"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-5-7"
+       style="overflow:visible">
+      <path
+         id="path4816-56-8"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <linearGradient
+       id="linearGradient3935-6-16-5-87-9-6">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-1-1-8-6" />
+      <stop
+         id="stop3943-87-97-5-92-4-9"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-11-56-9-3" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker11542"
+       style="overflow:visible">
+      <path
+         id="path11544"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <linearGradient
+       id="linearGradient3935-6-16-4-8-8-31">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-5-6-8-76" />
+      <stop
+         id="stop3943-87-97-41-6-0-52"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-6-8-1-5" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-3"
+       style="overflow:visible">
+      <path
+         id="path4816-1"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective11752"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective11777"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-5-4"
+       style="overflow:visible">
+      <path
+         id="path4816-56-1"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective7238"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-50-39"
+       style="overflow:visible">
+      <path
+         id="path4816-62-4"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective7238-6"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-50-9"
+       style="overflow:visible">
+      <path
+         id="path4816-62-9"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective7238-4"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-50-5"
+       style="overflow:visible">
+      <path
+         id="path4816-62-2"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective7292"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7314"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7339"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7361"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7383"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7405"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <inkscape:perspective
+       id="perspective7430"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-50-4"
+       style="overflow:visible">
+      <path
+         id="path4816-62-3"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker7436"
+       style="overflow:visible">
+      <path
+         id="path7438"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker7440"
+       style="overflow:visible">
+      <path
+         id="path7442"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-5-5"
+       style="overflow:visible">
+      <path
+         id="path4816-56-84"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker7446"
+       style="overflow:visible">
+      <path
+         id="path7448"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker7450"
+       style="overflow:visible">
+      <path
+         id="path7452"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="marker7454"
+       style="overflow:visible">
+      <path
+         id="path7456"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <linearGradient
+       id="linearGradient3935-6-16-4-8-8-6">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-5-6-8-77" />
+      <stop
+         id="stop3943-87-97-41-6-0-1"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-6-8-1-55" />
+    </linearGradient>
+    <marker
+       inkscape:stockid="Arrow1Lend"
+       orient="auto"
+       refY="0"
+       refX="0"
+       id="Arrow1Lend-64"
+       style="overflow:visible">
+      <path
+         id="path4816-11"
+         d="M 0,0 5,-5 -12.5,0 5,5 0,0 z"
+         style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;marker-start:none"
+         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
+    </marker>
+    <inkscape:perspective
+       id="perspective7783"
+       inkscape:persp3d-origin="0.5 : 0.33333333 : 1"
+       inkscape:vp_z="1 : 0.5 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_x="0 : 0.5 : 1"
+       sodipodi:type="inkscape:persp3d" />
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.4121779,0,0,0.58696565,-371.35944,-119.37708)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient7163-8-1-3"
+       xlink:href="#linearGradient3935-6-16-4-8-8-8"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient3935-6-16-4-8-8-8">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop3937-9-65-5-6-8-2" />
+      <stop
+         id="stop3943-87-97-41-6-0-13"
+         offset="0.75"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop3939-2-673-6-8-1-53" />
+    </linearGradient>
+    <radialGradient
+       r="31.5"
+       fy="516.5"
+       fx="297.5"
+       cy="516.5"
+       cx="297.5"
+       gradientTransform="matrix(1.7985947,0,0,0.59914336,-400.46131,580.63276)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient7796"
+       xlink:href="#linearGradient3935-6-16-4-8-8-8"
+       inkscape:collect="always" />
+  </defs>
+  <sodipodi:namedview
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1.0"
+     inkscape:pageopacity="0.0"
+     inkscape:pageshadow="2"
+     inkscape:zoom="1.4"
+     inkscape:cx="430.60989"
+     inkscape:cy="-343.71233"
+     inkscape:document-units="px"
+     inkscape:current-layer="g5528"
+     showgrid="false"
+     inkscape:window-width="1691"
+     inkscape:window-height="1326"
+     inkscape:window-x="816"
+     inkscape:window-y="193"
+     inkscape:window-maximized="0" />
+  <metadata
+     id="metadata3669">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+        <dc:title></dc:title>
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <g
+     inkscape:label="Layer 1"
+     inkscape:groupmode="layer"
+     id="layer1"
+     transform="translate(-2.2142674,-5.6810379)">
+    <text
+       xml:space="preserve"
+       style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+       x="3.7952533"
+       y="20.87635"
+       id="text7210"
+       inkscape:transform-center-x="78.867159"
+       inkscape:transform-center-y="-21.946782"
+       inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+       inkscape:export-xdpi="90"
+       inkscape:export-ydpi="90"><tspan
+         sodipodi:role="line"
+         id="tspan7212"
+         x="3.7952533"
+         y="20.87635"
+         style="font-size:20px;fill:#336699;fill-opacity:1"
+         rotate="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0">Simple Action Server - Goal Reception</tspan></text>
+    <g
+       id="g5528"
+       transform="translate(-3.4777606,0)">
+      <path
+         id="rect3676-3-6-6"
+         d="m 94.443047,84.012124 0,84.985826 228.069423,0 0,-84.985826 -228.069423,0 z"
+         style="fill:#cdcdcd;fill-opacity:1;stroke:#000000;stroke-width:0.36229473;stroke-opacity:1" />
+      <rect
+         style="fill:none;stroke:#000000;stroke-width:1.0760181;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+         id="rect4321"
+         width="136.34639"
+         height="61.379108"
+         x="706.44489"
+         y="28.977543"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <path
+         id="rect3676-3-6"
+         d="m 97.300187,236.848 0,69.27154 228.069423,0 0,-69.27154 -228.069423,0 z"
+         style="fill:#cdcdcd;fill-opacity:1;stroke:#000000;stroke-width:0.36229473;stroke-opacity:1" />
+      <rect
+         style="fill:#b3b1e9;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:8.00000019, 1.00000003;stroke-dashoffset:0"
+         id="rect9570"
+         width="100.71428"
+         height="31.428583"
+         x="101.47776"
+         y="250.67303"
+         rx="6.5394874"
+         ry="13.497082" />
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="151.30074"
+         y="270.24963"
+         id="text3953-4-98-1"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-5-5"
+           x="151.30074"
+           y="270.24963"
+           style="font-size:14px;text-align:center;text-anchor:middle">Pending Goal</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+         xml:space="preserve"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="168.33784"
+         y="154.98029"
+         id="text3961-0-0-9-1-1-8-8-6-6-6-0"><tspan
+           id="tspan3432-5-42-51-0-4"
+           sodipodi:role="line"
+           x="168.33784"
+           y="154.98029"
+           style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1">[PENDING]</tspan></text>
+      <rect
+         style="fill:#b3b1e9;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:8.00000019, 1.00000003;stroke-dashoffset:0"
+         id="rect9570-8"
+         width="100.71428"
+         height="30.714298"
+         x="221.90712"
+         y="251.03018"
+         rx="6.5394874"
+         ry="13.497082" />
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="272.52402"
+         y="271.60657"
+         id="text3953-4-7-7-7"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-0-5-9"
+           x="272.52402"
+           y="271.60657"
+           style="font-size:14px;text-align:center;text-anchor:middle">Current Goal</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+         xml:space="preserve"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="272.26718"
+         y="154.98029"
+         id="text3961-0-0-9-1-1-8-8-6-7-86-9"><tspan
+           id="tspan3432-5-42-5-6-1"
+           sodipodi:role="line"
+           x="272.26718"
+           y="154.98029"
+           style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1">[ACTIVE]</tspan></text>
+      <rect
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:0.93948925;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+         id="rect3945-1-06-3-7-92-8"
+         width="40.217854"
+         height="32.392994"
+         x="252.15533"
+         y="108.66571"
+         ry="13.497081"
+         rx="6.5394878" />
+      <text
+         id="text4498-0-5-40-9"
+         y="131.42325"
+         x="266.11191"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"><tspan
+           y="131.42325"
+           x="266.11191"
+           id="tspan4500-0-22-1-6"
+           sodipodi:role="line">A</tspan></text>
+      <rect
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:0.93948925;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+         id="rect3945-1-06-8-2-3"
+         width="40.217854"
+         height="32.392994"
+         x="97.654572"
+         y="108.66571"
+         ry="13.497081"
+         rx="6.5394878" />
+      <text
+         id="text4498-9-1-4"
+         y="131.41446"
+         x="111.46171"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"><tspan
+           y="131.41446"
+           x="111.46171"
+           id="tspan4500-01-1-3"
+           sodipodi:role="line">C</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         xml:space="preserve"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#ae0000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="80.806709"
+         y="57.017849"
+         id="text3961-9-8-8-6"><tspan
+           sodipodi:role="line"
+           id="tspan3963-9-5-3-7"
+           x="80.806709"
+           y="57.017849"
+           style="font-size:12px;fill:#ae0000;fill-opacity:1">Receive Goal C</tspan></text>
+      <path
+         id="path4808-3-8-7"
+         d="m 90.332266,126.21933 c -60.03293,7.51629 -54.454239,138.20136 7.589443,142.85716"
+         style="fill:none;stroke:#000000;stroke-width:0.99999994;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3.99999976, 7.99999952;stroke-dashoffset:0;marker-end:url(#Arrow1Lend)"
+         sodipodi:nodetypes="cc" />
+      <rect
+         y="166.57651"
+         x="5.692028"
+         height="34.42857"
+         width="86.142853"
+         id="rect3959-8-5-8-4-6"
+         style="fill:url(#radialGradient7163-8-1);fill-opacity:1;stroke:none"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <text
+         id="text3961-1-0-8-5-9-9"
+         y="178.60135"
+         x="49.877033"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90"><tspan
+           style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+           y="178.60135"
+           x="49.877033"
+           sodipodi:role="line"
+           id="tspan3016-6-3-6">Push C into</tspan><tspan
+           style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+           y="193.60135"
+           x="49.877033"
+           sodipodi:role="line"
+           id="tspan3020-4-7-3">Pending Goal</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="274.01501"
+         y="81.938751"
+         id="text3953-4-98-1-4"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-5-5-1"
+           x="274.01501"
+           y="81.938751"
+           style="font-size:14px;text-align:center;text-anchor:middle">Action Server</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="172.87221"
+         y="319.79593"
+         id="text3953-4-98-1-4-8-3-6"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-5-5-1-9-3-9"
+           x="172.87221"
+           y="319.79593"
+           style="font-size:14px;text-align:center;text-anchor:middle">Simple Action Server</tspan></text>
+      <path
+         id="rect3676-3-6-9"
+         d="m 220.01526,356.70521 0,44.2715 104.49799,0 0,-44.2715 -104.49799,0 z"
+         style="fill:#cdcdcd;fill-opacity:1;stroke:#000000;stroke-width:0.36229476;stroke-opacity:1" />
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="272.02841"
+         y="385.08163"
+         id="text3953-4-98-1-4-8-3-6-5"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-5-5-1-9-3-9-3"
+           x="272.02841"
+           y="385.08163"
+           style="font-size:14px;text-align:center;text-anchor:middle">User Code</tspan></text>
+      <path
+         style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-start:none;marker-mid:none;marker-end:url(#Arrow1Lend-5)"
+         d="m 272.26426,352.7908 0,-62.14287"
+         id="path8343" />
+      <path
+         style="fill:none;stroke:#000000;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:4, 4;stroke-dashoffset:0;marker-end:url(#Arrow1Lend-5)"
+         d="m 120.76347,65.076494 0,35.714276"
+         id="path9596" />
+      <rect
+         ry="10.258395"
+         rx="5.8400917"
+         y="28.851467"
+         x="7.7175951"
+         height="379.75558"
+         width="344.77667"
+         id="rect5479-0-1"
+         style="fill:none;stroke:#000000;stroke-width:0.82386822;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3.29547289, 3.29547289;stroke-dashoffset:0" />
+      <text
+         id="text5475-3-5"
+         y="50.194057"
+         x="289.46695"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"><tspan
+           style="font-size:18px"
+           y="50.194057"
+           x="289.46695"
+           id="tspan5477-7-3"
+           sodipodi:role="line">step 1</tspan></text>
+      <rect
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:0.93948925;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+         id="rect3945-1-06-3-9-4-2-76"
+         width="40.217854"
+         height="32.392994"
+         x="147.08311"
+         y="108.66571"
+         ry="13.497081"
+         rx="6.5394878" />
+      <text
+         id="text4498-0-7-7-9-8"
+         y="131.42325"
+         x="160.77167"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"><tspan
+           y="131.42325"
+           x="160.77167"
+           id="tspan4500-0-9-8-9-4"
+           sodipodi:role="line">B</tspan></text>
+      <path
+         style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-50)"
+         d="m 165.90633,243.36218 1.22284,-82.25204"
+         id="path10409"
+         sodipodi:nodetypes="cc" />
+      <path
+         id="rect3676-3-6-6-7"
+         d="m 403.44306,84.012124 0,84.985826 248.06942,0 0,-84.985826 -248.06942,0 z"
+         style="fill:#cdcdcd;fill-opacity:1;stroke:#000000;stroke-width:0.36229473;stroke-opacity:1" />
+      <path
+         id="rect3676-3-6-0"
+         d="m 426.30019,236.848 0,69.27154 228.06942,0 0,-69.27154 -228.06942,0 z"
+         style="fill:#cdcdcd;fill-opacity:1;stroke:#000000;stroke-width:0.36229473;stroke-opacity:1" />
+      <rect
+         style="fill:#b3b1e9;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:8.00000019, 1.00000003;stroke-dashoffset:0"
+         id="rect9570-1"
+         width="100.71428"
+         height="31.428583"
+         x="430.47775"
+         y="250.67303"
+         rx="6.5394874"
+         ry="13.497082" />
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="480.30072"
+         y="270.24963"
+         id="text3953-4-98-1-2"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-5-5-4"
+           x="480.30072"
+           y="270.24963"
+           style="font-size:14px;text-align:center;text-anchor:middle">Pending Goal</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+         xml:space="preserve"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="533.33783"
+         y="154.98029"
+         id="text3961-0-0-9-1-1-8-8-6-6-6-0-6"><tspan
+           id="tspan3432-5-42-51-0-4-8"
+           sodipodi:role="line"
+           x="533.33783"
+           y="154.98029"
+           style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1">[RECALLED]</tspan></text>
+      <rect
+         style="fill:#b3b1e9;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:8.00000019, 1.00000003;stroke-dashoffset:0"
+         id="rect9570-8-3"
+         width="100.71428"
+         height="30.714298"
+         x="550.4071"
+         y="251.03018"
+         rx="6.5394874"
+         ry="13.497082" />
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="601.02399"
+         y="271.60657"
+         id="text3953-4-7-7-7-3"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-0-5-9-0"
+           x="601.02399"
+           y="271.60657"
+           style="font-size:14px;text-align:center;text-anchor:middle">Current Goal</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+         xml:space="preserve"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="600.76715"
+         y="154.98029"
+         id="text3961-0-0-9-1-1-8-8-6-7-86-9-2"><tspan
+           id="tspan3432-5-42-5-6-1-6"
+           sodipodi:role="line"
+           x="600.76715"
+           y="154.98029"
+           style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1">[ACTIVE]</tspan></text>
+      <rect
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:0.93948925;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+         id="rect3945-1-06-3-7-92-8-3"
+         width="40.217854"
+         height="32.392994"
+         x="580.65533"
+         y="108.66571"
+         ry="13.497081"
+         rx="6.5394878" />
+      <text
+         id="text4498-0-5-40-9-1"
+         y="131.42325"
+         x="594.61188"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"><tspan
+           y="131.42325"
+           x="594.61188"
+           id="tspan4500-0-22-1-6-3"
+           sodipodi:role="line">A</tspan></text>
+      <rect
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:0.93948925;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+         id="rect3945-1-06-8-2-3-1"
+         width="40.217854"
+         height="32.392994"
+         x="428.65457"
+         y="108.66571"
+         ry="13.497081"
+         rx="6.5394878" />
+      <text
+         id="text4498-9-1-4-4"
+         y="131.41446"
+         x="442.4617"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"><tspan
+           y="131.41446"
+           x="442.4617"
+           id="tspan4500-01-1-3-2"
+           sodipodi:role="line">C</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="603.01501"
+         y="79.938751"
+         id="text3953-4-98-1-4-6"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-5-5-1-3"
+           x="603.01501"
+           y="79.938751"
+           style="font-size:14px;text-align:center;text-anchor:middle">Action Server</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="501.87219"
+         y="319.79593"
+         id="text3953-4-98-1-4-8-3-6-3"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-5-5-1-9-3-9-1"
+           x="501.87219"
+           y="319.79593"
+           style="font-size:14px;text-align:center;text-anchor:middle">Simple Action Server</tspan></text>
+      <rect
+         ry="10.25953"
+         rx="5.2600446"
+         y="28.830498"
+         x="370.98233"
+         height="379.08322"
+         width="310.5329"
+         id="rect5479-0-1-1"
+         style="fill:none;stroke:#000000;stroke-width:0.78192776;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3.12771117, 3.12771117;stroke-dashoffset:0" />
+      <text
+         id="text5475-3-5-3"
+         y="50.194057"
+         x="618.46692"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"><tspan
+           style="font-size:18px"
+           y="50.194057"
+           x="618.46692"
+           id="tspan5477-7-3-5"
+           sodipodi:role="line">step 2</tspan></text>
+      <rect
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:0.93948925;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+         id="rect3945-1-06-3-9-4-2-76-6"
+         width="40.217854"
+         height="32.392994"
+         x="512.08313"
+         y="108.66571"
+         ry="13.497081"
+         rx="6.5394878" />
+      <text
+         id="text4498-0-7-7-9-8-6"
+         y="131.42325"
+         x="525.77167"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"><tspan
+           y="131.42325"
+           x="525.77167"
+           id="tspan4500-0-9-8-9-4-1"
+           sodipodi:role="line">B</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/client_states_detailed.png"
+         xml:space="preserve"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="449.33783"
+         y="154.98029"
+         id="text3961-0-0-9-1-1-8-8-6-6-6-0-6-4"><tspan
+           id="tspan3432-5-42-51-0-4-8-9"
+           sodipodi:role="line"
+           x="449.33783"
+           y="154.98029"
+           style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1">[PENDING]</tspan></text>
+      <path
+         id="rect3676-3-6-9-1"
+         d="m 548.51524,356.70521 0,44.2715 104.49799,0 0,-44.2715 -104.49799,0 z"
+         style="fill:#cdcdcd;fill-opacity:1;stroke:#000000;stroke-width:0.36229476;stroke-opacity:1" />
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="600.52838"
+         y="385.08163"
+         id="text3953-4-98-1-4-8-3-6-5-4"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-5-5-1-9-3-9-3-5"
+           x="600.52838"
+           y="385.08163"
+           style="font-size:14px;text-align:center;text-anchor:middle">User Code</tspan></text>
+      <path
+         style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-start:none;marker-mid:none;marker-end:url(#Arrow1Lend-5)"
+         d="m 600.76424,352.7908 0,-62.14287"
+         id="path8343-6" />
+      <path
+         style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-50)"
+         d="m 271.24953,243.36218 1.22284,-82.25204"
+         id="path10409-9"
+         sodipodi:nodetypes="cc" />
+      <path
+         style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-50)"
+         d="m 449.90633,243.36218 1.22284,-82.25204"
+         id="path10409-5"
+         sodipodi:nodetypes="cc" />
+      <path
+         style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-50)"
+         d="m 599.74951,243.36218 1.22284,-82.25204"
+         id="path10409-0"
+         sodipodi:nodetypes="cc" />
+      <text
+         id="text3961-1-7-5"
+         y="50.210068"
+         x="738.4389"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90"><tspan
+           style="font-size:10px;fill:#000000;fill-opacity:1"
+           y="50.210068"
+           x="738.4389"
+           id="tspan3963-3-9-6"
+           sodipodi:role="line">Goal Object</tspan></text>
+      <rect
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:0.93948931;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+         id="rect3945-1-06-8-2-3-1-3"
+         width="20.771046"
+         height="16.643425"
+         x="711.02051"
+         y="39.129566"
+         ry="13.497081"
+         rx="6.5394878" />
+      <rect
+         style="fill:#b3b1e9;fill-opacity:1;stroke:#000000;stroke-width:0.99999988;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:8.00000009, 1.00000002;stroke-dashoffset:0"
+         id="rect9570-1-3"
+         width="19.792318"
+         height="15.163901"
+         x="711.50989"
+         y="65.223419"
+         rx="6.5394874"
+         ry="13.497082" />
+      <text
+         id="text3961-1-7-5-0"
+         y="75.564156"
+         x="738.4389"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"
+         inkscape:export-filename="/wg/arc/vpradeep/ros-64/pkgs-trunk/common/actionlib/docs/server_states_detailed.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90"><tspan
+           style="font-size:10px;fill:#000000;fill-opacity:1"
+           y="75.564156"
+           x="738.4389"
+           id="tspan3963-3-9-6-0"
+           sodipodi:role="line">Goal Object Pointer</tspan></text>
+      <text
+         xml:space="preserve"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="7.2730136"
+         y="529.44775"
+         id="text7210-1"
+         inkscape:transform-center-x="78.867159"
+         inkscape:transform-center-y="-21.946782"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90"><tspan
+           sodipodi:role="line"
+           id="tspan7212-5"
+           x="7.2730136"
+           y="529.44775"
+           style="font-size:20px;fill:#336699;fill-opacity:1"
+           rotate="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0">Simple Action Server - Goal Acceptance</tspan></text>
+      <path
+         id="rect3676-3-6-6-5"
+         d="m 94.443047,592.58356 0,84.98582 228.069423,0 0,-84.98582 -228.069423,0 z"
+         style="fill:#cdcdcd;fill-opacity:1;stroke:#000000;stroke-width:0.36229473;stroke-opacity:1"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <rect
+         style="fill:none;stroke:#000000;stroke-width:1.0760181;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+         id="rect4321-9"
+         width="136.34639"
+         height="61.379108"
+         x="706.44489"
+         y="537.54895"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <path
+         id="rect3676-3-6-8"
+         d="m 97.300187,745.41943 0,69.27154 228.069423,0 0,-69.27154 -228.069423,0 z"
+         style="fill:#cdcdcd;fill-opacity:1;stroke:#000000;stroke-width:0.36229473;stroke-opacity:1"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <rect
+         style="fill:#b3b1e9;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:8.00000019, 1.00000003;stroke-dashoffset:0"
+         id="rect9570-7"
+         width="100.71428"
+         height="31.428583"
+         x="101.47776"
+         y="759.24445"
+         rx="6.5394874"
+         ry="13.497082"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="151.30074"
+         y="778.82104"
+         id="text3953-4-98-1-8"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-5-5-48"
+           x="151.30074"
+           y="778.82104"
+           style="font-size:14px;text-align:center;text-anchor:middle">Pending Goal</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         xml:space="preserve"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="168.33784"
+         y="663.5517"
+         id="text3961-0-0-9-1-1-8-8-6-6-6-0-2"><tspan
+           id="tspan3432-5-42-51-0-4-87"
+           sodipodi:role="line"
+           x="168.33784"
+           y="663.5517"
+           style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1">[PENDING]</tspan></text>
+      <rect
+         style="fill:#b3b1e9;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:8.00000019, 1.00000003;stroke-dashoffset:0"
+         id="rect9570-8-1"
+         width="100.71428"
+         height="30.714298"
+         x="221.90712"
+         y="759.60156"
+         rx="6.5394874"
+         ry="13.497082"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="272.52402"
+         y="780.17798"
+         id="text3953-4-7-7-7-1"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-0-5-9-2"
+           x="272.52402"
+           y="780.17798"
+           style="font-size:14px;text-align:center;text-anchor:middle">Current Goal</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         xml:space="preserve"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="272.26718"
+         y="663.5517"
+         id="text3961-0-0-9-1-1-8-8-6-7-86-9-6"><tspan
+           id="tspan3432-5-42-5-6-1-69"
+           sodipodi:role="line"
+           x="272.26718"
+           y="663.5517"
+           style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1">[ACTIVE]</tspan></text>
+      <rect
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:0.93948925;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+         id="rect3945-1-06-3-7-92-8-6"
+         width="40.217854"
+         height="32.392994"
+         x="252.15533"
+         y="617.23712"
+         ry="13.497081"
+         rx="6.5394878" />
+      <text
+         id="text4498-0-5-40-9-0"
+         y="639.99463"
+         x="266.11191"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90"><tspan
+           y="639.99463"
+           x="266.11191"
+           id="tspan4500-0-22-1-6-5"
+           sodipodi:role="line">A</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="274.01501"
+         y="590.51019"
+         id="text3953-4-98-1-4-2"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-5-5-1-9"
+           x="274.01501"
+           y="590.51019"
+           style="font-size:14px;text-align:center;text-anchor:middle">Action Server</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="172.87221"
+         y="828.36731"
+         id="text3953-4-98-1-4-8-3-6-31"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-5-5-1-9-3-9-7"
+           x="172.87221"
+           y="828.36731"
+           style="font-size:14px;text-align:center;text-anchor:middle">Simple Action Server</tspan></text>
+      <path
+         id="rect3676-3-6-9-0"
+         d="m 220.01526,865.27664 0,44.2715 104.49799,0 0,-44.2715 -104.49799,0 z"
+         style="fill:#cdcdcd;fill-opacity:1;stroke:#000000;stroke-width:0.36229476;stroke-opacity:1"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="272.02841"
+         y="893.65302"
+         id="text3953-4-98-1-4-8-3-6-5-9"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-5-5-1-9-3-9-3-3"
+           x="272.02841"
+           y="893.65302"
+           style="font-size:14px;text-align:center;text-anchor:middle">User Code</tspan></text>
+      <path
+         style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-start:none;marker-mid:none;marker-end:url(#Arrow1Lend-5)"
+         d="m 272.26426,861.36223 0,-62.14287"
+         id="path8343-0"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <path
+         style="fill:none;stroke:#000000;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:4, 4;stroke-dashoffset:0;marker-end:url(#Arrow1Lend-5)"
+         d="M 216.47776,893.64793 C -29.839522,899.21845 10.454068,790.15021 91.477757,781.50506"
+         id="path9596-2"
+         sodipodi:nodetypes="cc"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <rect
+         ry="10.258395"
+         rx="5.8400917"
+         y="537.42291"
+         x="7.7175951"
+         height="379.75558"
+         width="344.77667"
+         id="rect5479-0-1-4"
+         style="fill:none;stroke:#000000;stroke-width:0.82386822;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3.29547289, 3.29547289;stroke-dashoffset:0"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <text
+         id="text5475-3-5-8"
+         y="558.7655"
+         x="289.46695"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90"><tspan
+           style="font-size:18px"
+           y="558.7655"
+           x="289.46695"
+           id="tspan5477-7-3-57"
+           sodipodi:role="line">step 1</tspan></text>
+      <rect
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:0.93948925;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+         id="rect3945-1-06-3-9-4-2-76-2"
+         width="40.217854"
+         height="32.392994"
+         x="147.08311"
+         y="617.23712"
+         ry="13.497081"
+         rx="6.5394878" />
+      <text
+         id="text4498-0-7-7-9-8-1"
+         y="639.99463"
+         x="160.77167"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90"><tspan
+           y="639.99463"
+           x="160.77167"
+           id="tspan4500-0-9-8-9-4-4"
+           sodipodi:role="line">B</tspan></text>
+      <path
+         style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-50)"
+         d="m 165.90633,751.93361 1.22284,-82.25204"
+         id="path10409-1"
+         sodipodi:nodetypes="cc"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <path
+         id="rect3676-3-6-6-7-7"
+         d="m 514.87163,592.58356 0,84.98582 159.49798,0 0,-84.98582 -159.49798,0 z"
+         style="fill:#cdcdcd;fill-opacity:1;stroke:#000000;stroke-width:0.36229473;stroke-opacity:1"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <path
+         id="rect3676-3-6-0-6"
+         d="m 426.30019,745.41943 0,69.27154 228.06942,0 0,-69.27154 -228.06942,0 z"
+         style="fill:#cdcdcd;fill-opacity:1;stroke:#000000;stroke-width:0.36229473;stroke-opacity:1"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <rect
+         style="fill:#b3b1e9;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:8.00000019, 1.00000003;stroke-dashoffset:0"
+         id="rect9570-1-8"
+         width="100.71428"
+         height="31.428583"
+         x="430.47775"
+         y="759.24445"
+         rx="6.5394874"
+         ry="13.497082"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="480.30072"
+         y="778.82104"
+         id="text3953-4-98-1-2-2"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-5-5-4-6"
+           x="480.30072"
+           y="778.82104"
+           style="font-size:14px;text-align:center;text-anchor:middle">Pending Goal</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         xml:space="preserve"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="583.33783"
+         y="663.5517"
+         id="text3961-0-0-9-1-1-8-8-6-6-6-0-6-3"><tspan
+           id="tspan3432-5-42-51-0-4-8-0"
+           sodipodi:role="line"
+           x="583.33783"
+           y="663.5517"
+           style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1">[ACTIVE</tspan></text>
+      <rect
+         style="fill:#b3b1e9;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:8.00000019, 1.00000003;stroke-dashoffset:0"
+         id="rect9570-8-3-4"
+         width="100.71428"
+         height="30.714298"
+         x="550.4071"
+         y="759.60156"
+         rx="6.5394874"
+         ry="13.497082"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="601.02399"
+         y="780.17798"
+         id="text3953-4-7-7-7-3-4"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-0-5-9-0-4"
+           x="601.02399"
+           y="780.17798"
+           style="font-size:14px;text-align:center;text-anchor:middle">Current Goal</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         xml:space="preserve"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="644.76715"
+         y="663.5517"
+         id="text3961-0-0-9-1-1-8-8-6-7-86-9-2-3"><tspan
+           id="tspan3432-5-42-5-6-1-6-6"
+           sodipodi:role="line"
+           x="644.76715"
+           y="663.5517"
+           style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1">[DONE]</tspan></text>
+      <rect
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:0.93948925;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+         id="rect3945-1-06-3-7-92-8-3-2"
+         width="40.217854"
+         height="32.392994"
+         x="624.65533"
+         y="617.23712"
+         ry="13.497081"
+         rx="6.5394878" />
+      <text
+         id="text4498-0-5-40-9-1-6"
+         y="639.99463"
+         x="638.61188"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90"><tspan
+           y="639.99463"
+           x="638.61188"
+           id="tspan4500-0-22-1-6-3-7"
+           sodipodi:role="line">A</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="627.01501"
+         y="588.51019"
+         id="text3953-4-98-1-4-6-0"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-5-5-1-3-9"
+           x="627.01501"
+           y="588.51019"
+           style="font-size:14px;text-align:center;text-anchor:middle">Action Server</tspan></text>
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="501.87219"
+         y="828.36731"
+         id="text3953-4-98-1-4-8-3-6-3-0"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-5-5-1-9-3-9-1-3"
+           x="501.87219"
+           y="828.36731"
+           style="font-size:14px;text-align:center;text-anchor:middle">Simple Action Server</tspan></text>
+      <rect
+         ry="10.25953"
+         rx="5.2600446"
+         y="537.40192"
+         x="370.98233"
+         height="379.08322"
+         width="310.5329"
+         id="rect5479-0-1-1-3"
+         style="fill:none;stroke:#000000;stroke-width:0.78192776;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3.12771117, 3.12771117;stroke-dashoffset:0"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <text
+         id="text5475-3-5-3-4"
+         y="558.7655"
+         x="618.46692"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90"><tspan
+           style="font-size:18px"
+           y="558.7655"
+           x="618.46692"
+           id="tspan5477-7-3-5-1"
+           sodipodi:role="line">step 2</tspan></text>
+      <rect
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:0.93948925;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+         id="rect3945-1-06-3-9-4-2-76-6-8"
+         width="40.217854"
+         height="32.392994"
+         x="563.35486"
+         y="617.23712"
+         ry="13.497081"
+         rx="6.5394878" />
+      <text
+         id="text4498-0-7-7-9-8-6-2"
+         y="639.99463"
+         x="577.0434"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90"><tspan
+           y="639.99463"
+           x="577.0434"
+           id="tspan4500-0-9-8-9-4-1-5"
+           sodipodi:role="line">B</tspan></text>
+      <path
+         id="rect3676-3-6-9-1-6"
+         d="m 548.51524,865.27664 0,44.2715 104.49799,0 0,-44.2715 -104.49799,0 z"
+         style="fill:#cdcdcd;fill-opacity:1;stroke:#000000;stroke-width:0.36229476;stroke-opacity:1"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <text
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         xml:space="preserve"
+         style="font-size:18px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         x="600.52838"
+         y="893.65302"
+         id="text3953-4-98-1-4-8-3-6-5-4-1"><tspan
+           sodipodi:role="line"
+           id="tspan3955-8-5-5-1-9-3-9-3-5-6"
+           x="600.52838"
+           y="893.65302"
+           style="font-size:14px;text-align:center;text-anchor:middle">User Code</tspan></text>
+      <path
+         style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-start:none;marker-mid:none;marker-end:url(#Arrow1Lend-5)"
+         d="m 583.46381,861.36223 0,-62.14287"
+         id="path8343-6-4"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <path
+         style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-50)"
+         d="m 271.24953,751.93361 1.22284,-82.25204"
+         id="path10409-9-5"
+         sodipodi:nodetypes="cc"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <path
+         style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Lend-50)"
+         d="m 582.44908,751.93361 1.22284,-82.25204"
+         id="path10409-0-8"
+         sodipodi:nodetypes="cc"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <text
+         id="text3961-1-7-5-5"
+         y="558.78149"
+         x="738.4389"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90"><tspan
+           style="font-size:10px;fill:#000000;fill-opacity:1"
+           y="558.78149"
+           x="738.4389"
+           id="tspan3963-3-9-6-9"
+           sodipodi:role="line">Goal Object</tspan></text>
+      <rect
+         inkscape:export-ydpi="90"
+         inkscape:export-xdpi="90"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         style="fill:#d4e7fa;fill-opacity:1;stroke:#000000;stroke-width:0.93948931;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
+         id="rect3945-1-06-8-2-3-1-3-2"
+         width="20.771046"
+         height="16.643425"
+         x="711.02051"
+         y="547.70099"
+         ry="13.497081"
+         rx="6.5394878" />
+      <rect
+         style="fill:#b3b1e9;fill-opacity:1;stroke:#000000;stroke-width:0.99999988;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:8.00000009, 1.00000002;stroke-dashoffset:0"
+         id="rect9570-1-3-2"
+         width="19.792318"
+         height="15.163901"
+         x="711.50989"
+         y="573.79486"
+         rx="6.5394874"
+         ry="13.497082"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <text
+         id="text3961-1-7-5-0-4"
+         y="584.13556"
+         x="738.4389"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90"><tspan
+           style="font-size:10px;fill:#000000;fill-opacity:1"
+           y="584.13556"
+           x="738.4389"
+           id="tspan3963-3-9-6-0-0"
+           sodipodi:role="line">Goal Object Pointer</tspan></text>
+      <rect
+         y="872.51898"
+         x="79.763458"
+         height="35.142857"
+         width="109.71429"
+         id="rect3959-8-5-8-4-6-3"
+         style="fill:url(#radialGradient7796);fill-opacity:1;stroke:none"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90" />
+      <text
+         id="text3961-1-0-8-5-9-9-3"
+         y="893.25812"
+         x="137.23418"
+         style="font-size:40px;font-style:normal;font-weight:normal;fill:#336699;fill-opacity:1;stroke:none;font-family:Bitstream Vera Sans"
+         xml:space="preserve"
+         inkscape:export-filename="/home/eitan/code/ros/trunks/common/actionlib/docs/simple_goal_accept.png"
+         inkscape:export-xdpi="90"
+         inkscape:export-ydpi="90"><tspan
+           style="font-size:12px;text-align:center;text-anchor:middle;fill:#336699;fill-opacity:1"
+           y="893.25812"
+           x="137.23418"
+           sodipodi:role="line"
+           id="tspan3020-4-7-3-5">Accept Goal B</tspan></text>
+    </g>
+  </g>
+</svg>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/action_definition.h
@@ -0,0 +1,65 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+#ifndef ACTIONLIB__ACTION_DEFINITION_H_
+#define ACTIONLIB__ACTION_DEFINITION_H_
+// A macro that will generate helpful typedefs for action client, server, and policy implementers
+namespace actionlib
+{
+#define ACTION_DEFINITION(ActionSpec) \
+  typedef typename ActionSpec::_action_goal_type ActionGoal; \
+  typedef typename ActionGoal::_goal_type Goal; \
+  typedef typename ActionSpec::_action_result_type ActionResult; \
+  typedef typename ActionResult::_result_type Result; \
+  typedef typename ActionSpec::_action_feedback_type ActionFeedback; \
+  typedef typename ActionFeedback::_feedback_type Feedback; \
+ \
+  typedef boost::shared_ptr<const ActionGoal> ActionGoalConstPtr; \
+  typedef boost::shared_ptr<ActionGoal> ActionGoalPtr; \
+  typedef boost::shared_ptr<const Goal> GoalConstPtr; \
+  typedef boost::shared_ptr<Goal> GoalPtr; \
+ \
+  typedef boost::shared_ptr<const ActionResult> ActionResultConstPtr; \
+  typedef boost::shared_ptr<ActionResult> ActionResultPtr; \
+  typedef boost::shared_ptr<const Result> ResultConstPtr; \
+  typedef boost::shared_ptr<Result> ResultPtr; \
+ \
+  typedef boost::shared_ptr<const ActionFeedback> ActionFeedbackConstPtr; \
+  typedef boost::shared_ptr<ActionFeedback> ActionFeedbackPtr; \
+  typedef boost::shared_ptr<const Feedback> FeedbackConstPtr; \
+  typedef boost::shared_ptr<Feedback> FeedbackPtr;
+}  // namespace actionlib
+#endif  // ACTIONLIB__ACTION_DEFINITION_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/client/action_client.h
@@ -0,0 +1,308 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+#ifndef ACTIONLIB__CLIENT__ACTION_CLIENT_H_
+#define ACTIONLIB__CLIENT__ACTION_CLIENT_H_
+
+#include <actionlib/client/client_helpers.h>
+#include <actionlib/client/connection_monitor.h>
+#include <actionlib/destruction_guard.h>
+
+#include <boost/thread/condition.hpp>
+#include <string>
+
+#include "ros/ros.h"
+#include "ros/callback_queue_interface.h"
+
+namespace actionlib
+{
+
+/**
+ * \brief Full interface to an ActionServer
+ *
+ * ActionClient provides a complete client side implementation of the ActionInterface protocol.
+ * It provides callbacks for every client side transition, giving the user full observation into
+ * the client side state machine.
+ */
+template<class ActionSpec>
+class ActionClient
+{
+public:
+  typedef ClientGoalHandle<ActionSpec> GoalHandle;
+
+private:
+  ACTION_DEFINITION(ActionSpec)
+  typedef ActionClient<ActionSpec> ActionClientT;
+  typedef boost::function<void (GoalHandle)> TransitionCallback;
+  typedef boost::function<void (GoalHandle, const FeedbackConstPtr &)> FeedbackCallback;
+  typedef boost::function<void (const ActionGoalConstPtr)> SendGoalFunc;
+
+public:
+  /**
+   * \brief Simple constructor
+   *
+   * Constructs an ActionClient and sets up the necessary ros topics for the ActionInterface
+   * \param name The action name. Defines the namespace in which the action communicates
+   * \param queue CallbackQueue from which this action will process messages.
+   *              The default (nullptr) is to use the global queue
+   */
+  ActionClient(const std::string & name, ros::CallbackQueueInterface * queue = nullptr)
+  : n_(name), guard_(new DestructionGuard()),
+    manager_(guard_)
+  {
+    initClient(queue);
+  }
+
+  /**
+   * \brief Constructor with namespacing options
+   *
+   * Constructs an ActionClient and sets up the necessary ros topics for the ActionInterface,
+   * and namespaces them according the a specified NodeHandle
+   * \param n The node handle on top of which we want to namespace our action
+   * \param name The action name. Defines the namespace in which the action communicates
+   * \param queue CallbackQueue from which this action will process messages.
+   *              The default (nullptr) is to use the global queue
+   */
+  ActionClient(const ros::NodeHandle & n, const std::string & name,
+    ros::CallbackQueueInterface * queue = nullptr)
+  : n_(n, name), guard_(new DestructionGuard()),
+    manager_(guard_)
+  {
+    initClient(queue);
+  }
+
+  ~ActionClient()
+  {
+    ROS_DEBUG_NAMED("actionlib", "ActionClient: Waiting for destruction guard to clean up");
+    guard_->destruct();
+    ROS_DEBUG_NAMED("actionlib", "ActionClient: destruction guard destruct() done");
+  }
+
+
+  /**
+   * \brief Sends a goal to the ActionServer, and also registers callbacks
+   * \param transition_cb Callback that gets called on every client state transition
+   * \param feedback_cb Callback that gets called whenever feedback for this goal is received
+   */
+  GoalHandle sendGoal(const Goal & goal,
+    TransitionCallback transition_cb = TransitionCallback(),
+    FeedbackCallback feedback_cb = FeedbackCallback())
+  {
+    ROS_DEBUG_NAMED("actionlib", "about to start initGoal()");
+    GoalHandle gh = manager_.initGoal(goal, transition_cb, feedback_cb);
+    ROS_DEBUG_NAMED("actionlib", "Done with initGoal()");
+
+    return gh;
+  }
+
+  /**
+   * \brief Cancel all goals currently running on the action server
+   *
+   * This preempts all goals running on the action server at the point that
+   * this message is serviced by the ActionServer.
+   */
+  void cancelAllGoals()
+  {
+    actionlib_msgs::GoalID cancel_msg;
+    // CancelAll policy encoded by stamp=0, id=0
+    cancel_msg.stamp = ros::Time(0, 0);
+    cancel_msg.id = "";
+    cancel_pub_.publish(cancel_msg);
+  }
+
+  /**
+   * \brief Cancel all goals that were stamped at and before the specified time
+   * \param time All goals stamped at or before `time` will be canceled
+   */
+  void cancelGoalsAtAndBeforeTime(const ros::Time & time)
+  {
+    actionlib_msgs::GoalID cancel_msg;
+    cancel_msg.stamp = time;
+    cancel_msg.id = "";
+    cancel_pub_.publish(cancel_msg);
+  }
+
+  /**
+   * \brief Waits for the ActionServer to connect to this client
+   * Often, it can take a second for the action server & client to negotiate
+   * a connection, thus, risking the first few goals to be dropped. This call lets
+   * the user wait until the network connection to the server is negotiated
+   * NOTE: Using this call in a single threaded ROS application, or any
+   * application where the action client's callback queue is not being
+   * serviced, will not work. Without a separate thread servicing the queue, or
+   * a multi-threaded spinner, there is no way for the client to tell whether
+   * or not the server is up because it can't receive a status message.
+   * \param timeout Max time to block before returning. A zero timeout is interpreted as an infinite timeout.
+   * \return True if the server connected in the allocated time. False on timeout
+   */
+  bool waitForActionServerToStart(const ros::Duration & timeout = ros::Duration(0, 0) )
+  {
+    // if ros::Time::isSimTime(), then wait for it to become valid
+    if (!ros::Time::waitForValid(ros::WallDuration(timeout.sec, timeout.nsec))) {
+      return false;
+    }
+
+    if (connection_monitor_) {
+      return connection_monitor_->waitForActionServerToStart(timeout, n_);
+    } else {
+      return false;
+    }
+  }
+
+  /**
+   * @brief  Checks if the action client is successfully connected to the action server
+   * @return True if the server is connected, false otherwise
+   */
+  bool isServerConnected()
+  {
+    return connection_monitor_->isServerConnected();
+  }
+
+private:
+  ros::NodeHandle n_;
+
+  boost::shared_ptr<DestructionGuard> guard_;
+  GoalManager<ActionSpec> manager_;
+
+  ros::Subscriber result_sub_;
+  ros::Subscriber feedback_sub_;
+
+  boost::shared_ptr<ConnectionMonitor> connection_monitor_;   // Have to destroy subscribers and publishers before the connection_monitor_, since we call callbacks in the connection_monitor_
+
+  ros::Publisher goal_pub_;
+  ros::Publisher cancel_pub_;
+  ros::Subscriber status_sub_;
+
+  void sendGoalFunc(const ActionGoalConstPtr & action_goal)
+  {
+    goal_pub_.publish(action_goal);
+  }
+
+  void sendCancelFunc(const actionlib_msgs::GoalID & cancel_msg)
+  {
+    cancel_pub_.publish(cancel_msg);
+  }
+
+  void initClient(ros::CallbackQueueInterface * queue)
+  {
+    ros::Time::waitForValid();
+    // read parameters indicating publish/subscribe queue sizes
+    int pub_queue_size;
+    int sub_queue_size;
+    n_.param("actionlib_client_pub_queue_size", pub_queue_size, 10);
+    n_.param("actionlib_client_sub_queue_size", sub_queue_size, -1);
+    if (pub_queue_size < 0) {pub_queue_size = 10;}
+    if (sub_queue_size < 0) {sub_queue_size = 0;}
+
+    status_sub_ = queue_subscribe("status", static_cast<uint32_t>(sub_queue_size),
+        &ActionClientT::statusCb, this, queue);
+    feedback_sub_ = queue_subscribe("feedback", static_cast<uint32_t>(sub_queue_size),
+        &ActionClientT::feedbackCb, this, queue);
+    result_sub_ = queue_subscribe("result", static_cast<uint32_t>(sub_queue_size),
+        &ActionClientT::resultCb, this, queue);
+
+    connection_monitor_.reset(new ConnectionMonitor(feedback_sub_, result_sub_));
+
+    // Start publishers and subscribers
+    goal_pub_ = queue_advertise<ActionGoal>("goal", static_cast<uint32_t>(pub_queue_size),
+        boost::bind(&ConnectionMonitor::goalConnectCallback, connection_monitor_, _1),
+        boost::bind(&ConnectionMonitor::goalDisconnectCallback, connection_monitor_, _1),
+        queue);
+    cancel_pub_ =
+      queue_advertise<actionlib_msgs::GoalID>("cancel", static_cast<uint32_t>(pub_queue_size),
+        boost::bind(&ConnectionMonitor::cancelConnectCallback, connection_monitor_, _1),
+        boost::bind(&ConnectionMonitor::cancelDisconnectCallback, connection_monitor_, _1),
+        queue);
+
+    manager_.registerSendGoalFunc(boost::bind(&ActionClientT::sendGoalFunc, this, _1));
+    manager_.registerCancelFunc(boost::bind(&ActionClientT::sendCancelFunc, this, _1));
+  }
+
+  template<class M>
+  ros::Publisher queue_advertise(const std::string & topic, uint32_t queue_size,
+    const ros::SubscriberStatusCallback & connect_cb,
+    const ros::SubscriberStatusCallback & disconnect_cb,
+    ros::CallbackQueueInterface * queue)
+  {
+    ros::AdvertiseOptions ops;
+    ops.init<M>(topic, queue_size, connect_cb, disconnect_cb);
+    ops.tracked_object = ros::VoidPtr();
+    ops.latch = false;
+    ops.callback_queue = queue;
+    return n_.advertise(ops);
+  }
+
+  template<class M, class T>
+  ros::Subscriber queue_subscribe(const std::string & topic, uint32_t queue_size, void (T::* fp)(
+      const ros::MessageEvent<M const> &), T * obj, ros::CallbackQueueInterface * queue)
+  {
+    ros::SubscribeOptions ops;
+    ops.callback_queue = queue;
+    ops.topic = topic;
+    ops.queue_size = queue_size;
+    ops.md5sum = ros::message_traits::md5sum<M>();
+    ops.datatype = ros::message_traits::datatype<M>();
+    ops.helper = ros::SubscriptionCallbackHelperPtr(
+      new ros::SubscriptionCallbackHelperT<const ros::MessageEvent<M const> &>(
+        boost::bind(fp, obj, _1)
+      )
+      );
+    return n_.subscribe(ops);
+  }
+
+  void statusCb(const ros::MessageEvent<actionlib_msgs::GoalStatusArray const> & status_array_event)
+  {
+    ROS_DEBUG_NAMED("actionlib", "Getting status over the wire.");
+    if (connection_monitor_) {
+      connection_monitor_->processStatus(
+        status_array_event.getConstMessage(), status_array_event.getPublisherName());
+    }
+    manager_.updateStatuses(status_array_event.getConstMessage());
+  }
+
+  void feedbackCb(const ros::MessageEvent<ActionFeedback const> & action_feedback)
+  {
+    manager_.updateFeedbacks(action_feedback.getConstMessage());
+  }
+
+  void resultCb(const ros::MessageEvent<ActionResult const> & action_result)
+  {
+    manager_.updateResults(action_result.getConstMessage());
+  }
+};
+
+
+}  // namespace actionlib
+
+#endif  // ACTIONLIB__CLIENT__ACTION_CLIENT_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/client/client_goal_handle_imp.h
@@ -0,0 +1,329 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+/* This file has the template implementation for ClientGoalHandle. It should be included with the
+ * class definition.
+ */
+#ifndef ACTIONLIB__CLIENT__CLIENT_GOAL_HANDLE_IMP_H_
+#define ACTIONLIB__CLIENT__CLIENT_GOAL_HANDLE_IMP_H_
+
+#include <ros/ros.h>
+
+namespace actionlib
+{
+
+template<class ActionSpec>
+ClientGoalHandle<ActionSpec>::ClientGoalHandle()
+{
+  gm_ = nullptr;
+  active_ = false;
+}
+
+template<class ActionSpec>
+ClientGoalHandle<ActionSpec>::~ClientGoalHandle()
+{
+  reset();
+}
+
+template<class ActionSpec>
+ClientGoalHandle<ActionSpec>::ClientGoalHandle(GoalManagerT * gm,
+  typename ManagedListT::Handle handle,
+  const boost::shared_ptr<DestructionGuard> & guard)
+{
+  gm_ = gm;
+  active_ = true;
+  list_handle_ = handle;
+  guard_ = guard;
+}
+
+template<class ActionSpec>
+void ClientGoalHandle<ActionSpec>::reset()
+{
+  if (active_) {
+    DestructionGuard::ScopedProtector protector(*guard_);
+    if (!protector.isProtected()) {
+      ROS_ERROR_NAMED("actionlib",
+        "This action client associated with the goal handle has already been destructed. Ignoring this reset() call");
+      return;
+    }
+
+    boost::recursive_mutex::scoped_lock lock(gm_->list_mutex_);
+    list_handle_.reset();
+    active_ = false;
+    gm_ = nullptr;
+  }
+}
+
+template<class ActionSpec>
+bool ClientGoalHandle<ActionSpec>::isExpired() const
+{
+  return !active_;
+}
+
+
+template<class ActionSpec>
+CommState ClientGoalHandle<ActionSpec>::getCommState() const
+{
+  assert(gm_);
+  if (!gm_) {
+    ROS_ERROR_NAMED("actionlib", "Client should have valid GoalManager");
+    return CommState(CommState::DONE);
+  }
+
+  boost::recursive_mutex::scoped_lock lock(gm_->list_mutex_);
+  if (!active_) {
+    ROS_ERROR_NAMED("actionlib",
+      "Trying to getCommState on an inactive ClientGoalHandle. You are incorrectly using a ClientGoalHandle");
+    return CommState(CommState::DONE);
+  }
+
+  DestructionGuard::ScopedProtector protector(*guard_);
+  if (!protector.isProtected()) {
+    ROS_ERROR_NAMED("actionlib",
+      "This action client associated with the goal handle has already been destructed. Ignoring this getCommState() call");
+    return CommState(CommState::DONE);
+  }
+
+  return list_handle_.getElem()->getCommState();
+}
+
+template<class ActionSpec>
+TerminalState ClientGoalHandle<ActionSpec>::getTerminalState() const
+{
+  if (!active_) {
+    ROS_ERROR_NAMED("actionlib",
+      "Trying to getTerminalState on an inactive ClientGoalHandle. You are incorrectly using a ClientGoalHandle");
+    return TerminalState(TerminalState::LOST);
+  }
+
+  DestructionGuard::ScopedProtector protector(*guard_);
+  if (!protector.isProtected()) {
+    ROS_ERROR_NAMED("actionlib",
+      "This action client associated with the goal handle has already been destructed. Ignoring this getTerminalState() call");
+    return TerminalState(TerminalState::LOST);
+  }
+
+  assert(gm_);
+  if (!gm_)
+  {
+    ROS_ERROR_NAMED("actionlib", "Client should have valid GoalManager");
+    return TerminalState(TerminalState::LOST);
+  }
+
+  boost::recursive_mutex::scoped_lock lock(gm_->list_mutex_);
+  CommState comm_state_ = list_handle_.getElem()->getCommState();
+  if (comm_state_ != CommState::DONE) {
+    ROS_WARN_NAMED("actionlib", "Asking for the terminal state when we're in [%s]",
+      comm_state_.toString().c_str());
+  }
+
+  actionlib_msgs::GoalStatus goal_status = list_handle_.getElem()->getGoalStatus();
+
+  switch (goal_status.status) {
+    case actionlib_msgs::GoalStatus::PENDING:
+    case actionlib_msgs::GoalStatus::ACTIVE:
+    case actionlib_msgs::GoalStatus::PREEMPTING:
+    case actionlib_msgs::GoalStatus::RECALLING:
+      ROS_ERROR_NAMED("actionlib", "Asking for terminal state, but latest goal status is %u",
+        goal_status.status); return TerminalState(TerminalState::LOST,
+               goal_status.text);
+    case actionlib_msgs::GoalStatus::PREEMPTED: return TerminalState(TerminalState::PREEMPTED,
+               goal_status.text);
+    case actionlib_msgs::GoalStatus::SUCCEEDED: return TerminalState(TerminalState::SUCCEEDED,
+               goal_status.text);
+    case actionlib_msgs::GoalStatus::ABORTED:   return TerminalState(TerminalState::ABORTED,
+               goal_status.text);
+    case actionlib_msgs::GoalStatus::REJECTED:  return TerminalState(TerminalState::REJECTED,
+               goal_status.text);
+    case actionlib_msgs::GoalStatus::RECALLED:  return TerminalState(TerminalState::RECALLED,
+               goal_status.text);
+    case actionlib_msgs::GoalStatus::LOST:      return TerminalState(TerminalState::LOST,
+               goal_status.text);
+    default:
+      ROS_ERROR_NAMED("actionlib", "Unknown goal status: %u", goal_status.status); break;
+  }
+
+  ROS_ERROR_NAMED("actionlib", "Bug in determining terminal state");
+  return TerminalState(TerminalState::LOST, goal_status.text);
+}
+
+template<class ActionSpec>
+typename ClientGoalHandle<ActionSpec>::ResultConstPtr ClientGoalHandle<ActionSpec>::getResult()
+const
+{
+  if (!active_) {
+    ROS_ERROR_NAMED("actionlib",
+      "Trying to getResult on an inactive ClientGoalHandle. You are incorrectly using a ClientGoalHandle");
+  }
+  assert(gm_);
+  if (!gm_) {
+    ROS_ERROR_NAMED("actionlib", "Client should have valid GoalManager");
+    return typename ClientGoalHandle<ActionSpec>::ResultConstPtr() ;
+  }
+
+  DestructionGuard::ScopedProtector protector(*guard_);
+  if (!protector.isProtected()) {
+    ROS_ERROR_NAMED("actionlib",
+      "This action client associated with the goal handle has already been destructed. Ignoring this getResult() call");
+    return typename ClientGoalHandle<ActionSpec>::ResultConstPtr();
+  }
+
+  boost::recursive_mutex::scoped_lock lock(gm_->list_mutex_);
+  return list_handle_.getElem()->getResult();
+}
+
+template<class ActionSpec>
+void ClientGoalHandle<ActionSpec>::resend()
+{
+  if (!active_) {
+    ROS_ERROR_NAMED("actionlib",
+      "Trying to resend() on an inactive ClientGoalHandle. You are incorrectly using a ClientGoalHandle");
+  }
+
+  DestructionGuard::ScopedProtector protector(*guard_);
+  if (!protector.isProtected()) {
+    ROS_ERROR_NAMED("actionlib",
+      "This action client associated with the goal handle has already been destructed. Ignoring this resend() call");
+    return;
+  }
+
+  assert(gm_);
+  if (!gm_)
+  {
+    ROS_ERROR_NAMED("actionlib", "Client should have valid GoalManager");
+    return;
+  }
+
+  boost::recursive_mutex::scoped_lock lock(gm_->list_mutex_);
+
+  ActionGoalConstPtr action_goal = list_handle_.getElem()->getActionGoal();
+
+  if (!action_goal) {
+    ROS_ERROR_NAMED("actionlib", "BUG: Got a nullptr action_goal");
+  }
+
+  if (gm_->send_goal_func_) {
+    gm_->send_goal_func_(action_goal);
+  }
+}
+
+template<class ActionSpec>
+void ClientGoalHandle<ActionSpec>::cancel()
+{
+  if (!active_) {
+    ROS_ERROR_NAMED("actionlib",
+      "Trying to cancel() on an inactive ClientGoalHandle. You are incorrectly using a ClientGoalHandle");
+    return;
+  }
+
+  assert(gm_);
+  if (!gm_)
+  {
+    ROS_ERROR_NAMED("actionlib", "Client should have valid GoalManager");
+    return;
+  }
+
+  DestructionGuard::ScopedProtector protector(*guard_);
+  if (!protector.isProtected()) {
+    ROS_ERROR_NAMED("actionlib",
+      "This action client associated with the goal handle has already been destructed. Ignoring this call");
+    return;
+  }
+
+  boost::recursive_mutex::scoped_lock lock(gm_->list_mutex_);
+
+  switch (list_handle_.getElem()->getCommState().state_) {
+    case CommState::WAITING_FOR_GOAL_ACK:
+    case CommState::PENDING:
+    case CommState::ACTIVE:
+    case CommState::WAITING_FOR_CANCEL_ACK:
+      break;  // Continue standard processing
+    case CommState::WAITING_FOR_RESULT:
+    case CommState::RECALLING:
+    case CommState::PREEMPTING:
+    case CommState::DONE:
+      ROS_DEBUG_NAMED("actionlib", "Got a cancel() request while in state [%s], so ignoring it",
+        list_handle_.getElem()->getCommState().toString().c_str());
+      return;
+    default:
+      ROS_ERROR_NAMED("actionlib", "BUG: Unhandled CommState: %u",
+        list_handle_.getElem()->getCommState().state_);
+      return;
+  }
+
+  ActionGoalConstPtr action_goal = list_handle_.getElem()->getActionGoal();
+
+  actionlib_msgs::GoalID cancel_msg;
+  cancel_msg.stamp = ros::Time(0, 0);
+  cancel_msg.id = list_handle_.getElem()->getActionGoal()->goal_id.id;
+
+  if (gm_->cancel_func_) {
+    gm_->cancel_func_(cancel_msg);
+  }
+
+  list_handle_.getElem()->transitionToState(*this, CommState::WAITING_FOR_CANCEL_ACK);
+}
+
+template<class ActionSpec>
+bool ClientGoalHandle<ActionSpec>::operator==(const ClientGoalHandle<ActionSpec> & rhs) const
+{
+  // Check if both are inactive
+  if (!active_ && !rhs.active_) {
+    return true;
+  }
+
+  // Check if one or the other is inactive
+  if (!active_ || !rhs.active_) {
+    return false;
+  }
+
+  DestructionGuard::ScopedProtector protector(*guard_);
+  if (!protector.isProtected()) {
+    ROS_ERROR_NAMED("actionlib",
+      "This action client associated with the goal handle has already been destructed. Ignoring this operator==() call");
+    return false;
+  }
+
+  return list_handle_ == rhs.list_handle_;
+}
+
+template<class ActionSpec>
+bool ClientGoalHandle<ActionSpec>::operator!=(const ClientGoalHandle<ActionSpec> & rhs) const
+{
+  return !(*this == rhs);
+}
+
+}  // namespace actionlib
+
+#endif  // ACTIONLIB__CLIENT__CLIENT_GOAL_HANDLE_IMP_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/client/client_helpers.h
@@ -0,0 +1,279 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+#ifndef ACTIONLIB__CLIENT__CLIENT_HELPERS_H_
+#define ACTIONLIB__CLIENT__CLIENT_HELPERS_H_
+
+#include <boost/thread/recursive_mutex.hpp>
+#include <boost/interprocess/sync/scoped_lock.hpp>
+#include <boost/shared_ptr.hpp>
+#include <boost/weak_ptr.hpp>
+#include <vector>
+
+
+#include "actionlib/action_definition.h"
+
+#include "actionlib/managed_list.h"
+#include "actionlib/enclosure_deleter.h"
+#include "actionlib/goal_id_generator.h"
+
+#include "actionlib/client/comm_state.h"
+#include "actionlib/client/terminal_state.h"
+
+#include "actionlib/destruction_guard.h"
+
+// msgs
+#include "actionlib_msgs/GoalID.h"
+#include "actionlib_msgs/GoalStatusArray.h"
+
+namespace actionlib
+{
+
+template<class ActionSpec>
+class ClientGoalHandle;
+
+template<class ActionSpec>
+class CommStateMachine;
+
+template<class ActionSpec>
+class GoalManager
+{
+public:
+  ACTION_DEFINITION(ActionSpec)
+  typedef GoalManager<ActionSpec> GoalManagerT;
+  typedef ClientGoalHandle<ActionSpec> GoalHandleT;
+  typedef boost::function<void (GoalHandleT)> TransitionCallback;
+  typedef boost::function<void (GoalHandleT, const FeedbackConstPtr &)> FeedbackCallback;
+  typedef boost::function<void (const ActionGoalConstPtr)> SendGoalFunc;
+  typedef boost::function<void (const actionlib_msgs::GoalID &)> CancelFunc;
+
+  GoalManager(const boost::shared_ptr<DestructionGuard> & guard)
+  : guard_(guard) {}
+
+  void registerSendGoalFunc(SendGoalFunc send_goal_func);
+  void registerCancelFunc(CancelFunc cancel_func);
+
+  GoalHandleT initGoal(const Goal & goal,
+    TransitionCallback transition_cb = TransitionCallback(),
+    FeedbackCallback feedback_cb = FeedbackCallback() );
+
+  void updateStatuses(const actionlib_msgs::GoalStatusArrayConstPtr & status_array);
+  void updateFeedbacks(const ActionFeedbackConstPtr & action_feedback);
+  void updateResults(const ActionResultConstPtr & action_result);
+
+  friend class ClientGoalHandle<ActionSpec>;
+
+  // should be private
+  typedef ManagedList<boost::shared_ptr<CommStateMachine<ActionSpec> > > ManagedListT;
+  ManagedListT list_;
+
+private:
+  SendGoalFunc send_goal_func_;
+  CancelFunc cancel_func_;
+
+  boost::shared_ptr<DestructionGuard> guard_;
+
+  boost::recursive_mutex list_mutex_;
+
+  GoalIDGenerator id_generator_;
+
+  void listElemDeleter(typename ManagedListT::iterator it);
+};
+
+/**
+ * \brief Client side handle to monitor goal progress
+ *
+ * A ClientGoalHandle is a reference counted object that is used to manipulate and monitor the progress
+ * of an already dispatched goal. Once all the goal handles go out of scope (or are reset), an
+ * ActionClient stops maintaining state for that goal.
+ */
+template<class ActionSpec>
+class ClientGoalHandle
+{
+private:
+  ACTION_DEFINITION(ActionSpec)
+
+public:
+  /**
+   * \brief Create an empty goal handle
+   *
+   * Constructs a goal handle that doesn't track any goal. Calling any method on an empty goal
+   * handle other than operator= will trigger an assertion.
+   */
+  ClientGoalHandle();
+
+  ~ClientGoalHandle();
+
+  /**
+   * \brief Stops goal handle from tracking a goal
+   *
+   * Useful if you want to stop tracking the progress of a goal, but it is inconvenient to force
+   * the goal handle to go out of scope. Has pretty much the same semantics as boost::shared_ptr::reset()
+   */
+  void reset();
+
+  /**
+   * \brief Checks if this goal handle is tracking a goal
+   *
+   * Has pretty much the same semantics as boost::shared_ptr::expired()
+   * \return True if this goal handle is not tracking a goal
+   */
+  inline bool isExpired() const;
+
+  /**
+   * \brief Get the state of this goal's communication state machine from interaction with the server
+   *
+   * Possible States are: WAITING_FOR_GOAL_ACK, PENDING, ACTIVE, WAITING_FOR_RESULT,
+   *                      WAITING_FOR_CANCEL_ACK, RECALLING, PREEMPTING, DONE
+   * \return The current goal's communication state with the server
+   */
+  CommState getCommState() const;
+
+  /**
+   * \brief Get the terminal state information for this goal
+   *
+   * Possible States Are: RECALLED, REJECTED, PREEMPTED, ABORTED, SUCCEEDED, LOST
+   * This call only makes sense if CommState==DONE. This will send ROS_WARNs if we're not in DONE
+   * \return The terminal state
+   */
+  TerminalState getTerminalState() const;
+
+  /**
+   * \brief Get result associated with this goal
+   *
+   * \return nullptr if no result received.  Otherwise returns shared_ptr to result.
+   */
+  ResultConstPtr getResult() const;
+
+  /**
+   * \brief Resends this goal [with the same GoalID] to the ActionServer
+   *
+   * Useful if the user thinks that the goal may have gotten lost in transit
+   */
+  void resend();
+
+  /**
+   * \brief Sends a cancel message for this specific goal to the ActionServer
+   *
+   * Also transitions the Communication State Machine to WAITING_FOR_CANCEL_ACK
+   */
+  void cancel();
+
+  /**
+   * \brief Check if two goal handles point to the same goal
+   * \return TRUE if both point to the same goal. Also returns TRUE if both handles are inactive.
+   */
+  bool operator==(const ClientGoalHandle<ActionSpec> & rhs) const;
+
+  /**
+   * \brief !(operator==())
+   */
+  bool operator!=(const ClientGoalHandle<ActionSpec> & rhs) const;
+
+  friend class GoalManager<ActionSpec>;
+
+private:
+  typedef GoalManager<ActionSpec> GoalManagerT;
+  typedef ManagedList<boost::shared_ptr<CommStateMachine<ActionSpec> > > ManagedListT;
+
+  ClientGoalHandle(GoalManagerT * gm, typename ManagedListT::Handle handle,
+    const boost::shared_ptr<DestructionGuard> & guard);
+
+  GoalManagerT * gm_;
+  bool active_;
+  // typename ManagedListT::iterator it_;
+  boost::shared_ptr<DestructionGuard> guard_;  // Guard must still exist when the list_handle_ is destroyed
+  typename ManagedListT::Handle list_handle_;
+};
+
+template<class ActionSpec>
+class CommStateMachine
+{
+private:
+  // generates typedefs that we'll use to make our lives easier
+  ACTION_DEFINITION(ActionSpec)
+
+public:
+  typedef boost::function<void (const ClientGoalHandle<ActionSpec> &)> TransitionCallback;
+  typedef boost::function<void (const ClientGoalHandle<ActionSpec> &,
+    const FeedbackConstPtr &)> FeedbackCallback;
+  typedef ClientGoalHandle<ActionSpec> GoalHandleT;
+
+  CommStateMachine(const ActionGoalConstPtr & action_goal,
+    TransitionCallback transition_cb,
+    FeedbackCallback feedback_cb);
+
+  ActionGoalConstPtr getActionGoal() const;
+  CommState getCommState() const;
+  actionlib_msgs::GoalStatus getGoalStatus() const;
+  ResultConstPtr getResult() const;
+
+  // Transitions caused by messages
+  void updateStatus(GoalHandleT & gh, const actionlib_msgs::GoalStatusArrayConstPtr & status_array);
+  void updateFeedback(GoalHandleT & gh, const ActionFeedbackConstPtr & action_feedback);
+  void updateResult(GoalHandleT & gh, const ActionResultConstPtr & action_result);
+
+  // Forced transitions
+  void transitionToState(GoalHandleT & gh, const CommState::StateEnum & next_state);
+  void transitionToState(GoalHandleT & gh, const CommState & next_state);
+  void processLost(GoalHandleT & gh);
+
+private:
+  CommStateMachine();
+
+  // State
+  CommState state_;
+  ActionGoalConstPtr action_goal_;
+  actionlib_msgs::GoalStatus latest_goal_status_;
+  ActionResultConstPtr latest_result_;
+
+  // Callbacks
+  TransitionCallback transition_cb_;
+  FeedbackCallback feedback_cb_;
+
+  // **** Implementation ****
+  //! Change the state, as well as print out ROS_DEBUG info
+  void setCommState(const CommState & state);
+  void setCommState(const CommState::StateEnum & state);
+  const actionlib_msgs::GoalStatus * findGoalStatus(
+    const std::vector<actionlib_msgs::GoalStatus> & status_vec) const;
+};
+
+}  // namespace actionlib
+
+#include "actionlib/client/goal_manager_imp.h"
+#include "actionlib/client/client_goal_handle_imp.h"
+#include "actionlib/client/comm_state_machine_imp.h"
+
+#endif  // ACTIONLIB__CLIENT__CLIENT_HELPERS_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/client/comm_state.h
@@ -0,0 +1,120 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+#ifndef ACTIONLIB__CLIENT__COMM_STATE_H_
+#define ACTIONLIB__CLIENT__COMM_STATE_H_
+
+#include <string>
+#include "ros/console.h"
+
+namespace actionlib
+{
+
+/**
+ * \brief Thin wrapper around an enum in order to help interpret the state of the communication state machine
+ **/
+class CommState
+{
+public:
+  //! \brief Defines the various states the Communication State Machine can be in
+  enum StateEnum
+  {
+    WAITING_FOR_GOAL_ACK    = 0,
+    PENDING                 = 1,
+    ACTIVE                  = 2,
+    WAITING_FOR_RESULT      = 3,
+    WAITING_FOR_CANCEL_ACK  = 4,
+    RECALLING               = 5,
+    PREEMPTING              = 6,
+    DONE                    = 7
+  };
+
+  CommState(const StateEnum & state)
+  : state_(state) {}
+
+  inline bool operator==(const CommState & rhs) const
+  {
+    return state_ == rhs.state_;
+  }
+
+  inline bool operator==(const CommState::StateEnum & rhs) const
+  {
+    return state_ == rhs;
+  }
+
+  inline bool operator!=(const CommState::StateEnum & rhs) const
+  {
+    return !(*this == rhs);
+  }
+
+  inline bool operator!=(const CommState & rhs) const
+  {
+    return !(*this == rhs);
+  }
+
+  std::string toString() const
+  {
+    switch (state_) {
+      case WAITING_FOR_GOAL_ACK:
+        return "WAITING_FOR_GOAL_ACK";
+      case PENDING:
+        return "PENDING";
+      case ACTIVE:
+        return "ACTIVE";
+      case WAITING_FOR_RESULT:
+        return "WAITING_FOR_RESULT";
+      case WAITING_FOR_CANCEL_ACK:
+        return "WAITING_FOR_CANCEL_ACK";
+      case RECALLING:
+        return "RECALLING";
+      case PREEMPTING:
+        return "PREEMPTING";
+      case DONE:
+        return "DONE";
+      default:
+        ROS_ERROR_NAMED("actionlib", "BUG: Unhandled CommState: %u", state_);
+        break;
+    }
+    return "BUG-UNKNOWN";
+  }
+
+  StateEnum state_;
+
+private:
+  CommState();
+};
+
+}  // namespace actionlib
+
+#endif  // ACTIONLIB__CLIENT__COMM_STATE_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/client/comm_state_machine_imp.h
@@ -0,0 +1,489 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+/* This file has the template implementation for CommStateMachine. It should be included with the
+ * class definition.
+ */
+#ifndef ACTIONLIB__CLIENT__COMM_STATE_MACHINE_IMP_H_
+#define ACTIONLIB__CLIENT__COMM_STATE_MACHINE_IMP_H_
+
+#include <vector>
+
+#include "ros/console.h"
+
+namespace actionlib
+{
+
+template<class ActionSpec>
+CommStateMachine<ActionSpec>::CommStateMachine(const ActionGoalConstPtr & action_goal,
+  TransitionCallback transition_cb,
+  FeedbackCallback feedback_cb)
+: state_(CommState::WAITING_FOR_GOAL_ACK)
+{
+  assert(action_goal);
+  action_goal_ = action_goal;
+  transition_cb_ = transition_cb;
+  feedback_cb_ = feedback_cb;
+  // transitionToState( CommState::WAITING_FOR_GOAL_ACK );
+}
+
+template<class ActionSpec>
+typename CommStateMachine<ActionSpec>::ActionGoalConstPtr CommStateMachine<ActionSpec>::
+getActionGoal() const
+{
+  return action_goal_;
+}
+
+template<class ActionSpec>
+CommState CommStateMachine<ActionSpec>::getCommState() const
+{
+  return state_;
+}
+
+template<class ActionSpec>
+actionlib_msgs::GoalStatus CommStateMachine<ActionSpec>::getGoalStatus() const
+{
+  return latest_goal_status_;
+}
+
+template<class ActionSpec>
+typename CommStateMachine<ActionSpec>::ResultConstPtr CommStateMachine<ActionSpec>::getResult()
+const
+{
+  ResultConstPtr result;
+  if (latest_result_) {
+    EnclosureDeleter<const ActionResult> d(latest_result_);
+    result = ResultConstPtr(&(latest_result_->result), d);
+  }
+  return result;
+}
+
+template<class ActionSpec>
+void CommStateMachine<ActionSpec>::setCommState(const CommState::StateEnum & state)
+{
+  setCommState(CommState(state));
+}
+
+template<class ActionSpec>
+void CommStateMachine<ActionSpec>::setCommState(const CommState & state)
+{
+  ROS_DEBUG_NAMED("actionlib", "Transitioning CommState from %s to %s",
+    state_.toString().c_str(), state.toString().c_str());
+  state_ = state;
+}
+
+template<class ActionSpec>
+const actionlib_msgs::GoalStatus * CommStateMachine<ActionSpec>::findGoalStatus(
+  const std::vector<actionlib_msgs::GoalStatus> & status_vec) const
+{
+  for (unsigned int i = 0; i < status_vec.size(); i++) {
+    if (status_vec[i].goal_id.id == action_goal_->goal_id.id) {
+      return &status_vec[i];
+    }
+  }
+  return nullptr;
+}
+
+template<class ActionSpec>
+void CommStateMachine<ActionSpec>::updateFeedback(GoalHandleT & gh,
+  const ActionFeedbackConstPtr & action_feedback)
+{
+  // Check if this feedback is for us
+  if (action_goal_->goal_id.id != action_feedback->status.goal_id.id) {
+    return;
+  }
+
+  if (feedback_cb_) {
+    EnclosureDeleter<const ActionFeedback> d(action_feedback);
+    FeedbackConstPtr feedback(&(action_feedback->feedback), d);
+    feedback_cb_(gh, feedback);
+  }
+}
+
+template<class ActionSpec>
+void CommStateMachine<ActionSpec>::updateResult(GoalHandleT & gh,
+  const ActionResultConstPtr & action_result)
+{
+  // Check if this feedback is for us
+  if (action_goal_->goal_id.id != action_result->status.goal_id.id) {
+    return;
+  }
+  latest_goal_status_ = action_result->status;
+  latest_result_ = action_result;
+  switch (state_.state_) {
+    case CommState::WAITING_FOR_GOAL_ACK:
+    case CommState::PENDING:
+    case CommState::ACTIVE:
+    case CommState::WAITING_FOR_RESULT:
+    case CommState::WAITING_FOR_CANCEL_ACK:
+    case CommState::RECALLING:
+    case CommState::PREEMPTING:
+      {
+        // A little bit of hackery to call all the right state transitions before processing result
+        actionlib_msgs::GoalStatusArrayPtr status_array(new actionlib_msgs::GoalStatusArray());
+        status_array->status_list.push_back(action_result->status);
+        updateStatus(gh, status_array);
+
+        transitionToState(gh, CommState::DONE);
+        break;
+      }
+    case CommState::DONE:
+      ROS_ERROR_NAMED("actionlib", "Got a result when we were already in the DONE state"); break;
+    default:
+      ROS_ERROR_NAMED("actionlib", "In a funny comm state: %u", state_.state_); break;
+  }
+}
+
+template<class ActionSpec>
+void CommStateMachine<ActionSpec>::updateStatus(GoalHandleT & gh,
+  const actionlib_msgs::GoalStatusArrayConstPtr & status_array)
+{
+  const actionlib_msgs::GoalStatus * goal_status = findGoalStatus(status_array->status_list);
+
+  // It's possible to receive old GoalStatus messages over the wire, even after receiving Result with a terminal state.
+  //   Thus, we want to ignore all status that we get after we're done, because it is irrelevant. (See trac #2721)
+  if (state_ == CommState::DONE) {
+    return;
+  }
+
+  if (goal_status) {
+    latest_goal_status_ = *goal_status;
+  } else {
+    if (state_ != CommState::WAITING_FOR_GOAL_ACK &&
+      state_ != CommState::WAITING_FOR_RESULT &&
+      state_ != CommState::DONE)
+    {
+      processLost(gh);
+    }
+    return;
+  }
+
+  switch (state_.state_) {
+    case CommState::WAITING_FOR_GOAL_ACK:
+      {
+        if (goal_status) {
+          switch (goal_status->status) {
+            case actionlib_msgs::GoalStatus::PENDING:
+              transitionToState(gh, CommState::PENDING);
+              break;
+            case actionlib_msgs::GoalStatus::ACTIVE:
+              transitionToState(gh, CommState::ACTIVE);
+              break;
+            case actionlib_msgs::GoalStatus::PREEMPTED:
+              transitionToState(gh, CommState::ACTIVE);
+              transitionToState(gh, CommState::PREEMPTING);
+              transitionToState(gh, CommState::WAITING_FOR_RESULT);
+              break;
+            case actionlib_msgs::GoalStatus::SUCCEEDED:
+              transitionToState(gh, CommState::ACTIVE);
+              transitionToState(gh, CommState::WAITING_FOR_RESULT);
+              break;
+            case actionlib_msgs::GoalStatus::ABORTED:
+              transitionToState(gh, CommState::ACTIVE);
+              transitionToState(gh, CommState::WAITING_FOR_RESULT);
+              break;
+            case actionlib_msgs::GoalStatus::REJECTED:
+              transitionToState(gh, CommState::PENDING);
+              transitionToState(gh, CommState::WAITING_FOR_RESULT);
+              break;
+            case actionlib_msgs::GoalStatus::RECALLED:
+              transitionToState(gh, CommState::PENDING);
+              transitionToState(gh, CommState::WAITING_FOR_RESULT);
+              break;
+            case actionlib_msgs::GoalStatus::PREEMPTING:
+              transitionToState(gh, CommState::ACTIVE);
+              transitionToState(gh, CommState::PREEMPTING);
+              break;
+            case actionlib_msgs::GoalStatus::RECALLING:
+              transitionToState(gh, CommState::PENDING);
+              transitionToState(gh, CommState::RECALLING);
+              break;
+            default:
+              ROS_ERROR_NAMED("actionlib",
+                "BUG: Got an unknown status from the ActionServer. status = %u",
+                goal_status->status);
+              break;
+          }
+        }
+        break;
+      }
+    case CommState::PENDING:
+      {
+        switch (goal_status->status) {
+          case actionlib_msgs::GoalStatus::PENDING:
+            break;
+          case actionlib_msgs::GoalStatus::ACTIVE:
+            transitionToState(gh, CommState::ACTIVE);
+            break;
+          case actionlib_msgs::GoalStatus::PREEMPTED:
+            transitionToState(gh, CommState::ACTIVE);
+            transitionToState(gh, CommState::PREEMPTING);
+            transitionToState(gh, CommState::WAITING_FOR_RESULT);
+            break;
+          case actionlib_msgs::GoalStatus::SUCCEEDED:
+            transitionToState(gh, CommState::ACTIVE);
+            transitionToState(gh, CommState::WAITING_FOR_RESULT);
+            break;
+          case actionlib_msgs::GoalStatus::ABORTED:
+            transitionToState(gh, CommState::ACTIVE);
+            transitionToState(gh, CommState::WAITING_FOR_RESULT);
+            break;
+          case actionlib_msgs::GoalStatus::REJECTED:
+            transitionToState(gh, CommState::WAITING_FOR_RESULT);
+            break;
+          case actionlib_msgs::GoalStatus::RECALLED:
+            transitionToState(gh, CommState::RECALLING);
+            transitionToState(gh, CommState::WAITING_FOR_RESULT);
+            break;
+          case actionlib_msgs::GoalStatus::PREEMPTING:
+            transitionToState(gh, CommState::ACTIVE);
+            transitionToState(gh, CommState::PREEMPTING);
+            break;
+          case actionlib_msgs::GoalStatus::RECALLING:
+            transitionToState(gh, CommState::RECALLING);
+            break;
+          default:
+            ROS_ERROR_NAMED("actionlib",
+              "BUG: Got an unknown goal status from the ActionServer. status = %u",
+              goal_status->status);
+            break;
+        }
+        break;
+      }
+    case CommState::ACTIVE:
+      {
+        switch (goal_status->status) {
+          case actionlib_msgs::GoalStatus::PENDING:
+            ROS_ERROR_NAMED("actionlib", "Invalid transition from ACTIVE to PENDING"); break;
+          case actionlib_msgs::GoalStatus::ACTIVE:
+            break;
+          case actionlib_msgs::GoalStatus::REJECTED:
+            ROS_ERROR_NAMED("actionlib", "Invalid transition from ACTIVE to REJECTED"); break;
+          case actionlib_msgs::GoalStatus::RECALLING:
+            ROS_ERROR_NAMED("actionlib", "Invalid transition from ACTIVE to RECALLING"); break;
+          case actionlib_msgs::GoalStatus::RECALLED:
+            ROS_ERROR_NAMED("actionlib", "Invalid transition from ACTIVE to RECALLED"); break;
+          case actionlib_msgs::GoalStatus::PREEMPTED:
+            transitionToState(gh, CommState::PREEMPTING);
+            transitionToState(gh, CommState::WAITING_FOR_RESULT);
+            break;
+          case actionlib_msgs::GoalStatus::SUCCEEDED:
+          case actionlib_msgs::GoalStatus::ABORTED:
+            transitionToState(gh, CommState::WAITING_FOR_RESULT); break;
+          case actionlib_msgs::GoalStatus::PREEMPTING:
+            transitionToState(gh, CommState::PREEMPTING); break;
+          default:
+            ROS_ERROR_NAMED("actionlib",
+              "BUG: Got an unknown goal status from the ActionServer. status = %u",
+              goal_status->status);
+            break;
+        }
+        break;
+      }
+    case CommState::WAITING_FOR_RESULT:
+      {
+        switch (goal_status->status) {
+          case actionlib_msgs::GoalStatus::PENDING:
+            ROS_ERROR_NAMED("actionlib", "Invalid Transition from WAITING_FOR_RESUT to PENDING");
+            break;
+          case actionlib_msgs::GoalStatus::PREEMPTING:
+            ROS_ERROR_NAMED("actionlib", "Invalid Transition from WAITING_FOR_RESUT to PREEMPTING");
+            break;
+          case actionlib_msgs::GoalStatus::RECALLING:
+            ROS_ERROR_NAMED("actionlib", "Invalid Transition from WAITING_FOR_RESUT to RECALLING");
+            break;
+          case actionlib_msgs::GoalStatus::ACTIVE:
+          case actionlib_msgs::GoalStatus::PREEMPTED:
+          case actionlib_msgs::GoalStatus::SUCCEEDED:
+          case actionlib_msgs::GoalStatus::ABORTED:
+          case actionlib_msgs::GoalStatus::REJECTED:
+          case actionlib_msgs::GoalStatus::RECALLED:
+            break;
+          default:
+            ROS_ERROR_NAMED("actionlib",
+              "BUG: Got an unknown state from the ActionServer. status = %u",
+              goal_status->status);
+            break;
+        }
+        break;
+      }
+    case CommState::WAITING_FOR_CANCEL_ACK:
+      {
+        switch (goal_status->status) {
+          case actionlib_msgs::GoalStatus::PENDING:
+            break;
+          case actionlib_msgs::GoalStatus::ACTIVE:
+            break;
+          case actionlib_msgs::GoalStatus::SUCCEEDED:
+          case actionlib_msgs::GoalStatus::ABORTED:
+          case actionlib_msgs::GoalStatus::PREEMPTED:
+            transitionToState(gh, CommState::PREEMPTING);
+            transitionToState(gh, CommState::WAITING_FOR_RESULT);
+            break;
+          case actionlib_msgs::GoalStatus::RECALLED:
+            transitionToState(gh, CommState::RECALLING);
+            transitionToState(gh, CommState::WAITING_FOR_RESULT);
+            break;
+          case actionlib_msgs::GoalStatus::REJECTED:
+            transitionToState(gh, CommState::WAITING_FOR_RESULT); break;
+          case actionlib_msgs::GoalStatus::PREEMPTING:
+            transitionToState(gh, CommState::PREEMPTING); break;
+          case actionlib_msgs::GoalStatus::RECALLING:
+            transitionToState(gh, CommState::RECALLING); break;
+          default:
+            ROS_ERROR_NAMED("actionlib",
+              "BUG: Got an unknown state from the ActionServer. status = %u",
+              goal_status->status);
+            break;
+        }
+        break;
+      }
+    case CommState::RECALLING:
+      {
+        switch (goal_status->status) {
+          case actionlib_msgs::GoalStatus::PENDING:
+            ROS_ERROR_NAMED("actionlib", "Invalid Transition from RECALLING to PENDING"); break;
+          case actionlib_msgs::GoalStatus::ACTIVE:
+            ROS_ERROR_NAMED("actionlib", "Invalid Transition from RECALLING to ACTIVE"); break;
+          case actionlib_msgs::GoalStatus::SUCCEEDED:
+          case actionlib_msgs::GoalStatus::ABORTED:
+          case actionlib_msgs::GoalStatus::PREEMPTED:
+            transitionToState(gh, CommState::PREEMPTING);
+            transitionToState(gh, CommState::WAITING_FOR_RESULT);
+            break;
+          case actionlib_msgs::GoalStatus::RECALLED:
+            transitionToState(gh, CommState::WAITING_FOR_RESULT);
+            break;
+          case actionlib_msgs::GoalStatus::REJECTED:
+            transitionToState(gh, CommState::WAITING_FOR_RESULT); break;
+          case actionlib_msgs::GoalStatus::PREEMPTING:
+            transitionToState(gh, CommState::PREEMPTING); break;
+          case actionlib_msgs::GoalStatus::RECALLING:
+            break;
+          default:
+            ROS_ERROR_NAMED("actionlib",
+              "BUG: Got an unknown state from the ActionServer. status = %u",
+              goal_status->status);
+            break;
+        }
+        break;
+      }
+    case CommState::PREEMPTING:
+      {
+        switch (goal_status->status) {
+          case actionlib_msgs::GoalStatus::PENDING:
+            ROS_ERROR_NAMED("actionlib", "Invalid Transition from PREEMPTING to PENDING"); break;
+          case actionlib_msgs::GoalStatus::ACTIVE:
+            ROS_ERROR_NAMED("actionlib", "Invalid Transition from PREEMPTING to ACTIVE"); break;
+          case actionlib_msgs::GoalStatus::REJECTED:
+            ROS_ERROR_NAMED("actionlib", "Invalid Transition from PREEMPTING to REJECTED"); break;
+          case actionlib_msgs::GoalStatus::RECALLING:
+            ROS_ERROR_NAMED("actionlib", "Invalid Transition from PREEMPTING to RECALLING"); break;
+          case actionlib_msgs::GoalStatus::RECALLED:
+            ROS_ERROR_NAMED("actionlib", "Invalid Transition from PREEMPTING to RECALLED"); break;
+            break;
+          case actionlib_msgs::GoalStatus::PREEMPTED:
+          case actionlib_msgs::GoalStatus::SUCCEEDED:
+          case actionlib_msgs::GoalStatus::ABORTED:
+            transitionToState(gh, CommState::WAITING_FOR_RESULT); break;
+          case actionlib_msgs::GoalStatus::PREEMPTING:
+            break;
+          default:
+            ROS_ERROR_NAMED("actionlib",
+              "BUG: Got an unknown state from the ActionServer. status = %u",
+              goal_status->status);
+            break;
+        }
+        break;
+      }
+    case CommState::DONE:
+      {
+        switch (goal_status->status) {
+          case actionlib_msgs::GoalStatus::PENDING:
+            ROS_ERROR_NAMED("actionlib", "Invalid Transition from DONE to PENDING"); break;
+          case actionlib_msgs::GoalStatus::ACTIVE:
+            ROS_ERROR_NAMED("actionlib", "Invalid Transition from DONE to ACTIVE"); break;
+          case actionlib_msgs::GoalStatus::RECALLING:
+            ROS_ERROR_NAMED("actionlib", "Invalid Transition from DONE to RECALLING"); break;
+          case actionlib_msgs::GoalStatus::PREEMPTING:
+            ROS_ERROR_NAMED("actionlib", "Invalid Transition from DONE to PREEMPTING"); break;
+          case actionlib_msgs::GoalStatus::PREEMPTED:
+          case actionlib_msgs::GoalStatus::SUCCEEDED:
+          case actionlib_msgs::GoalStatus::ABORTED:
+          case actionlib_msgs::GoalStatus::RECALLED:
+          case actionlib_msgs::GoalStatus::REJECTED:
+            break;
+          default:
+            ROS_ERROR_NAMED("actionlib",
+              "BUG: Got an unknown state from the ActionServer. status = %u",
+              goal_status->status);
+            break;
+        }
+        break;
+      }
+    default:
+      ROS_ERROR_NAMED("actionlib", "In a funny comm state: %u", state_.state_);
+      break;
+  }
+}
+
+
+template<class ActionSpec>
+void CommStateMachine<ActionSpec>::processLost(GoalHandleT & gh)
+{
+  ROS_WARN_NAMED("actionlib", "Transitioning goal to LOST");
+  latest_goal_status_.status = actionlib_msgs::GoalStatus::LOST;
+  transitionToState(gh, CommState::DONE);
+}
+
+template<class ActionSpec>
+void CommStateMachine<ActionSpec>::transitionToState(GoalHandleT & gh,
+  const CommState::StateEnum & next_state)
+{
+  transitionToState(gh, CommState(next_state));
+}
+
+template<class ActionSpec>
+void CommStateMachine<ActionSpec>::transitionToState(GoalHandleT & gh, const CommState & next_state)
+{
+  ROS_DEBUG_NAMED("actionlib", "Trying to transition to %s", next_state.toString().c_str());
+  setCommState(next_state);
+  if (transition_cb_) {
+    transition_cb_(gh);
+  }
+}
+
+}  // namespace actionlib
+
+#endif  // ACTIONLIB__CLIENT__COMM_STATE_MACHINE_IMP_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/client/connection_monitor.h
@@ -0,0 +1,94 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+#ifndef ACTIONLIB__CLIENT__CONNECTION_MONITOR_H_
+#define ACTIONLIB__CLIENT__CONNECTION_MONITOR_H_
+
+#include <ros/ros.h>
+#include <actionlib_msgs/GoalStatusArray.h>
+
+#include <actionlib/decl.h>
+
+#include <boost/thread/condition.hpp>
+#include <boost/thread/recursive_mutex.hpp>
+
+#include <set>
+#include <string>
+#include <map>
+
+namespace actionlib
+{
+
+class ACTIONLIB_DECL ConnectionMonitor
+{
+public:
+  ConnectionMonitor(ros::Subscriber & feedback_sub, ros::Subscriber & result_sub);
+
+  void goalConnectCallback(const ros::SingleSubscriberPublisher & pub);
+
+  void goalDisconnectCallback(const ros::SingleSubscriberPublisher & pub);
+
+  void cancelConnectCallback(const ros::SingleSubscriberPublisher & pub);
+
+  void cancelDisconnectCallback(const ros::SingleSubscriberPublisher & pub);
+
+  void processStatus(const actionlib_msgs::GoalStatusArrayConstPtr & status,
+    const std::string & cur_status_caller_id);
+
+  bool waitForActionServerToStart(const ros::Duration & timeout = ros::Duration(0, 0),
+    const ros::NodeHandle & nh = ros::NodeHandle() );
+  bool isServerConnected();
+
+private:
+  // status stuff
+  std::string status_caller_id_;
+  bool status_received_;
+  ros::Time latest_status_time_;
+
+  boost::condition check_connection_condition_;
+
+  boost::recursive_mutex data_mutex_;
+  std::map<std::string, size_t> goalSubscribers_;
+  std::map<std::string, size_t> cancelSubscribers_;
+
+  std::string goalSubscribersString();
+  std::string cancelSubscribersString();
+
+  ros::Subscriber & feedback_sub_;
+  ros::Subscriber & result_sub_;
+};
+
+}  // namespace actionlib
+
+#endif  // ACTIONLIB__CLIENT__CONNECTION_MONITOR_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/client/goal_manager_imp.h
@@ -0,0 +1,154 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+/* This file has the template implementation for GoalHandle. It should be included with the
+ * class definition.
+ */
+
+#ifndef ACTIONLIB__CLIENT__GOAL_MANAGER_IMP_H_
+#define ACTIONLIB__CLIENT__GOAL_MANAGER_IMP_H_
+
+#include "ros/ros.h"
+
+namespace actionlib
+{
+
+template<class ActionSpec>
+void GoalManager<ActionSpec>::registerSendGoalFunc(SendGoalFunc send_goal_func)
+{
+  send_goal_func_ = send_goal_func;
+}
+
+template<class ActionSpec>
+void GoalManager<ActionSpec>::registerCancelFunc(CancelFunc cancel_func)
+{
+  cancel_func_ = cancel_func;
+}
+
+
+template<class ActionSpec>
+ClientGoalHandle<ActionSpec> GoalManager<ActionSpec>::initGoal(const Goal & goal,
+  TransitionCallback transition_cb,
+  FeedbackCallback feedback_cb)
+{
+  ActionGoalPtr action_goal(new ActionGoal);
+  action_goal->header.stamp = ros::Time::now();
+  action_goal->goal_id = id_generator_.generateID();
+  action_goal->goal = goal;
+
+  typedef CommStateMachine<ActionSpec> CommStateMachineT;
+  boost::shared_ptr<CommStateMachineT> comm_state_machine(new CommStateMachineT(action_goal,
+    transition_cb,
+    feedback_cb));
+
+  boost::recursive_mutex::scoped_lock lock(list_mutex_);
+  typename ManagedListT::Handle list_handle =
+    list_.add(comm_state_machine, boost::bind(&GoalManagerT::listElemDeleter, this, _1), guard_);
+
+  if (send_goal_func_) {
+    send_goal_func_(action_goal);
+  } else {
+    ROS_WARN_NAMED("actionlib",
+      "Possible coding error: send_goal_func_ set to nullptr. Not going to send goal");
+  }
+
+  return GoalHandleT(this, list_handle, guard_);
+}
+
+template<class ActionSpec>
+void GoalManager<ActionSpec>::listElemDeleter(typename ManagedListT::iterator it)
+{
+  assert(guard_);
+  if (!guard_)
+  {
+    ROS_ERROR_NAMED("actionlib", "Goal manager deleter should not see invalid guards");
+    return;
+  }
+  DestructionGuard::ScopedProtector protector(*guard_);
+  if (!protector.isProtected()) {
+    ROS_ERROR_NAMED("actionlib",
+      "This action client associated with the goal handle has already been destructed. Not going to try delete the CommStateMachine associated with this goal");
+    return;
+  }
+
+  ROS_DEBUG_NAMED("actionlib", "About to erase CommStateMachine");
+  boost::recursive_mutex::scoped_lock lock(list_mutex_);
+  list_.erase(it);
+  ROS_DEBUG_NAMED("actionlib", "Done erasing CommStateMachine");
+}
+
+template<class ActionSpec>
+void GoalManager<ActionSpec>::updateStatuses(
+  const actionlib_msgs::GoalStatusArrayConstPtr & status_array)
+{
+  boost::recursive_mutex::scoped_lock lock(list_mutex_);
+  typename ManagedListT::iterator it = list_.begin();
+
+  while (it != list_.end()) {
+    GoalHandleT gh(this, it.createHandle(), guard_);
+    (*it)->updateStatus(gh, status_array);
+    ++it;
+  }
+}
+
+template<class ActionSpec>
+void GoalManager<ActionSpec>::updateFeedbacks(const ActionFeedbackConstPtr & action_feedback)
+{
+  boost::recursive_mutex::scoped_lock lock(list_mutex_);
+  typename ManagedListT::iterator it = list_.begin();
+
+  while (it != list_.end()) {
+    GoalHandleT gh(this, it.createHandle(), guard_);
+    (*it)->updateFeedback(gh, action_feedback);
+    ++it;
+  }
+}
+
+template<class ActionSpec>
+void GoalManager<ActionSpec>::updateResults(const ActionResultConstPtr & action_result)
+{
+  boost::recursive_mutex::scoped_lock lock(list_mutex_);
+  typename ManagedListT::iterator it = list_.begin();
+
+  while (it != list_.end()) {
+    GoalHandleT gh(this, it.createHandle(), guard_);
+    (*it)->updateResult(gh, action_result);
+    ++it;
+  }
+}
+
+
+}  // namespace actionlib
+
+#endif  // ACTIONLIB__CLIENT__GOAL_MANAGER_IMP_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/client/service_client.h
@@ -0,0 +1,100 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2009, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+
+#ifndef ACTIONLIB__CLIENT__SERVICE_CLIENT_H_
+#define ACTIONLIB__CLIENT__SERVICE_CLIENT_H_
+
+#include <actionlib/action_definition.h>
+#include <actionlib/client/simple_action_client.h>
+
+#include <string>
+
+namespace actionlib
+{
+
+class ServiceClientImp
+{
+public:
+  ServiceClientImp() {}
+  virtual bool call(const void * goal, std::string goal_md5sum, void * result,
+    std::string result_md5sum) = 0;
+  virtual bool waitForServer(const ros::Duration & timeout) = 0;
+  virtual bool isServerConnected() = 0;
+  virtual ~ServiceClientImp() {}
+};
+
+class ServiceClient
+{
+public:
+  ServiceClient(boost::shared_ptr<ServiceClientImp> client)
+  : client_(client) {}
+
+  template<class Goal, class Result>
+  bool call(const Goal & goal, Result & result);
+
+  bool waitForServer(const ros::Duration & timeout = ros::Duration(0, 0));
+  bool isServerConnected();
+
+private:
+  boost::shared_ptr<ServiceClientImp> client_;
+};
+
+template<class ActionSpec>
+ServiceClient serviceClient(ros::NodeHandle n, std::string name);
+
+template<class ActionSpec>
+class ServiceClientImpT : public ServiceClientImp
+{
+public:
+  ACTION_DEFINITION(ActionSpec)
+  typedef ClientGoalHandle<ActionSpec> GoalHandleT;
+  typedef SimpleActionClient<ActionSpec> SimpleActionClientT;
+
+  ServiceClientImpT(ros::NodeHandle n, std::string name);
+
+  bool call(const void * goal, std::string goal_md5sum, void * result, std::string result_md5sum);
+  bool waitForServer(const ros::Duration & timeout);
+  bool isServerConnected();
+
+private:
+  boost::scoped_ptr<SimpleActionClientT> ac_;
+};
+}  // namespace actionlib
+
+// include the implementation
+#include <actionlib/client/service_client_imp.h>
+#endif  // ACTIONLIB__CLIENT__SERVICE_CLIENT_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/client/service_client_imp.h
@@ -0,0 +1,124 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2009, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+#ifndef ACTIONLIB__CLIENT__SERVICE_CLIENT_IMP_H_
+#define ACTIONLIB__CLIENT__SERVICE_CLIENT_IMP_H_
+
+#include <string>
+
+#include "ros/console.h"
+
+namespace actionlib
+{
+template<class ActionSpec>
+ServiceClientImpT<ActionSpec>::ServiceClientImpT(ros::NodeHandle n, std::string name)
+{
+  ac_.reset(new SimpleActionClientT(n, name, true));
+}
+
+template<class ActionSpec>
+bool ServiceClientImpT<ActionSpec>::waitForServer(const ros::Duration & timeout)
+{
+  return ac_->waitForServer(timeout);
+}
+
+template<class ActionSpec>
+bool ServiceClientImpT<ActionSpec>::isServerConnected()
+{
+  return ac_->isServerConnected();
+}
+
+template<class ActionSpec>
+bool ServiceClientImpT<ActionSpec>::call(const void * goal, std::string goal_md5sum,
+  void * result, std::string result_md5sum)
+{
+  // ok... we need to static cast the goal message and result message
+  const Goal * goal_c = static_cast<const Goal *>(goal);
+  Result * result_c = static_cast<Result *>(result);
+
+  // now we need to check that the md5sums are correct
+  namespace mt = ros::message_traits;
+
+  if (strcmp(mt::md5sum(*goal_c),
+    goal_md5sum.c_str()) || strcmp(mt::md5sum(*result_c), result_md5sum.c_str()))
+  {
+    ROS_ERROR_NAMED("actionlib", "Incorrect md5Sums for goal and result types");
+    return false;
+  }
+
+  if (!ac_->isServerConnected()) {
+    ROS_ERROR_NAMED("actionlib",
+      "Attempting to make a service call when the server isn't actually connected to the client.");
+    return false;
+  }
+
+  ac_->sendGoalAndWait(*goal_c);
+  if (ac_->getState() == SimpleClientGoalState::SUCCEEDED) {
+    (*result_c) = *(ac_->getResult());
+    return true;
+  }
+
+  return false;
+}
+
+//****** ServiceClient *******************
+template<class Goal, class Result>
+bool ServiceClient::call(const Goal & goal, Result & result)
+{
+  namespace mt = ros::message_traits;
+  return client_->call(&goal, mt::md5sum(goal), &result, mt::md5sum(result));
+}
+
+bool ServiceClient::waitForServer(const ros::Duration & timeout)
+{
+  return client_->waitForServer(timeout);
+}
+
+bool ServiceClient::isServerConnected()
+{
+  return client_->isServerConnected();
+}
+
+//****** actionlib::serviceClient *******************
+template<class ActionSpec>
+ServiceClient serviceClient(ros::NodeHandle n, std::string name)
+{
+  boost::shared_ptr<ServiceClientImp> client_ptr(new ServiceClientImpT<ActionSpec>(n, name));
+  return ServiceClient(client_ptr);
+}
+
+}  // namespace actionlib
+#endif  // ACTIONLIB__CLIENT__SERVICE_CLIENT_IMP_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/client/simple_action_client.h
@@ -0,0 +1,644 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+#ifndef ACTIONLIB__CLIENT__SIMPLE_ACTION_CLIENT_H_
+#define ACTIONLIB__CLIENT__SIMPLE_ACTION_CLIENT_H_
+
+#include <boost/thread/condition.hpp>
+#include <boost/thread/mutex.hpp>
+#include <boost/scoped_ptr.hpp>
+#include <boost/concept_check.hpp>
+
+#include <string>
+
+#include "ros/ros.h"
+#include "ros/callback_queue.h"
+#include "actionlib/client/action_client.h"
+#include "actionlib/client/simple_goal_state.h"
+#include "actionlib/client/simple_client_goal_state.h"
+#include "actionlib/client/terminal_state.h"
+
+#ifndef DEPRECATED
+#if defined(__GNUC__)
+#define DEPRECATED __attribute__((deprecated))
+#else
+#define DEPRECATED
+#endif
+#endif
+
+
+namespace actionlib
+{
+
+/**
+ * \brief A Simple client implementation of the ActionInterface which supports only one goal at a time
+ *
+ * The SimpleActionClient wraps the existing ActionClient, and exposes a limited set of easy-to-use hooks
+ * for the user. Note that the concept of GoalHandles has been completely hidden from the user, and that
+ * they must query the SimplyActionClient directly in order to monitor a goal.
+ */
+template<class ActionSpec>
+class SimpleActionClient
+{
+private:
+  ACTION_DEFINITION(ActionSpec)
+  typedef ClientGoalHandle<ActionSpec> GoalHandleT;
+  typedef SimpleActionClient<ActionSpec> SimpleActionClientT;
+
+public:
+  typedef boost::function<void (const SimpleClientGoalState & state,
+    const ResultConstPtr & result)> SimpleDoneCallback;
+  typedef boost::function<void ()> SimpleActiveCallback;
+  typedef boost::function<void (const FeedbackConstPtr & feedback)> SimpleFeedbackCallback;
+
+  /**
+   * \brief Simple constructor
+   *
+   * Constructs a SingleGoalActionClient and sets up the necessary ros topics for the ActionInterface
+   * \param name The action name. Defines the namespace in which the action communicates
+   * \param spin_thread If true, spins up a thread to service this action's subscriptions. If false,
+   *                    then the user has to call ros::spin() themselves. Defaults to True
+   */
+  SimpleActionClient(const std::string & name, bool spin_thread = true)
+  : cur_simple_state_(SimpleGoalState::PENDING)
+  {
+    initSimpleClient(nh_, name, spin_thread);
+  }
+
+  /**
+   * \brief Constructor with namespacing options
+   *
+   * Constructs a SingleGoalActionClient and sets up the necessary ros topics for
+   * the ActionInterface, and namespaces them according the a specified NodeHandle
+   * \param n The node handle on top of which we want to namespace our action
+   * \param name The action name. Defines the namespace in which the action communicates
+   * \param spin_thread If true, spins up a thread to service this action's subscriptions. If false,
+   *                    then the user has to call ros::spin() themselves. Defaults to True
+   */
+  SimpleActionClient(ros::NodeHandle & n, const std::string & name, bool spin_thread = true)
+  : cur_simple_state_(SimpleGoalState::PENDING)
+  {
+    initSimpleClient(n, name, spin_thread);
+  }
+
+  ~SimpleActionClient();
+
+  /**
+   * \brief Waits for the ActionServer to connect to this client
+   *
+   * Often, it can take a second for the action server & client to negotiate
+   * a connection, thus, risking the first few goals to be dropped. This call lets
+   * the user wait until the network connection to the server is negotiated.
+   * NOTE: Using this call in a single threaded ROS application, or any
+   * application where the action client's callback queue is not being
+   * serviced, will not work. Without a separate thread servicing the queue, or
+   * a multi-threaded spinner, there is no way for the client to tell whether
+   * or not the server is up because it can't receive a status message.
+   * \param timeout Max time to block before returning. A zero timeout is interpreted as an infinite timeout.
+   * \return True if the server connected in the allocated time. False on timeout
+   */
+  bool waitForServer(const ros::Duration & timeout = ros::Duration(0, 0) ) const
+  {
+    return ac_->waitForActionServerToStart(timeout);
+  }
+
+  /**
+   * @brief  Checks if the action client is successfully connected to the action server
+   * @return True if the server is connected, false otherwise
+   */
+  bool isServerConnected() const
+  {
+    return ac_->isServerConnected();
+  }
+
+  /**
+   * \brief Sends a goal to the ActionServer, and also registers callbacks
+   *
+   * If a previous goal is already active when this is called. We simply forget
+   * about that goal and start tracking the new goal. No cancel requests are made.
+   * \param done_cb     Callback that gets called on transitions to Done
+   * \param active_cb   Callback that gets called on transitions to Active
+   * \param feedback_cb Callback that gets called whenever feedback for this goal is received
+   */
+  void sendGoal(const Goal & goal,
+    SimpleDoneCallback done_cb = SimpleDoneCallback(),
+    SimpleActiveCallback active_cb = SimpleActiveCallback(),
+    SimpleFeedbackCallback feedback_cb = SimpleFeedbackCallback());
+
+  /**
+   * \brief Sends a goal to the ActionServer, and waits until the goal completes or a timeout is exceeded
+   *
+   * If the goal doesn't complete by the execute_timeout, then a preempt message is sent. This call
+   * then waits up to the preempt_timeout for the goal to then finish.
+   *
+   * \param goal             The goal to be sent to the ActionServer
+   * \param execute_timeout  Time to wait until a preempt is sent. 0 implies wait forever
+   * \param preempt_timeout  Time to wait after a preempt is sent. 0 implies wait forever
+   * \return The state of the goal when this call is completed
+   */
+  SimpleClientGoalState sendGoalAndWait(const Goal & goal,
+    const ros::Duration & execute_timeout = ros::Duration(0, 0),
+    const ros::Duration & preempt_timeout = ros::Duration(0, 0));
+
+  /**
+   * \brief Blocks until this goal finishes
+   * \param timeout Max time to block before returning. A zero timeout is interpreted as an infinite timeout.
+   * \return True if the goal finished. False if the goal didn't finish within the allocated timeout
+   */
+  bool waitForResult(const ros::Duration & timeout = ros::Duration(0, 0));
+
+  /**
+   * \brief Get the Result of the current goal
+   * \return shared pointer to the result. Note that this pointer will NEVER be nullptr
+   */
+  ResultConstPtr getResult() const;
+
+  /**
+   * \brief Get the state information for this goal
+   *
+   * Possible States Are: PENDING, ACTIVE, RECALLED, REJECTED, PREEMPTED, ABORTED, SUCCEEDED, LOST.
+   * \return The goal's state. Returns LOST if this SimpleActionClient isn't tracking a goal.
+   */
+  SimpleClientGoalState getState() const;
+
+  /**
+   * \brief Cancel all goals currently running on the action server
+   *
+   * This preempts all goals running on the action server at the point that
+   * this message is serviced by the ActionServer.
+   */
+  void cancelAllGoals();
+
+  /**
+   * \brief Cancel all goals that were stamped at and before the specified time
+   * \param time All goals stamped at or before `time` will be canceled
+   */
+  void cancelGoalsAtAndBeforeTime(const ros::Time & time);
+
+  /**
+   * \brief Cancel the goal that we are currently pursuing
+   */
+  void cancelGoal();
+
+  /**
+   * \brief Stops tracking the state of the current goal. Unregisters this goal's callbacks
+   *
+   * This is useful if we want to make sure we stop calling our callbacks before sending a new goal.
+   * Note that this does not cancel the goal, it simply stops looking for status info about this goal.
+   */
+  void stopTrackingGoal();
+
+private:
+  typedef ActionClient<ActionSpec> ActionClientT;
+  ros::NodeHandle nh_;
+  GoalHandleT gh_;
+
+  SimpleGoalState cur_simple_state_;
+
+  // Signalling Stuff
+  boost::condition done_condition_;
+  boost::mutex done_mutex_;
+
+  // User Callbacks
+  SimpleDoneCallback done_cb_;
+  SimpleActiveCallback active_cb_;
+  SimpleFeedbackCallback feedback_cb_;
+
+  // Spin Thread Stuff
+  boost::mutex terminate_mutex_;
+  bool need_to_terminate_;
+  boost::thread * spin_thread_;
+  ros::CallbackQueue callback_queue;
+
+  boost::scoped_ptr<ActionClientT> ac_;  // Action client depends on callback_queue, so it must be destroyed before callback_queue
+
+  // ***** Private Funcs *****
+  void initSimpleClient(ros::NodeHandle & n, const std::string & name, bool spin_thread);
+  void handleTransition(GoalHandleT gh);
+  void handleFeedback(GoalHandleT gh, const FeedbackConstPtr & feedback);
+  void setSimpleState(const SimpleGoalState::StateEnum & next_state);
+  void setSimpleState(const SimpleGoalState & next_state);
+  void spinThread();
+};
+
+
+template<class ActionSpec>
+void SimpleActionClient<ActionSpec>::initSimpleClient(ros::NodeHandle & n, const std::string & name,
+  bool spin_thread)
+{
+  if (spin_thread) {
+    ROS_DEBUG_NAMED("actionlib", "Spinning up a thread for the SimpleActionClient");
+    need_to_terminate_ = false;
+    spin_thread_ =
+      new boost::thread(boost::bind(&SimpleActionClient<ActionSpec>::spinThread, this));
+    ac_.reset(new ActionClientT(n, name, &callback_queue));
+  } else {
+    spin_thread_ = nullptr;
+    ac_.reset(new ActionClientT(n, name));
+  }
+}
+
+template<class ActionSpec>
+SimpleActionClient<ActionSpec>::~SimpleActionClient()
+{
+  if (spin_thread_) {
+    {
+      boost::mutex::scoped_lock terminate_lock(terminate_mutex_);
+      need_to_terminate_ = true;
+    }
+    spin_thread_->join();
+    delete spin_thread_;
+  }
+  gh_.reset();
+  ac_.reset();
+}
+
+template<class ActionSpec>
+void SimpleActionClient<ActionSpec>::spinThread()
+{
+  while (nh_.ok()) {
+    {
+      boost::mutex::scoped_lock terminate_lock(terminate_mutex_);
+      if (need_to_terminate_) {
+        break;
+      }
+    }
+    callback_queue.callAvailable(ros::WallDuration(0.1f));
+  }
+}
+
+template<class ActionSpec>
+void SimpleActionClient<ActionSpec>::setSimpleState(const SimpleGoalState::StateEnum & next_state)
+{
+  setSimpleState(SimpleGoalState(next_state) );
+}
+
+template<class ActionSpec>
+void SimpleActionClient<ActionSpec>::setSimpleState(const SimpleGoalState & next_state)
+{
+  ROS_DEBUG_NAMED("actionlib", "Transitioning SimpleState from [%s] to [%s]",
+    cur_simple_state_.toString().c_str(),
+    next_state.toString().c_str());
+  cur_simple_state_ = next_state;
+}
+
+template<class ActionSpec>
+void SimpleActionClient<ActionSpec>::sendGoal(const Goal & goal,
+  SimpleDoneCallback done_cb,
+  SimpleActiveCallback active_cb,
+  SimpleFeedbackCallback feedback_cb)
+{
+  // Reset the old GoalHandle, so that our callbacks won't get called anymore
+  gh_.reset();
+
+  // Store all the callbacks
+  done_cb_ = done_cb;
+  active_cb_ = active_cb;
+  feedback_cb_ = feedback_cb;
+
+  cur_simple_state_ = SimpleGoalState::PENDING;
+
+  // Send the goal to the ActionServer
+  gh_ = ac_->sendGoal(goal, boost::bind(&SimpleActionClientT::handleTransition, this, _1),
+      boost::bind(&SimpleActionClientT::handleFeedback, this, _1, _2));
+}
+
+template<class ActionSpec>
+SimpleClientGoalState SimpleActionClient<ActionSpec>::getState() const
+{
+  if (gh_.isExpired()) {
+    return SimpleClientGoalState(SimpleClientGoalState::LOST);
+  }
+
+  CommState comm_state_ = gh_.getCommState();
+
+  switch (comm_state_.state_) {
+    case CommState::WAITING_FOR_GOAL_ACK:
+    case CommState::PENDING:
+    case CommState::RECALLING:
+      return SimpleClientGoalState(SimpleClientGoalState::PENDING);
+    case CommState::ACTIVE:
+    case CommState::PREEMPTING:
+      return SimpleClientGoalState(SimpleClientGoalState::ACTIVE);
+    case CommState::DONE:
+      {
+        switch (gh_.getTerminalState().state_) {
+          case TerminalState::RECALLED:
+            return SimpleClientGoalState(SimpleClientGoalState::RECALLED,
+                     gh_.getTerminalState().text_);
+          case TerminalState::REJECTED:
+            return SimpleClientGoalState(SimpleClientGoalState::REJECTED,
+                     gh_.getTerminalState().text_);
+          case TerminalState::PREEMPTED:
+            return SimpleClientGoalState(SimpleClientGoalState::PREEMPTED,
+                     gh_.getTerminalState().text_);
+          case TerminalState::ABORTED:
+            return SimpleClientGoalState(SimpleClientGoalState::ABORTED,
+                     gh_.getTerminalState().text_);
+          case TerminalState::SUCCEEDED:
+            return SimpleClientGoalState(SimpleClientGoalState::SUCCEEDED,
+                     gh_.getTerminalState().text_);
+          case TerminalState::LOST:
+            return SimpleClientGoalState(SimpleClientGoalState::LOST, gh_.getTerminalState().text_);
+          default:
+            ROS_ERROR_NAMED("actionlib",
+              "Unknown terminal state [%u]. This is a bug in SimpleActionClient",
+              gh_.getTerminalState().state_);
+            return SimpleClientGoalState(SimpleClientGoalState::LOST, gh_.getTerminalState().text_);
+        }
+      }
+    case CommState::WAITING_FOR_RESULT:
+    case CommState::WAITING_FOR_CANCEL_ACK:
+      {
+        switch (cur_simple_state_.state_) {
+          case SimpleGoalState::PENDING:
+            return SimpleClientGoalState(SimpleClientGoalState::PENDING);
+          case SimpleGoalState::ACTIVE:
+            return SimpleClientGoalState(SimpleClientGoalState::ACTIVE);
+          case SimpleGoalState::DONE:
+            ROS_ERROR_NAMED("actionlib",
+              "In WAITING_FOR_RESULT or WAITING_FOR_CANCEL_ACK, yet we are in SimpleGoalState DONE. This is a bug in SimpleActionClient");
+            return SimpleClientGoalState(SimpleClientGoalState::LOST);
+          default:
+            ROS_ERROR_NAMED("actionlib",
+              "Got a SimpleGoalState of [%u]. This is a bug in SimpleActionClient",
+              cur_simple_state_.state_);
+        }
+      }
+    default:
+      break;
+  }
+  ROS_ERROR_NAMED("actionlib", "Error trying to interpret CommState - %u", comm_state_.state_);
+  return SimpleClientGoalState(SimpleClientGoalState::LOST);
+}
+
+template<class ActionSpec>
+typename SimpleActionClient<ActionSpec>::ResultConstPtr SimpleActionClient<ActionSpec>::getResult()
+const
+{
+  if (gh_.isExpired()) {
+    ROS_ERROR_NAMED("actionlib",
+      "Trying to getResult() when no goal is running. You are incorrectly using SimpleActionClient");
+  }
+
+  if (gh_.getResult()) {
+    return gh_.getResult();
+  }
+
+  return ResultConstPtr(new Result);
+}
+
+
+template<class ActionSpec>
+void SimpleActionClient<ActionSpec>::cancelAllGoals()
+{
+  ac_->cancelAllGoals();
+}
+
+template<class ActionSpec>
+void SimpleActionClient<ActionSpec>::cancelGoalsAtAndBeforeTime(const ros::Time & time)
+{
+  ac_->cancelGoalsAtAndBeforeTime(time);
+}
+
+template<class ActionSpec>
+void SimpleActionClient<ActionSpec>::cancelGoal()
+{
+  if (gh_.isExpired()) {
+    ROS_ERROR_NAMED("actionlib",
+      "Trying to cancelGoal() when no goal is running. You are incorrectly using SimpleActionClient");
+  }
+
+  gh_.cancel();
+}
+
+template<class ActionSpec>
+void SimpleActionClient<ActionSpec>::stopTrackingGoal()
+{
+  if (gh_.isExpired()) {
+    ROS_ERROR_NAMED("actionlib",
+      "Trying to stopTrackingGoal() when no goal is running. You are incorrectly using SimpleActionClient");
+  }
+  gh_.reset();
+}
+
+template<class ActionSpec>
+void SimpleActionClient<ActionSpec>::handleFeedback(GoalHandleT gh,
+  const FeedbackConstPtr & feedback)
+{
+  if (gh_ != gh) {
+    ROS_ERROR_NAMED("actionlib",
+      "Got a callback on a goalHandle that we're not tracking.  \
+               This is an internal SimpleActionClient/ActionClient bug.  \
+               This could also be a GoalID collision");
+  }
+  if (feedback_cb_) {
+    feedback_cb_(feedback);
+  }
+}
+
+template<class ActionSpec>
+void SimpleActionClient<ActionSpec>::handleTransition(GoalHandleT gh)
+{
+  CommState comm_state_ = gh.getCommState();
+  switch (comm_state_.state_) {
+    case CommState::WAITING_FOR_GOAL_ACK:
+      ROS_ERROR_NAMED("actionlib",
+        "BUG: Shouldn't ever get a transition callback for WAITING_FOR_GOAL_ACK");
+      break;
+    case CommState::PENDING:
+      ROS_ERROR_COND(cur_simple_state_ != SimpleGoalState::PENDING,
+        "BUG: Got a transition to CommState [%s] when our in SimpleGoalState [%s]",
+        comm_state_.toString().c_str(), cur_simple_state_.toString().c_str());
+      break;
+    case CommState::ACTIVE:
+      switch (cur_simple_state_.state_) {
+        case SimpleGoalState::PENDING:
+          setSimpleState(SimpleGoalState::ACTIVE);
+          if (active_cb_) {
+            active_cb_();
+          }
+          break;
+        case SimpleGoalState::ACTIVE:
+          break;
+        case SimpleGoalState::DONE:
+          ROS_ERROR_NAMED("actionlib",
+            "BUG: Got a transition to CommState [%s] when in SimpleGoalState [%s]",
+            comm_state_.toString().c_str(), cur_simple_state_.toString().c_str());
+          break;
+        default:
+          ROS_FATAL("Unknown SimpleGoalState %u", cur_simple_state_.state_);
+          break;
+      }
+      break;
+    case CommState::WAITING_FOR_RESULT:
+      break;
+    case CommState::WAITING_FOR_CANCEL_ACK:
+      break;
+    case CommState::RECALLING:
+      ROS_ERROR_COND(cur_simple_state_ != SimpleGoalState::PENDING,
+        "BUG: Got a transition to CommState [%s] when our in SimpleGoalState [%s]",
+        comm_state_.toString().c_str(), cur_simple_state_.toString().c_str());
+      break;
+    case CommState::PREEMPTING:
+      switch (cur_simple_state_.state_) {
+        case SimpleGoalState::PENDING:
+          setSimpleState(SimpleGoalState::ACTIVE);
+          if (active_cb_) {
+            active_cb_();
+          }
+          break;
+        case SimpleGoalState::ACTIVE:
+          break;
+        case SimpleGoalState::DONE:
+          ROS_ERROR_NAMED("actionlib",
+            "BUG: Got a transition to CommState [%s] when in SimpleGoalState [%s]",
+            comm_state_.toString().c_str(), cur_simple_state_.toString().c_str());
+          break;
+        default:
+          ROS_FATAL("Unknown SimpleGoalState %u", cur_simple_state_.state_);
+          break;
+      }
+      break;
+    case CommState::DONE:
+      switch (cur_simple_state_.state_) {
+        case SimpleGoalState::PENDING:
+        case SimpleGoalState::ACTIVE:
+          if (done_cb_) {
+            done_cb_(getState(), gh.getResult());
+          }
+
+          {
+            boost::mutex::scoped_lock lock(done_mutex_);
+            setSimpleState(SimpleGoalState::DONE);
+          }
+
+          done_condition_.notify_all();
+          break;
+        case SimpleGoalState::DONE:
+          ROS_ERROR_NAMED("actionlib", "BUG: Got a second transition to DONE");
+          break;
+        default:
+          ROS_FATAL("Unknown SimpleGoalState %u", cur_simple_state_.state_);
+          break;
+      }
+      break;
+    default:
+      ROS_ERROR_NAMED("actionlib", "Unknown CommState received [%u]", comm_state_.state_);
+      break;
+  }
+}
+
+template<class ActionSpec>
+bool SimpleActionClient<ActionSpec>::waitForResult(const ros::Duration & timeout)
+{
+  if (gh_.isExpired()) {
+    ROS_ERROR_NAMED("actionlib",
+      "Trying to waitForGoalToFinish() when no goal is running. You are incorrectly using SimpleActionClient");
+    return false;
+  }
+
+  if (timeout < ros::Duration(0, 0)) {
+    ROS_WARN_NAMED("actionlib", "Timeouts can't be negative. Timeout is [%.2fs]", timeout.toSec());
+  }
+
+  ros::Time timeout_time = ros::Time::now() + timeout;
+
+  boost::mutex::scoped_lock lock(done_mutex_);
+
+  // Hardcode how often we check for node.ok()
+  ros::Duration loop_period = ros::Duration().fromSec(.1);
+
+  while (nh_.ok()) {
+    // Determine how long we should wait
+    ros::Duration time_left = timeout_time - ros::Time::now();
+
+    // Check if we're past the timeout time
+    if (timeout > ros::Duration(0, 0) && time_left <= ros::Duration(0, 0) ) {
+      break;
+    }
+
+    if (cur_simple_state_ == SimpleGoalState::DONE) {
+      break;
+    }
+
+
+    // Truncate the time left
+    if (time_left > loop_period || timeout == ros::Duration()) {
+      time_left = loop_period;
+    }
+
+    done_condition_.timed_wait(lock,
+      boost::posix_time::milliseconds(static_cast<int64_t>(time_left.toSec() * 1000.0f)));
+  }
+
+  return cur_simple_state_ == SimpleGoalState::DONE;
+}
+
+template<class ActionSpec>
+SimpleClientGoalState SimpleActionClient<ActionSpec>::sendGoalAndWait(const Goal & goal,
+  const ros::Duration & execute_timeout,
+  const ros::Duration & preempt_timeout)
+{
+  sendGoal(goal);
+
+  // See if the goal finishes in time
+  if (waitForResult(execute_timeout)) {
+    ROS_DEBUG_NAMED("actionlib", "Goal finished within specified execute_timeout [%.2f]",
+      execute_timeout.toSec());
+    return getState();
+  }
+
+  ROS_DEBUG_NAMED("actionlib", "Goal didn't finish within specified execute_timeout [%.2f]",
+    execute_timeout.toSec());
+
+  // It didn't finish in time, so we need to preempt it
+  cancelGoal();
+
+  // Now wait again and see if it finishes
+  if (waitForResult(preempt_timeout)) {
+    ROS_DEBUG_NAMED("actionlib", "Preempt finished within specified preempt_timeout [%.2f]",
+      preempt_timeout.toSec());
+  } else {
+    ROS_DEBUG_NAMED("actionlib", "Preempt didn't finish specified preempt_timeout [%.2f]",
+      preempt_timeout.toSec());
+  }
+  return getState();
+}
+
+}  // namespace actionlib
+
+#undef DEPRECATED
+
+#endif  // ACTIONLIB__CLIENT__SIMPLE_ACTION_CLIENT_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/client/simple_client_goal_state.h
@@ -0,0 +1,142 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+#ifndef ACTIONLIB__CLIENT__SIMPLE_CLIENT_GOAL_STATE_H_
+#define ACTIONLIB__CLIENT__SIMPLE_CLIENT_GOAL_STATE_H_
+
+#include <string>
+
+#include "ros/console.h"
+
+namespace actionlib
+{
+
+class SimpleClientGoalState
+{
+public:
+  //! \brief Defines the various states the goal can be in
+  enum StateEnum
+  {
+    PENDING,
+    ACTIVE,
+    RECALLED,
+    REJECTED,
+    PREEMPTED,
+    ABORTED,
+    SUCCEEDED,
+    LOST
+  };
+
+  StateEnum state_;
+  std::string text_;
+
+  SimpleClientGoalState(const StateEnum & state,
+    const std::string & text = std::string(""))
+  : state_(state), text_(text) {}
+
+  inline bool operator==(const SimpleClientGoalState & rhs) const
+  {
+    return state_ == rhs.state_;
+  }
+
+  inline bool operator==(const SimpleClientGoalState::StateEnum & rhs) const
+  {
+    return state_ == rhs;
+  }
+
+  inline bool operator!=(const SimpleClientGoalState::StateEnum & rhs) const
+  {
+    return !(*this == rhs);
+  }
+
+  inline bool operator!=(const SimpleClientGoalState & rhs) const
+  {
+    return !(*this == rhs);
+  }
+
+  /**
+   * \brief Determine if goal is done executing (ie. reached a terminal state)
+   * \return True if in RECALLED, REJECTED, PREEMPTED, ABORTED, SUCCEEDED, or LOST. False otherwise
+   */
+  inline bool isDone() const
+  {
+    switch (state_) {
+      case RECALLED:
+      case REJECTED:
+      case PREEMPTED:
+      case ABORTED:
+      case SUCCEEDED:
+      case LOST:
+        return true;
+      default:
+        return false;
+    }
+  }
+
+  std::string getText() const
+  {
+    return text_;
+  }
+
+  //! \brief Convert the state to a string. Useful when printing debugging information
+  std::string toString() const
+  {
+    switch (state_) {
+      case PENDING:
+        return "PENDING";
+      case ACTIVE:
+        return "ACTIVE";
+      case RECALLED:
+        return "RECALLED";
+      case REJECTED:
+        return "REJECTED";
+      case PREEMPTED:
+        return "PREEMPTED";
+      case ABORTED:
+        return "ABORTED";
+      case SUCCEEDED:
+        return "SUCCEEDED";
+      case LOST:
+        return "LOST";
+      default:
+        ROS_ERROR_NAMED("actionlib", "BUG: Unhandled SimpleGoalState: %u", state_);
+        break;
+    }
+    return "BUG-UNKNOWN";
+  }
+};
+
+}  // namespace actionlib
+
+#endif  // ACTIONLIB__CLIENT__SIMPLE_CLIENT_GOAL_STATE_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/client/simple_goal_state.h
@@ -0,0 +1,106 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+#ifndef ACTIONLIB__CLIENT__SIMPLE_GOAL_STATE_H_
+#define ACTIONLIB__CLIENT__SIMPLE_GOAL_STATE_H_
+
+#include <string>
+#include "ros/console.h"
+
+namespace actionlib
+{
+
+/**
+ * \brief Thin wrapper around an enum in order providing a simplified version of the
+ * communication state, but with less states than CommState
+ **/
+class SimpleGoalState
+{
+public:
+  //! \brief Defines the various states the SimpleGoalState can be in
+  enum StateEnum
+  {
+    PENDING,
+    ACTIVE,
+    DONE
+  };
+
+  SimpleGoalState(const StateEnum & state)
+  : state_(state) {}
+
+  inline bool operator==(const SimpleGoalState & rhs) const
+  {
+    return state_ == rhs.state_;
+  }
+
+  inline bool operator==(const SimpleGoalState::StateEnum & rhs) const
+  {
+    return state_ == rhs;
+  }
+
+  inline bool operator!=(const SimpleGoalState::StateEnum & rhs) const
+  {
+    return !(*this == rhs);
+  }
+
+  inline bool operator!=(const SimpleGoalState & rhs) const
+  {
+    return !(*this == rhs);
+  }
+
+  std::string toString() const
+  {
+    switch (state_) {
+      case PENDING:
+        return "PENDING";
+      case ACTIVE:
+        return "ACTIVE";
+      case DONE:
+        return "DONE";
+      default:
+        ROS_ERROR_NAMED("actionlib", "BUG: Unhandled SimpleGoalState: %u", state_);
+        break;
+    }
+    return "BUG-UNKNOWN";
+  }
+
+  StateEnum state_;
+
+private:
+  SimpleGoalState();
+};
+
+}  // namespace actionlib
+
+#endif  // ACTIONLIB__CLIENT__SIMPLE_GOAL_STATE_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/client/terminal_state.h
@@ -0,0 +1,117 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+#ifndef ACTIONLIB__CLIENT__TERMINAL_STATE_H_
+#define ACTIONLIB__CLIENT__TERMINAL_STATE_H_
+
+#include <string>
+#include "ros/console.h"
+
+namespace actionlib
+{
+
+class TerminalState
+{
+public:
+  enum StateEnum
+  {
+    RECALLED,
+    REJECTED,
+    PREEMPTED,
+    ABORTED,
+    SUCCEEDED,
+    LOST
+  };
+
+  TerminalState(const StateEnum & state, const std::string & text = std::string(""))
+  : state_(state), text_(text) {}
+
+  inline bool operator==(const TerminalState & rhs) const
+  {
+    return state_ == rhs.state_;
+  }
+
+  inline bool operator==(const TerminalState::StateEnum & rhs) const
+  {
+    return state_ == rhs;
+  }
+
+  inline bool operator!=(const TerminalState::StateEnum & rhs) const
+  {
+    return !(*this == rhs);
+  }
+
+  inline bool operator!=(const TerminalState & rhs) const
+  {
+    return !(*this == rhs);
+  }
+
+  std::string getText() const
+  {
+    return text_;
+  }
+
+  std::string toString() const
+  {
+    switch (state_) {
+      case RECALLED:
+        return "RECALLED";
+      case REJECTED:
+        return "REJECTED";
+      case PREEMPTED:
+        return "PREEMPTED";
+      case ABORTED:
+        return "ABORTED";
+      case SUCCEEDED:
+        return "SUCCEEDED";
+      case LOST:
+        return "LOST";
+
+      default:
+        ROS_ERROR_NAMED("actionlib", "BUG: Unhandled TerminalState: %u", state_);
+        break;
+    }
+    return "BUG-UNKNOWN";
+  }
+
+  StateEnum state_;
+  std::string text_;
+
+private:
+  TerminalState();
+};
+
+}  // namespace actionlib
+
+#endif  // ACTIONLIB__CLIENT__TERMINAL_STATE_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/decl.h
@@ -0,0 +1,55 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2009, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+*********************************************************************/
+/*
+ * Cross platform macros.
+ *
+ */
+#ifndef ACTIONLIB__DECL_H_
+#define ACTIONLIB__DECL_H_
+
+#include <ros/macros.h>
+
+#ifdef ROS_BUILD_SHARED_LIBS  // ros is being built around shared libraries
+  #ifdef actionlib_EXPORTS  // we are building a shared lib/dll
+    #define ACTIONLIB_DECL ROS_HELPER_EXPORT
+  #else  // we are using shared lib/dll
+    #define ACTIONLIB_DECL ROS_HELPER_IMPORT
+  #endif
+#else  // ros is being built around static libraries
+  #define ACTIONLIB_DECL
+#endif
+
+#endif  // ACTIONLIB__DECL_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/destruction_guard.h
@@ -0,0 +1,138 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2009, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+#ifndef ACTIONLIB__DESTRUCTION_GUARD_H_
+#define ACTIONLIB__DESTRUCTION_GUARD_H_
+
+#include <boost/thread/condition.hpp>
+#include <boost/thread/mutex.hpp>
+
+namespace actionlib
+{
+/**
+ * @class DestructionGuard
+ * @brief This class protects an object from being destructed until all users of that object relinquish control of it
+ */
+class DestructionGuard
+{
+public:
+  /**
+   * @brief  Constructor for a DestructionGuard
+   */
+  DestructionGuard()
+  : use_count_(0), destructing_(false) {}
+  void destruct()
+  {
+    boost::mutex::scoped_lock lock(mutex_);
+    destructing_ = true;
+    while (use_count_ > 0) {
+      count_condition_.timed_wait(lock, boost::posix_time::milliseconds(1000));
+    }
+  }
+
+  /**
+   * @brief  Attempts to protect the guarded object from being destructed
+   * @return  True if protection succeeded, false if protection failed
+   */
+  bool tryProtect()
+  {
+    boost::mutex::scoped_lock lock(mutex_);
+    if (destructing_) {
+      return false;
+    }
+    use_count_++;
+    return true;
+  }
+
+  /**
+   * @brief  Releases protection on the guarded object
+   */
+  void unprotect()
+  {
+    boost::mutex::scoped_lock lock(mutex_);
+    use_count_--;
+  }
+
+  /**
+   * @class ScopedProtector
+   * @brief Protects a DestructionGuard until this object goes out of scope
+   */
+  class ScopedProtector
+  {
+public:
+    /**
+     * @brief  Constructor for a ScopedProtector
+     * @param guard The DestructionGuard to protect
+     */
+    ScopedProtector(DestructionGuard & guard)
+    : guard_(guard), protected_(false)
+    {
+      protected_ = guard_.tryProtect();
+    }
+
+    /**
+     * @brief  Checks if the ScopedProtector successfully protected the DestructionGuard
+     * @return True if protection succeeded, false otherwise
+     */
+    bool isProtected()
+    {
+      return protected_;
+    }
+
+    /**
+     * @brief  Releases protection of the DestructionGuard if necessary
+     */
+    ~ScopedProtector()
+    {
+      if (protected_) {
+        guard_.unprotect();
+      }
+    }
+
+private:
+    DestructionGuard & guard_;
+    bool protected_;
+  };
+
+private:
+  boost::mutex mutex_;
+  int use_count_;
+  bool destructing_;
+  boost::condition count_condition_;
+};
+
+}   // namespace actionlib
+#endif  // ACTIONLIB__DESTRUCTION_GUARD_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/enclosure_deleter.h
@@ -0,0 +1,83 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+
+#include <boost/shared_ptr.hpp>
+
+#ifndef ACTIONLIB__ENCLOSURE_DELETER_H_
+#define ACTIONLIB__ENCLOSURE_DELETER_H_
+
+namespace actionlib
+{
+
+/*
+ * This allows the creation of a shared pointer to a section
+ * of an already reference counted structure. For example,
+ * if in the following picture Enclosure is reference counted with
+ * a boost::shared_ptr and you want to return a boost::shared_ptr
+ * to the Member that is referenced counted along with Enclosure objects
+ *
+ * Enclosure ---------------  <--- Already reference counted
+ * -----Member <------- A member of enclosure objects, eg. Enclosure.Member
+ */
+template<class Enclosure>
+class EnclosureDeleter
+{
+public:
+  EnclosureDeleter(const boost::shared_ptr<Enclosure> & enc_ptr)
+  : enc_ptr_(enc_ptr) {}
+
+  template<class Member>
+  void operator()(Member *)
+  {
+    enc_ptr_.reset();
+  }
+
+private:
+  boost::shared_ptr<Enclosure> enc_ptr_;
+};
+
+template<class Enclosure, class Member>
+boost::shared_ptr<Member> share_member(boost::shared_ptr<Enclosure> enclosure, Member & member)
+{
+  EnclosureDeleter<Enclosure> d(enclosure);
+  boost::shared_ptr<Member> p(&member, d);
+  return p;
+}
+
+}  // namespace actionlib
+
+#endif  // ACTIONLIB__ENCLOSURE_DELETER_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/goal_id_generator.h
@@ -0,0 +1,81 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+#ifndef ACTIONLIB__GOAL_ID_GENERATOR_H_
+#define ACTIONLIB__GOAL_ID_GENERATOR_H_
+
+#include <actionlib/decl.h>
+
+#include <sstream>
+#include <string>
+
+#include "ros/time.h"
+#include "actionlib_msgs/GoalID.h"
+
+namespace actionlib
+{
+
+class ACTIONLIB_DECL GoalIDGenerator
+{
+public:
+  /**
+   * Create a generator that prepends the fully qualified node name to the Goal ID
+   */
+  GoalIDGenerator();
+
+  /**
+   * \param name Unique name to prepend to the goal id. This will
+   *             generally be a fully qualified node name.
+   */
+  GoalIDGenerator(const std::string & name);
+
+  /**
+   * \param name Set the name to prepend to the goal id. This will
+   *             generally be a fully qualified node name.
+   */
+  void setName(const std::string & name);
+
+  /**
+   * \brief Generates a unique ID
+   * \return A unique GoalID for this action
+   */
+  actionlib_msgs::GoalID generateID();
+
+private:
+  std::string name_;
+};
+
+}  // namespace actionlib
+
+#endif  // ACTIONLIB__GOAL_ID_GENERATOR_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/managed_list.h
@@ -0,0 +1,279 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+#ifndef ACTIONLIB__MANAGED_LIST_H_
+#define ACTIONLIB__MANAGED_LIST_H_
+
+#include <actionlib/destruction_guard.h>
+#include <boost/thread.hpp>
+#include <boost/shared_ptr.hpp>
+#include <boost/weak_ptr.hpp>
+
+#include <list>
+
+#include "ros/console.h"
+
+namespace actionlib
+{
+
+/**
+ * \brief wrapper around an STL list to help with reference counting
+ * Provides handles elements in an STL list. When all the handles go out of scope,
+ * the element in the list is destroyed.
+ */
+template<class T>
+class ManagedList
+{
+private:
+  struct TrackedElem
+  {
+    T elem;
+    boost::weak_ptr<void> handle_tracker_;
+  };
+
+public:
+  class Handle;
+
+  class iterator
+  {
+public:
+    iterator() {}
+    T & operator*() {return it_->elem; }
+    T & operator->() {return it_->elem; }
+    const T & operator*()  const {return it_->elem; }
+    const T & operator->() const {return it_->elem; }
+    bool operator==(const iterator & rhs) const {return it_ == rhs.it_; }
+    bool operator!=(const iterator & rhs) const {return !(*this == rhs); }
+    void operator++() {it_++; }
+    Handle createHandle();    //!< \brief Creates a refcounted Handle from an iterator
+    friend class ManagedList;
+
+private:
+    iterator(typename std::list<TrackedElem>::iterator it)
+    : it_(it) {}
+    typename std::list<TrackedElem>::iterator it_;
+  };
+
+  typedef typename boost::function<void (iterator)> CustomDeleter;
+
+private:
+  class ElemDeleter
+  {
+public:
+    ElemDeleter(iterator it, CustomDeleter deleter,
+      const boost::shared_ptr<DestructionGuard> & guard)
+    : it_(it), deleter_(deleter), guard_(guard)
+    {}
+
+    void operator()(void *)
+    {
+      DestructionGuard::ScopedProtector protector(*guard_);
+      if (!protector.isProtected()) {
+        ROS_ERROR_NAMED("actionlib",
+          "ManagedList: The DestructionGuard associated with this list has already been destructed. You must delete all list handles before deleting the ManagedList");
+        return;
+      }
+
+      ROS_DEBUG_NAMED("actionlib", "IN DELETER");
+      if (deleter_) {
+        deleter_(it_);
+      }
+    }
+
+private:
+    iterator it_;
+    CustomDeleter deleter_;
+    boost::shared_ptr<DestructionGuard> guard_;
+  };
+
+public:
+  class Handle
+  {
+public:
+    /**
+     * \brief Construct an empty handle
+     */
+    Handle()
+    : it_(iterator()), handle_tracker_(boost::shared_ptr<void>()), valid_(false) {}
+
+    Handle & operator=(const Handle & rhs)
+    {
+      if (rhs.valid_) {
+        it_ = rhs.it_;
+      }
+      handle_tracker_ = rhs.handle_tracker_;
+      valid_ = rhs.valid_;
+      return *this;
+    }
+
+    Handle(const Handle & rhs)
+    {
+      *this = rhs;
+    }
+
+    /**
+     * \brief stop tracking the list element with this handle, even though the
+     * Handle hasn't gone out of scope
+     */
+    void reset()
+    {
+      valid_ = false;
+#ifndef _MSC_VER
+      // this prevents a crash on MSVC, but I bet the problem is elsewhere.
+      // it puts the lotion in the basket.
+      it_ = iterator();
+#endif
+      handle_tracker_.reset();
+    }
+
+    /**
+     * \brief get the list element that this handle points to
+     * fails/asserts if this is an empty handle
+     * \return Reference to the element this handle points to
+     */
+    T & getElem()
+    {
+      assert(valid_);
+      if (!valid_) {
+        ROS_ERROR_NAMED("actionlib","getElem() should not see invalid handles");
+      }
+      return *it_;
+    }
+
+    const T & getElem() const
+    {
+      assert(valid_);
+      if (!valid_) {
+        ROS_ERROR_NAMED("actionlib","getElem() should not see invalid handles");
+      }
+      return *it_;
+    }
+
+    /**
+     * \brief Checks if two handles point to the same list elem
+     */
+    bool operator==(const Handle & rhs) const
+    {
+      assert(valid_);
+      if (!valid_) {
+        ROS_ERROR_NAMED("actionlib", "operator== should not see invalid handles");
+      }
+      assert(rhs.valid_);
+      if (!rhs.valid_) {
+        ROS_ERROR_NAMED("actionlib", "operator== should not see invalid RHS handles");
+      }
+      return it_ == rhs.it_;
+    }
+
+    friend class ManagedList;
+    // Need this friend declaration so that iterator::createHandle() can
+    // call the private Handle::Handle() declared below.
+    friend class iterator;
+
+private:
+    Handle(const boost::shared_ptr<void> & handle_tracker, iterator it)
+    : it_(it), handle_tracker_(handle_tracker), valid_(true)
+    {}
+
+    iterator it_;
+    boost::shared_ptr<void> handle_tracker_;
+    bool valid_;
+  };
+
+  ManagedList() {}
+
+  /**
+   * \brief Add an element to the back of the ManagedList
+   */
+  Handle add(const T & elem)
+  {
+    return add(elem, boost::bind(&ManagedList<T>::defaultDeleter, this, _1) );
+  }
+
+  /**
+   * \brief Add an element to the back of the ManagedList, along with a Custom deleter
+   * \param elem The element we want to add
+   * \param deleter Object on which operator() is called when refcount goes to 0
+   */
+  Handle add(const T & elem, CustomDeleter custom_deleter,
+    const boost::shared_ptr<DestructionGuard> & guard)
+  {
+    TrackedElem tracked_t;
+    tracked_t.elem = elem;
+
+    typename std::list<TrackedElem>::iterator list_it = list_.insert(list_.end(), tracked_t);
+    iterator managed_it = iterator(list_it);
+
+    ElemDeleter deleter(managed_it, custom_deleter, guard);
+    boost::shared_ptr<void> tracker(nullptr, deleter);
+
+    list_it->handle_tracker_ = tracker;
+
+    return Handle(tracker, managed_it);
+  }
+
+  /**
+   * \brief Removes an element from the ManagedList
+   */
+  void erase(iterator it)
+  {
+    list_.erase(it.it_);
+  }
+
+  iterator end() {return iterator(list_.end()); }
+  iterator begin() {return iterator(list_.begin()); }
+
+private:
+  void defaultDeleter(iterator it)
+  {
+    erase(it);
+  }
+  std::list<TrackedElem> list_;
+};
+
+
+template<class T>
+typename ManagedList<T>::Handle ManagedList<T>::iterator::createHandle() {
+  if (it_->handle_tracker_.expired()) {
+    ROS_ERROR_NAMED("actionlib", "Tried to create a handle to a list elem with refcount 0");
+  }
+
+  boost::shared_ptr<void> tracker = it_->handle_tracker_.lock();
+
+  return Handle(tracker, *this);
+}
+
+}  // namespace actionlib
+
+#endif  // ACTIONLIB__MANAGED_LIST_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/one_shot_timer.h
@@ -0,0 +1,91 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+#ifndef ACTIONLIB__ONE_SHOT_TIMER_H_
+#define ACTIONLIB__ONE_SHOT_TIMER_H_
+
+#include "ros/ros.h"
+#include "boost/bind.hpp"
+
+//! Horrible hack until ROS Supports this (ROS Trac #1387)
+class OneShotTimer
+{
+public:
+  OneShotTimer()
+  : active_(false) {}
+
+  void cb(const ros::TimerEvent & e)
+  {
+    if (active_) {
+      active_ = false;
+
+      if (callback_) {
+        callback_(e);
+      } else {
+        ROS_ERROR_NAMED("actionlib", "Got a nullptr Timer OneShotTimer Callback");
+      }
+    }
+  }
+
+  boost::function<void(const ros::TimerEvent & e)> getCb()
+  {
+    return boost::bind(&OneShotTimer::cb, this, _1);
+  }
+
+  void registerOneShotCb(boost::function<void(const ros::TimerEvent & e)> callback)
+  {
+    callback_ = callback;
+  }
+
+  void stop()
+  {
+    // timer_.stop();
+    active_ = false;
+  }
+
+  const ros::Timer & operator=(const ros::Timer & rhs)
+  {
+    active_ = true;
+    timer_ = rhs;
+    return timer_;
+  }
+
+private:
+  ros::Timer timer_;
+  bool active_;
+  boost::function<void(const ros::TimerEvent & e)> callback_;
+};
+
+
+#endif  // ACTIONLIB__ONE_SHOT_TIMER_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/server/action_server.h
@@ -0,0 +1,179 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+#ifndef ACTIONLIB__SERVER__ACTION_SERVER_H_
+#define ACTIONLIB__SERVER__ACTION_SERVER_H_
+
+#include <ros/ros.h>
+#include <boost/thread.hpp>
+#include <boost/thread/reverse_lock.hpp>
+#include <boost/shared_ptr.hpp>
+#include <actionlib_msgs/GoalID.h>
+#include <actionlib_msgs/GoalStatusArray.h>
+#include <actionlib_msgs/GoalStatus.h>
+#include <actionlib/enclosure_deleter.h>
+#include <actionlib/goal_id_generator.h>
+#include <actionlib/action_definition.h>
+#include <actionlib/server/status_tracker.h>
+#include <actionlib/server/handle_tracker_deleter.h>
+#include <actionlib/server/server_goal_handle.h>
+#include <actionlib/server/action_server_base.h>
+#include <actionlib/destruction_guard.h>
+
+#include <list>
+#include <string>
+
+namespace actionlib
+{
+/**
+ * @class ActionServer
+ * @brief The ActionServer is a helpful tool for managing goal requests to a
+ * node. It allows the user to specify callbacks that are invoked when goal
+ * or cancel requests come over the wire, and passes back GoalHandles that
+ * can be used to track the state of a given goal request. The ActionServer
+ * makes no assumptions about the policy used to service these goals, and
+ * sends status for each goal over the wire until the last GoalHandle
+ * associated with a goal request is destroyed.
+ */
+template<class ActionSpec>
+class ActionServer : public ActionServerBase<ActionSpec>
+{
+public:
+  // for convenience when referring to ServerGoalHandles
+  typedef ServerGoalHandle<ActionSpec> GoalHandle;
+
+  // generates typedefs that we'll use to make our lives easier
+  ACTION_DEFINITION(ActionSpec)
+
+  /**
+   * @brief  Constructor for an ActionServer
+   * @param  n A NodeHandle to create a namespace under
+   * @param  name The name of the action
+   * @param  goal_cb A goal callback to be called when the ActionServer receives a new goal over the wire
+   * @param  cancel_cb A cancel callback to be called when the ActionServer receives a new cancel request over the wire
+   * @param  auto_start A boolean value that tells the ActionServer whether or not to start publishing as soon as it comes up. THIS SHOULD ALWAYS BE SET TO FALSE TO AVOID RACE CONDITIONS and start() should be called after construction of the server.
+   */
+  ActionServer(ros::NodeHandle n, std::string name,
+    boost::function<void(GoalHandle)> goal_cb,
+    boost::function<void(GoalHandle)> cancel_cb,
+    bool auto_start);
+
+  /**
+   * @brief  Constructor for an ActionServer
+   * @param  n A NodeHandle to create a namespace under
+   * @param  name The name of the action
+   * @param  goal_cb A goal callback to be called when the ActionServer receives a new goal over the wire
+   * @param  auto_start A boolean value that tells the ActionServer whether or not to start publishing as soon as it comes up. THIS SHOULD ALWAYS BE SET TO FALSE TO AVOID RACE CONDITIONS and start() should be called after construction of the server.
+   */
+  ActionServer(ros::NodeHandle n, std::string name,
+    boost::function<void(GoalHandle)> goal_cb,
+    bool auto_start);
+
+  /**
+   * @brief  DEPRECATED Constructor for an ActionServer
+   * @param  n A NodeHandle to create a namespace under
+   * @param  name The name of the action
+   * @param  goal_cb A goal callback to be called when the ActionServer receives a new goal over the wire
+   * @param  cancel_cb A cancel callback to be called when the ActionServer receives a new cancel request over the wire
+   */
+  ROS_DEPRECATED ActionServer(ros::NodeHandle n, std::string name,
+    boost::function<void(GoalHandle)> goal_cb,
+    boost::function<void(GoalHandle)> cancel_cb = boost::function<void(GoalHandle)>());
+
+  /**
+   * @brief  Constructor for an ActionServer
+   * @param  n A NodeHandle to create a namespace under
+   * @param  name The name of the action
+   * @param  auto_start A boolean value that tells the ActionServer whether or not to start publishing as soon as it comes up. THIS SHOULD ALWAYS BE SET TO FALSE TO AVOID RACE CONDITIONS and start() should be called after construction of the server.
+   */
+  ActionServer(ros::NodeHandle n, std::string name,
+    bool auto_start);
+
+  /**
+   * @brief  DEPRECATED Constructor for an ActionServer
+   * @param  n A NodeHandle to create a namespace under
+   * @param  name The name of the action
+   */
+  ROS_DEPRECATED ActionServer(ros::NodeHandle n, std::string name);
+
+  /**
+   * @brief  Destructor for the ActionServer
+   */
+  virtual ~ActionServer();
+
+private:
+  /**
+   * @brief  Initialize all ROS connections and setup timers
+   */
+  virtual void initialize();
+
+  /**
+   * @brief  Publishes a result for a given goal
+   * @param status The status of the goal with which the result is associated
+   * @param result The result to publish
+   */
+  virtual void publishResult(const actionlib_msgs::GoalStatus & status, const Result & result);
+
+  /**
+   * @brief  Publishes feedback for a given goal
+   * @param status The status of the goal with which the feedback is associated
+   * @param feedback The feedback to publish
+   */
+  virtual void publishFeedback(const actionlib_msgs::GoalStatus & status,
+    const Feedback & feedback);
+
+  /**
+   * @brief  Explicitly publish status
+   */
+  virtual void publishStatus();
+
+  /**
+   * @brief  Publish status for all goals on a timer event
+   */
+  void publishStatus(const ros::TimerEvent & e);
+
+  ros::NodeHandle node_;
+
+  ros::Subscriber goal_sub_, cancel_sub_;
+  ros::Publisher status_pub_, result_pub_, feedback_pub_;
+
+  ros::Timer status_timer_;
+};
+}  // namespace actionlib
+
+// include the implementation
+#include <actionlib/server/action_server_imp.h>
+#endif  // ACTIONLIB__SERVER__ACTION_SERVER_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/server/action_server_base.h
@@ -0,0 +1,336 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+#ifndef ACTIONLIB__SERVER__ACTION_SERVER_BASE_H_
+#define ACTIONLIB__SERVER__ACTION_SERVER_BASE_H_
+
+#include <ros/ros.h>
+#include <boost/thread.hpp>
+#include <boost/thread/reverse_lock.hpp>
+#include <boost/shared_ptr.hpp>
+#include <actionlib_msgs/GoalID.h>
+#include <actionlib_msgs/GoalStatusArray.h>
+#include <actionlib_msgs/GoalStatus.h>
+#include <actionlib/enclosure_deleter.h>
+#include <actionlib/goal_id_generator.h>
+#include <actionlib/action_definition.h>
+#include <actionlib/server/status_tracker.h>
+#include <actionlib/server/handle_tracker_deleter.h>
+#include <actionlib/server/server_goal_handle.h>
+#include <actionlib/destruction_guard.h>
+
+#include <list>
+
+namespace actionlib
+{
+/**
+ * @class ActionServerBase
+ * @brief The ActionServerBase implements the logic for an ActionServer.
+ */
+template<class ActionSpec>
+class ActionServerBase
+{
+public:
+  // for convenience when referring to ServerGoalHandles
+  typedef ServerGoalHandle<ActionSpec> GoalHandle;
+
+  // generates typedefs that we'll use to make our lives easier
+  ACTION_DEFINITION(ActionSpec)
+
+  /**
+   * @brief  Constructor for an ActionServer
+   * @param  goal_cb A goal callback to be called when the ActionServer receives a new goal over the wire
+   * @param  cancel_cb A cancel callback to be called when the ActionServer receives a new cancel request over the wire
+   * @param  auto_start A boolean value that tells the ActionServer whether or not to start publishing as soon as it comes up. THIS SHOULD ALWAYS BE SET TO FALSE TO AVOID RACE CONDITIONS and start() should be called after construction of the server.
+   */
+  ActionServerBase(
+    boost::function<void(GoalHandle)> goal_cb,
+    boost::function<void(GoalHandle)> cancel_cb,
+    bool auto_start = false);
+
+
+  /**
+   * @brief  Destructor for the ActionServerBase
+   */
+  virtual ~ActionServerBase();
+
+  /**
+   * @brief  Register a callback to be invoked when a new goal is received, this will replace any  previously registered callback
+   * @param  cb The callback to invoke
+   */
+  void registerGoalCallback(boost::function<void(GoalHandle)> cb);
+
+  /**
+   * @brief  Register a callback to be invoked when a new cancel is received, this will replace any  previously registered callback
+   * @param  cb The callback to invoke
+   */
+  void registerCancelCallback(boost::function<void(GoalHandle)> cb);
+
+  /**
+   * @brief  Explicitly start the action server, used it auto_start is set to false
+   */
+  void start();
+
+
+  /**
+   * @brief  The ROS callback for goals coming into the ActionServerBase
+   */
+  void goalCallback(const boost::shared_ptr<const ActionGoal> & goal);
+
+  /**
+   * @brief  The ROS callback for cancel requests coming into the ActionServerBase
+   */
+  void cancelCallback(const boost::shared_ptr<const actionlib_msgs::GoalID> & goal_id);
+
+protected:
+  // Allow access to protected fields for helper classes
+  friend class ServerGoalHandle<ActionSpec>;
+  friend class HandleTrackerDeleter<ActionSpec>;
+
+  /**
+   * @brief  Initialize all ROS connections and setup timers
+   */
+  virtual void initialize() = 0;
+
+  /**
+   * @brief  Publishes a result for a given goal
+   * @param status The status of the goal with which the result is associated
+   * @param result The result to publish
+   */
+  virtual void publishResult(const actionlib_msgs::GoalStatus & status, const Result & result) = 0;
+
+  /**
+   * @brief  Publishes feedback for a given goal
+   * @param status The status of the goal with which the feedback is associated
+   * @param feedback The feedback to publish
+   */
+  virtual void publishFeedback(const actionlib_msgs::GoalStatus & status,
+    const Feedback & feedback) = 0;
+
+  /**
+   * @brief  Explicitly publish status
+   */
+  virtual void publishStatus() = 0;
+
+  boost::recursive_mutex lock_;
+
+  std::list<StatusTracker<ActionSpec> > status_list_;
+
+  boost::function<void(GoalHandle)> goal_callback_;
+  boost::function<void(GoalHandle)> cancel_callback_;
+
+  ros::Time last_cancel_;
+  ros::Duration status_list_timeout_;
+
+  GoalIDGenerator id_generator_;
+  bool started_;
+  boost::shared_ptr<DestructionGuard> guard_;
+};
+
+template<class ActionSpec>
+ActionServerBase<ActionSpec>::ActionServerBase(
+  boost::function<void(GoalHandle)> goal_cb,
+  boost::function<void(GoalHandle)> cancel_cb,
+  bool auto_start)
+: goal_callback_(goal_cb),
+  cancel_callback_(cancel_cb),
+  started_(auto_start),
+  guard_(new DestructionGuard)
+{
+}
+
+template<class ActionSpec>
+ActionServerBase<ActionSpec>::~ActionServerBase()
+{
+  // Block until we can safely destruct
+  guard_->destruct();
+}
+
+template<class ActionSpec>
+void ActionServerBase<ActionSpec>::registerGoalCallback(boost::function<void(GoalHandle)> cb)
+{
+  goal_callback_ = cb;
+}
+
+template<class ActionSpec>
+void ActionServerBase<ActionSpec>::registerCancelCallback(boost::function<void(GoalHandle)> cb)
+{
+  cancel_callback_ = cb;
+}
+
+template<class ActionSpec>
+void ActionServerBase<ActionSpec>::start()
+{
+  initialize();
+  started_ = true;
+  publishStatus();
+}
+
+
+template<class ActionSpec>
+void ActionServerBase<ActionSpec>::goalCallback(const boost::shared_ptr<const ActionGoal> & goal)
+{
+  boost::recursive_mutex::scoped_lock lock(lock_);
+
+  // if we're not started... then we're not actually going to do anything
+  if (!started_) {
+    return;
+  }
+
+  ROS_DEBUG_NAMED("actionlib", "The action server has received a new goal request");
+
+  // we need to check if this goal already lives in the status list
+  for (typename std::list<StatusTracker<ActionSpec> >::iterator it = status_list_.begin();
+    it != status_list_.end(); ++it)
+  {
+    if (goal->goal_id.id == (*it).status_.goal_id.id) {
+      // The goal could already be in a recalling state if a cancel came in before the goal
+      if ( (*it).status_.status == actionlib_msgs::GoalStatus::RECALLING) {
+        (*it).status_.status = actionlib_msgs::GoalStatus::RECALLED;
+        publishResult((*it).status_, Result());
+      }
+
+      // if this is a request for a goal that has no active handles left,
+      // we'll bump how long it stays in the list
+      if ((*it).handle_tracker_.expired()) {
+        (*it).handle_destruction_time_ = goal->goal_id.stamp;
+      }
+
+      // make sure not to call any user callbacks or add duplicate status onto the list
+      return;
+    }
+  }
+
+  // if the goal is not in our list, we need to create a StatusTracker associated with this goal and push it on
+  typename std::list<StatusTracker<ActionSpec> >::iterator it = status_list_.insert(
+    status_list_.end(), StatusTracker<ActionSpec>(goal));
+
+  // we need to create a handle tracker for the incoming goal and update the StatusTracker
+  HandleTrackerDeleter<ActionSpec> d(this, it, guard_);
+  boost::shared_ptr<void> handle_tracker(nullptr, d);
+  (*it).handle_tracker_ = handle_tracker;
+
+  // check if this goal has already been canceled based on its timestamp
+  if (goal->goal_id.stamp != ros::Time() && goal->goal_id.stamp <= last_cancel_) {
+    // if it has... just create a GoalHandle for it and setCanceled
+    GoalHandle gh(it, this, handle_tracker, guard_);
+    gh.setCanceled(
+      Result(),
+      "This goal handle was canceled by the action server because its timestamp is before the timestamp of the last cancel request");
+  } else {
+    GoalHandle gh = GoalHandle(it, this, handle_tracker, guard_);
+
+    // make sure that we unlock before calling the users callback
+    boost::reverse_lock<boost::recursive_mutex::scoped_lock> unlocker(lock);
+
+    // now, we need to create a goal handle and call the user's callback
+    goal_callback_(gh);
+  }
+}
+
+template<class ActionSpec>
+void ActionServerBase<ActionSpec>::cancelCallback(
+  const boost::shared_ptr<const actionlib_msgs::GoalID> & goal_id)
+{
+  boost::recursive_mutex::scoped_lock lock(lock_);
+
+  // if we're not started... then we're not actually going to do anything
+  if (!started_) {
+    return;
+  }
+
+  // we need to handle a cancel for the user
+  ROS_DEBUG_NAMED("actionlib", "The action server has received a new cancel request");
+  bool goal_id_found = false;
+  for (typename std::list<StatusTracker<ActionSpec> >::iterator it = status_list_.begin();
+    it != status_list_.end(); ++it)
+  {
+    // check if the goal id is zero or if it is equal to the goal id of
+    // the iterator or if the time of the iterator warrants a cancel
+    if (
+      (goal_id->id == "" && goal_id->stamp == ros::Time()) ||  // id and stamp 0 --> cancel everything
+      goal_id->id == (*it).status_.goal_id.id ||    // ids match... cancel that goal
+      (goal_id->stamp != ros::Time() && (*it).status_.goal_id.stamp <= goal_id->stamp)       // stamp != 0 --> cancel everything before stamp
+    )
+    {
+      // we need to check if we need to store this cancel request for later
+      if (goal_id->id == (*it).status_.goal_id.id) {
+        goal_id_found = true;
+      }
+
+      // attempt to get the handle_tracker for the list item if it exists
+      boost::shared_ptr<void> handle_tracker = (*it).handle_tracker_.lock();
+
+      if ((*it).handle_tracker_.expired()) {
+        // if the handle tracker is expired, then we need to create a new one
+        HandleTrackerDeleter<ActionSpec> d(this, it, guard_);
+        handle_tracker = boost::shared_ptr<void>(nullptr, d);
+        (*it).handle_tracker_ = handle_tracker;
+
+        // we also need to reset the time that the status is supposed to be removed from the list
+        (*it).handle_destruction_time_ = ros::Time();
+      }
+
+      // set the status of the goal to PREEMPTING or RECALLING as appropriate
+      // and check if the request should be passed on to the user
+      GoalHandle gh(it, this, handle_tracker, guard_);
+      if (gh.setCancelRequested()) {
+        // make sure that we're unlocked before we call the users callback
+        boost::reverse_lock<boost::recursive_mutex::scoped_lock> unlocker(lock);
+
+        // call the user's cancel callback on the relevant goal
+        cancel_callback_(gh);
+      }
+    }
+  }
+
+  // if the requested goal_id was not found, and it is non-zero, then we need to store the cancel request
+  if (goal_id->id != "" && !goal_id_found) {
+    typename std::list<StatusTracker<ActionSpec> >::iterator it = status_list_.insert(
+      status_list_.end(),
+      StatusTracker<ActionSpec>(*goal_id, actionlib_msgs::GoalStatus::RECALLING));
+    // start the timer for how long the status will live in the list without a goal handle to it
+    (*it).handle_destruction_time_ = goal_id->stamp;
+  }
+
+  // make sure to set last_cancel_ based on the stamp associated with this cancel request
+  if (goal_id->stamp > last_cancel_) {
+    last_cancel_ = goal_id->stamp;
+  }
+}
+
+}  // namespace actionlib
+#endif  // ACTIONLIB__SERVER__ACTION_SERVER_BASE_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/server/action_server_imp.h
@@ -0,0 +1,261 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+#ifndef ACTIONLIB__SERVER__ACTION_SERVER_IMP_H_
+#define ACTIONLIB__SERVER__ACTION_SERVER_IMP_H_
+
+#include <list>
+#include <string>
+#include <ros/ros.h>
+
+namespace actionlib
+{
+template<class ActionSpec>
+ActionServer<ActionSpec>::ActionServer(
+  ros::NodeHandle n,
+  std::string name,
+  bool auto_start)
+: ActionServerBase<ActionSpec>(
+    boost::function<void(GoalHandle)>(), boost::function<void(GoalHandle)>(), auto_start),
+  node_(n, name)
+{
+  // if we're to autostart... then we'll initialize things
+  if (this->started_) {
+    ROS_WARN_NAMED("actionlib",
+      "You've passed in true for auto_start for the C++ action server at [%s]. You should always pass in false to avoid race conditions.",
+      node_.getNamespace().c_str());
+  }
+}
+
+template<class ActionSpec>
+ActionServer<ActionSpec>::ActionServer(ros::NodeHandle n, std::string name)
+: ActionServerBase<ActionSpec>(
+    boost::function<void(GoalHandle)>(), boost::function<void(GoalHandle)>(), true),
+  node_(n, name)
+{
+  // if we're to autostart... then we'll initialize things
+  if (this->started_) {
+    ROS_WARN_NAMED("actionlib",
+      "You've passed in true for auto_start for the C++ action server at [%s]. You should always pass in false to avoid race conditions.",
+      node_.getNamespace().c_str());
+    ActionServer<ActionSpec>::initialize();
+    publishStatus();
+  }
+}
+
+template<class ActionSpec>
+ActionServer<ActionSpec>::ActionServer(ros::NodeHandle n, std::string name,
+  boost::function<void(GoalHandle)> goal_cb,
+  boost::function<void(GoalHandle)> cancel_cb,
+  bool auto_start)
+: ActionServerBase<ActionSpec>(goal_cb, cancel_cb, auto_start),
+  node_(n, name)
+{
+  // if we're to autostart... then we'll initialize things
+  if (this->started_) {
+    ROS_WARN_NAMED("actionlib",
+      "You've passed in true for auto_start for the C++ action server at [%s]. You should always pass in false to avoid race conditions.",
+      node_.getNamespace().c_str());
+    ActionServer<ActionSpec>::initialize();
+    publishStatus();
+  }
+}
+
+template<class ActionSpec>
+ActionServer<ActionSpec>::ActionServer(ros::NodeHandle n, std::string name,
+  boost::function<void(GoalHandle)> goal_cb,
+  boost::function<void(GoalHandle)> cancel_cb)
+: ActionServerBase<ActionSpec>(goal_cb, cancel_cb, true),
+  node_(n, name)
+{
+  // if we're to autostart... then we'll initialize things
+  if (this->started_) {
+    ROS_WARN_NAMED("actionlib",
+      "You've passed in true for auto_start for the C++ action server at [%s]. You should always pass in false to avoid race conditions.",
+      node_.getNamespace().c_str());
+    ActionServer<ActionSpec>::initialize();
+    publishStatus();
+  }
+}
+
+template<class ActionSpec>
+ActionServer<ActionSpec>::ActionServer(ros::NodeHandle n, std::string name,
+  boost::function<void(GoalHandle)> goal_cb,
+  bool auto_start)
+: ActionServerBase<ActionSpec>(goal_cb, boost::function<void(GoalHandle)>(), auto_start),
+  node_(n, name)
+{
+  // if we're to autostart... then we'll initialize things
+  if (this->started_) {
+    ROS_WARN_NAMED("actionlib",
+      "You've passed in true for auto_start for the C++ action server at [%s]. You should always pass in false to avoid race conditions.",
+      node_.getNamespace().c_str());
+    ActionServer<ActionSpec>::initialize();
+    publishStatus();
+  }
+}
+
+template<class ActionSpec>
+ActionServer<ActionSpec>::~ActionServer()
+{
+}
+
+template<class ActionSpec>
+void ActionServer<ActionSpec>::initialize()
+{
+  // read the queue size for each of the publish & subscribe components of the action
+  // server
+  int pub_queue_size;
+  int sub_queue_size;
+  node_.param("actionlib_server_pub_queue_size", pub_queue_size, 50);
+  node_.param("actionlib_server_sub_queue_size", sub_queue_size, 50);
+  if (pub_queue_size < 0) {pub_queue_size = 50;}
+  if (sub_queue_size < 0) {sub_queue_size = 50;}
+
+  result_pub_ = node_.advertise<ActionResult>("result", static_cast<uint32_t>(pub_queue_size));
+  feedback_pub_ =
+    node_.advertise<ActionFeedback>("feedback", static_cast<uint32_t>(pub_queue_size));
+  status_pub_ =
+    node_.advertise<actionlib_msgs::GoalStatusArray>("status",
+      static_cast<uint32_t>(pub_queue_size), true);
+
+  // read the frequency with which to publish status from the parameter server
+  // if not specified locally explicitly, use search param to find actionlib_status_frequency
+  double status_frequency, status_list_timeout;
+  if (!node_.getParam("status_frequency", status_frequency)) {
+    std::string status_frequency_param_name;
+    if (!node_.searchParam("actionlib_status_frequency", status_frequency_param_name)) {
+      status_frequency = 5.0;
+    } else {
+      node_.param(status_frequency_param_name, status_frequency, 5.0);
+    }
+  } else {
+    ROS_WARN_NAMED("actionlib",
+      "You're using the deprecated status_frequency parameter, please switch to actionlib_status_frequency.");
+  }
+  node_.param("status_list_timeout", status_list_timeout, 5.0);
+
+  this->status_list_timeout_ = ros::Duration(status_list_timeout);
+
+  if (status_frequency > 0) {
+    status_timer_ = node_.createTimer(ros::Duration(1.0 / status_frequency),
+        boost::bind(&ActionServer::publishStatus, this, _1));
+  }
+
+  goal_sub_ = node_.subscribe<ActionGoal>("goal", static_cast<uint32_t>(sub_queue_size),
+      boost::bind(&ActionServerBase<ActionSpec>::goalCallback, this, _1));
+
+  cancel_sub_ =
+    node_.subscribe<actionlib_msgs::GoalID>("cancel", static_cast<uint32_t>(sub_queue_size),
+      boost::bind(&ActionServerBase<ActionSpec>::cancelCallback, this, _1));
+}
+
+template<class ActionSpec>
+void ActionServer<ActionSpec>::publishResult(const actionlib_msgs::GoalStatus & status,
+  const Result & result)
+{
+  boost::recursive_mutex::scoped_lock lock(this->lock_);
+  // we'll create a shared_ptr to pass to ROS to limit copying
+  boost::shared_ptr<ActionResult> ar(new ActionResult);
+  ar->header.stamp = ros::Time::now();
+  ar->status = status;
+  ar->result = result;
+  ROS_DEBUG_NAMED("actionlib", "Publishing result for goal with id: %s and stamp: %.2f",
+    status.goal_id.id.c_str(), status.goal_id.stamp.toSec());
+  result_pub_.publish(ar);
+  publishStatus();
+}
+
+template<class ActionSpec>
+void ActionServer<ActionSpec>::publishFeedback(const actionlib_msgs::GoalStatus & status,
+  const Feedback & feedback)
+{
+  boost::recursive_mutex::scoped_lock lock(this->lock_);
+  // we'll create a shared_ptr to pass to ROS to limit copying
+  boost::shared_ptr<ActionFeedback> af(new ActionFeedback);
+  af->header.stamp = ros::Time::now();
+  af->status = status;
+  af->feedback = feedback;
+  ROS_DEBUG_NAMED("actionlib", "Publishing feedback for goal with id: %s and stamp: %.2f",
+    status.goal_id.id.c_str(), status.goal_id.stamp.toSec());
+  feedback_pub_.publish(af);
+}
+
+template<class ActionSpec>
+void ActionServer<ActionSpec>::publishStatus(const ros::TimerEvent &)
+{
+  boost::recursive_mutex::scoped_lock lock(this->lock_);
+  // we won't publish status unless we've been started
+  if (!this->started_) {
+    return;
+  }
+
+  publishStatus();
+}
+
+template<class ActionSpec>
+void ActionServer<ActionSpec>::publishStatus()
+{
+  boost::recursive_mutex::scoped_lock lock(this->lock_);
+  // build a status array
+  actionlib_msgs::GoalStatusArray status_array;
+
+  status_array.header.stamp = ros::Time::now();
+
+  status_array.status_list.resize(this->status_list_.size());
+
+  unsigned int i = 0;
+  for (typename std::list<StatusTracker<ActionSpec> >::iterator it = this->status_list_.begin();
+    it != this->status_list_.end(); )
+  {
+    status_array.status_list[i] = (*it).status_;
+
+    // check if the item is due for deletion from the status list
+    if ((*it).handle_destruction_time_ != ros::Time() &&
+      (*it).handle_destruction_time_ + this->status_list_timeout_ < ros::Time::now())
+    {
+      it = this->status_list_.erase(it);
+    } else {
+      ++it;
+    }
+    ++i;
+  }
+
+  status_pub_.publish(status_array);
+}
+
+}  // namespace actionlib
+#endif  // ACTIONLIB__SERVER__ACTION_SERVER_IMP_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/server/handle_tracker_deleter.h
@@ -0,0 +1,77 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+#ifndef ACTIONLIB__SERVER__HANDLE_TRACKER_DELETER_H_
+#define ACTIONLIB__SERVER__HANDLE_TRACKER_DELETER_H_
+
+#include <actionlib/action_definition.h>
+#include <actionlib/server/status_tracker.h>
+#include <actionlib/destruction_guard.h>
+#include <boost/shared_ptr.hpp>
+#include <list>
+
+namespace actionlib
+{
+// we need to forward declare the ActionServerBase class
+template<class ActionSpec>
+class ActionServerBase;
+
+/**
+ * @class HandleTrackerDeleter
+ * @brief A class to help with tracking GoalHandles and removing goals
+ * from the status list when the last GoalHandle associated with a given
+ * goal is deleted.
+ */
+// class to help with tracking status objects
+template<class ActionSpec>
+class HandleTrackerDeleter
+{
+public:
+  HandleTrackerDeleter(ActionServerBase<ActionSpec> * as,
+    typename std::list<StatusTracker<ActionSpec> >::iterator status_it,
+    boost::shared_ptr<DestructionGuard> guard);
+
+  void operator()(void * ptr);
+
+private:
+  ActionServerBase<ActionSpec> * as_;
+  typename std::list<StatusTracker<ActionSpec> >::iterator status_it_;
+  boost::shared_ptr<DestructionGuard> guard_;
+};
+
+}  // namespace actionlib
+#include <actionlib/server/handle_tracker_deleter_imp.h>
+#endif  // ACTIONLIB__SERVER__HANDLE_TRACKER_DELETER_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/server/handle_tracker_deleter_imp.h
@@ -0,0 +1,65 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+#ifndef ACTIONLIB__SERVER__HANDLE_TRACKER_DELETER_IMP_H_
+#define ACTIONLIB__SERVER__HANDLE_TRACKER_DELETER_IMP_H_
+
+#include <list>
+
+namespace actionlib
+{
+template<class ActionSpec>
+HandleTrackerDeleter<ActionSpec>::HandleTrackerDeleter(ActionServerBase<ActionSpec> * as,
+  typename std::list<StatusTracker<ActionSpec> >::iterator status_it,
+  boost::shared_ptr<DestructionGuard> guard)
+: as_(as), status_it_(status_it), guard_(guard) {}
+
+template<class ActionSpec>
+void HandleTrackerDeleter<ActionSpec>::operator()(void *)
+{
+  if (as_) {
+    // make sure that the action server hasn't been destroyed yet
+    DestructionGuard::ScopedProtector protector(*guard_);
+    if (protector.isProtected()) {
+      // make sure to lock while we erase status for this goal from the list
+      boost::recursive_mutex::scoped_lock lock(as_->lock_);
+      (*status_it_).handle_destruction_time_ = ros::Time::now();
+      // as_->status_list_.erase(status_it_);
+    }
+  }
+}
+}  // namespace actionlib
+#endif  // ACTIONLIB__SERVER__HANDLE_TRACKER_DELETER_IMP_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/server/server_goal_handle.h
@@ -0,0 +1,198 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+#ifndef ACTIONLIB__SERVER__SERVER_GOAL_HANDLE_H_
+#define ACTIONLIB__SERVER__SERVER_GOAL_HANDLE_H_
+
+#include <actionlib_msgs/GoalID.h>
+#include <actionlib_msgs/GoalStatus.h>
+#include <actionlib/action_definition.h>
+#include <actionlib/server/status_tracker.h>
+#include <actionlib/destruction_guard.h>
+#include <boost/shared_ptr.hpp>
+
+#include <list>
+#include <string>
+
+namespace actionlib
+{
+// forward declaration of ActionServerBase
+template<class ActionSpec>
+class ActionServerBase;
+
+/**
+ * @class ServerGoalHandle
+ * @brief Encapsulates a state machine for a given goal that the user can
+ * trigger transitions on. All ROS interfaces for the goal are managed by
+ * the ActionServer to lessen the burden on the user.
+ */
+template<class ActionSpec>
+class ServerGoalHandle
+{
+private:
+  // generates typedefs that we'll use to make our lives easier
+  ACTION_DEFINITION(ActionSpec)
+
+public:
+  /**
+   * @brief  Default constructor for a ServerGoalHandle
+   */
+  ServerGoalHandle();
+
+  /**
+   * @brief  Copy constructor for a ServerGoalHandle
+   * @param gh The goal handle to copy
+   */
+  ServerGoalHandle(const ServerGoalHandle & gh);
+
+  /** @brief  Accept the goal referenced by the goal handle. This will
+   * transition to the ACTIVE state or the PREEMPTING state depending
+   * on whether a cancel request has been received for the goal
+   * @param text Optionally, any text message about the status change being made that should be passed to the client
+   */
+  void setAccepted(const std::string & text = std::string(""));
+
+  /**
+   * @brief  Set the status of the goal associated with the ServerGoalHandle to RECALLED or PREEMPTED
+   * depending on what the current status of the goal is
+   * @param  result Optionally, the user can pass in a result to be sent to any clients of the goal
+   * @param text Optionally, any text message about the status change being made that should be passed to the client
+   */
+  void setCanceled(const Result & result = Result(), const std::string & text = std::string(""));
+
+  /**
+   * @brief  Set the status of the goal associated with the ServerGoalHandle to rejected
+   * @param  result Optionally, the user can pass in a result to be sent to any clients of the goal
+   * @param text Optionally, any text message about the status change being made that should be passed to the client
+   */
+  void setRejected(const Result & result = Result(), const std::string & text = std::string(""));
+
+  /**
+   * @brief  Set the status of the goal associated with the ServerGoalHandle to aborted
+   * @param  result Optionally, the user can pass in a result to be sent to any clients of the goal
+   * @param text Optionally, any text message about the status change being made that should be passed to the client
+   */
+  void setAborted(const Result & result = Result(), const std::string & text = std::string(""));
+
+  /**
+   * @brief  Set the status of the goal associated with the ServerGoalHandle to succeeded
+   * @param  result Optionally, the user can pass in a result to be sent to any clients of the goal
+   * @param text Optionally, any text message about the status change being made that should be passed to the client
+   */
+  void setSucceeded(const Result & result = Result(), const std::string & text = std::string(""));
+
+  /**
+   * @brief  Send feedback to any clients of the goal associated with this ServerGoalHandle
+   * @param feedback The feedback to send to the client
+   */
+  void publishFeedback(const Feedback & feedback);
+
+  /**
+   * @brief Determine if the goal handle is valid (tracking a valid goal,
+   * and associated with a valid action server). If the handle is valid, it
+   * means that the accessors \ref getGoal, \ref getGoalID, etc, can be
+   * called without generating errors.
+   *
+   * @return True if valid, False if invalid
+   */
+  bool isValid() const;
+
+  /**
+   * @brief  Accessor for the goal associated with the ServerGoalHandle
+   * @return A shared_ptr to the goal object
+   */
+  boost::shared_ptr<const Goal> getGoal() const;
+
+  /**
+   * @brief  Accessor for the goal id associated with the ServerGoalHandle
+   * @return The goal id
+   */
+  actionlib_msgs::GoalID getGoalID() const;
+
+  /**
+   * @brief  Accessor for the status associated with the ServerGoalHandle
+   * @return The goal status
+   */
+  actionlib_msgs::GoalStatus getGoalStatus() const;
+
+  /**
+   * @brief  Equals operator for a ServerGoalHandle
+   * @param gh The goal handle to copy
+   */
+  ServerGoalHandle & operator=(const ServerGoalHandle & gh);
+
+  /**
+   * @brief  Equals operator for ServerGoalHandles
+   * @param other The ServerGoalHandle to compare to
+   * @return True if the ServerGoalHandles refer to the same goal, false otherwise
+   */
+  bool operator==(const ServerGoalHandle & other) const;
+
+  /**
+   * @brief  != operator for ServerGoalHandles
+   * @param other The ServerGoalHandle to compare to
+   * @return True if the ServerGoalHandles refer to different goals, false otherwise
+   */
+  bool operator!=(const ServerGoalHandle & other) const;
+
+private:
+  /**
+   * @brief  A private constructor used by the ActionServer to initialize a ServerGoalHandle
+   */
+  ServerGoalHandle(typename std::list<StatusTracker<ActionSpec> >::iterator status_it,
+    ActionServerBase<ActionSpec> * as, boost::shared_ptr<void> handle_tracker,
+    boost::shared_ptr<DestructionGuard> guard);
+
+  /**
+   * @brief  A private method to set status to PENDING or RECALLING
+   * @return True if the cancel request should be passed on to the user, false otherwise
+   */
+  bool setCancelRequested();
+
+  typename std::list<StatusTracker<ActionSpec> >::iterator status_it_;
+  boost::shared_ptr<const ActionGoal> goal_;
+  ActionServerBase<ActionSpec> * as_;
+  boost::shared_ptr<void> handle_tracker_;
+  boost::shared_ptr<DestructionGuard> guard_;
+  friend class ActionServerBase<ActionSpec>;
+};
+
+}  // namespace actionlib
+
+// include the implementation
+#include <actionlib/server/server_goal_handle_imp.h>
+
+#endif  // ACTIONLIB__SERVER__SERVER_GOAL_HANDLE_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/server/server_goal_handle_imp.h
@@ -0,0 +1,418 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+#ifndef ACTIONLIB__SERVER__SERVER_GOAL_HANDLE_IMP_H_
+#define ACTIONLIB__SERVER__SERVER_GOAL_HANDLE_IMP_H_
+
+#include <list>
+#include <string>
+
+#include "ros/console.h"
+
+namespace actionlib
+{
+template<class ActionSpec>
+ServerGoalHandle<ActionSpec>::ServerGoalHandle()
+: as_(nullptr) {}
+
+template<class ActionSpec>
+ServerGoalHandle<ActionSpec>::ServerGoalHandle(const ServerGoalHandle & gh)
+: status_it_(gh.status_it_), goal_(gh.goal_), as_(gh.as_), handle_tracker_(gh.handle_tracker_),
+  guard_(gh.guard_) {}
+
+template<class ActionSpec>
+void ServerGoalHandle<ActionSpec>::setAccepted(const std::string & text)
+{
+  if (as_ == nullptr) {
+    ROS_ERROR_NAMED("actionlib",
+      "You are attempting to call methods on an uninitialized goal handle");
+    return;
+  }
+
+  // check to see if we can use the action server
+  DestructionGuard::ScopedProtector protector(*guard_);
+  if (!protector.isProtected()) {
+    ROS_ERROR_NAMED("actionlib",
+      "The ActionServer associated with this GoalHandle is invalid. Did you delete the ActionServer before the GoalHandle?");
+    return;
+  }
+
+  ROS_DEBUG_NAMED("actionlib", "Accepting goal, id: %s, stamp: %.2f",
+    getGoalID().id.c_str(), getGoalID().stamp.toSec());
+  if (goal_) {
+    boost::recursive_mutex::scoped_lock lock(as_->lock_);
+    unsigned int status = (*status_it_).status_.status;
+
+    // if we were pending before, then we'll go active
+    if (status == actionlib_msgs::GoalStatus::PENDING) {
+      (*status_it_).status_.status = actionlib_msgs::GoalStatus::ACTIVE;
+      (*status_it_).status_.text = text;
+      as_->publishStatus();
+    } else if (status == actionlib_msgs::GoalStatus::RECALLING) {
+      // if we were recalling before, now we'll go to preempting
+      (*status_it_).status_.status = actionlib_msgs::GoalStatus::PREEMPTING;
+      (*status_it_).status_.text = text;
+      as_->publishStatus();
+    } else {
+      ROS_ERROR_NAMED("actionlib",
+        "To transition to an active state, the goal must be in a pending or recalling state, it is currently in state: %d",
+        (*status_it_).status_.status);
+    }
+  } else {
+    ROS_ERROR_NAMED("actionlib", "Attempt to set status on an uninitialized ServerGoalHandle");
+  }
+}
+
+template<class ActionSpec>
+void ServerGoalHandle<ActionSpec>::setCanceled(const Result & result, const std::string & text)
+{
+  if (as_ == nullptr) {
+    ROS_ERROR_NAMED("actionlib",
+      "You are attempting to call methods on an uninitialized goal handle");
+    return;
+  }
+
+  // check to see if we can use the action server
+  DestructionGuard::ScopedProtector protector(*guard_);
+  if (!protector.isProtected()) {
+    ROS_ERROR_NAMED("actionlib",
+      "The ActionServer associated with this GoalHandle is invalid. Did you delete the ActionServer before the GoalHandle?");
+    return;
+  }
+
+  ROS_DEBUG_NAMED("actionlib", "Setting status to canceled on goal, id: %s, stamp: %.2f",
+    getGoalID().id.c_str(), getGoalID().stamp.toSec());
+  if (goal_) {
+    boost::recursive_mutex::scoped_lock lock(as_->lock_);
+    unsigned int status = (*status_it_).status_.status;
+    if (status == actionlib_msgs::GoalStatus::PENDING ||
+      status == actionlib_msgs::GoalStatus::RECALLING)
+    {
+      (*status_it_).status_.status = actionlib_msgs::GoalStatus::RECALLED;
+      (*status_it_).status_.text = text;
+      as_->publishResult((*status_it_).status_, result);
+    } else if (status == actionlib_msgs::GoalStatus::ACTIVE ||
+      status == actionlib_msgs::GoalStatus::PREEMPTING) {
+      (*status_it_).status_.status = actionlib_msgs::GoalStatus::PREEMPTED;
+      (*status_it_).status_.text = text;
+      as_->publishResult((*status_it_).status_, result);
+    } else {
+      ROS_ERROR_NAMED("actionlib",
+        "To transition to a cancelled state, the goal must be in a pending, recalling, active, or preempting state, it is currently in state: %d",
+        (*status_it_).status_.status);
+    }
+  } else {
+    ROS_ERROR_NAMED("actionlib", "Attempt to set status on an uninitialized ServerGoalHandle");
+  }
+}
+
+template<class ActionSpec>
+void ServerGoalHandle<ActionSpec>::setRejected(const Result & result, const std::string & text)
+{
+  if (as_ == nullptr) {
+    ROS_ERROR_NAMED("actionlib",
+      "You are attempting to call methods on an uninitialized goal handle");
+    return;
+  }
+
+  // check to see if we can use the action server
+  DestructionGuard::ScopedProtector protector(*guard_);
+  if (!protector.isProtected()) {
+    ROS_ERROR_NAMED("actionlib",
+      "The ActionServer associated with this GoalHandle is invalid. Did you delete the ActionServer before the GoalHandle?");
+    return;
+  }
+
+  ROS_DEBUG_NAMED("actionlib", "Setting status to rejected on goal, id: %s, stamp: %.2f",
+    getGoalID().id.c_str(), getGoalID().stamp.toSec());
+  if (goal_) {
+    boost::recursive_mutex::scoped_lock lock(as_->lock_);
+    unsigned int status = (*status_it_).status_.status;
+    if (status == actionlib_msgs::GoalStatus::PENDING ||
+      status == actionlib_msgs::GoalStatus::RECALLING)
+    {
+      (*status_it_).status_.status = actionlib_msgs::GoalStatus::REJECTED;
+      (*status_it_).status_.text = text;
+      as_->publishResult((*status_it_).status_, result);
+    } else {
+      ROS_ERROR_NAMED("actionlib",
+        "To transition to a rejected state, the goal must be in a pending or recalling state, it is currently in state: %d",
+        (*status_it_).status_.status);
+    }
+  } else {
+    ROS_ERROR_NAMED("actionlib", "Attempt to set status on an uninitialized ServerGoalHandle");
+  }
+}
+
+template<class ActionSpec>
+void ServerGoalHandle<ActionSpec>::setAborted(const Result & result, const std::string & text)
+{
+  if (as_ == nullptr) {
+    ROS_ERROR_NAMED("actionlib",
+      "You are attempting to call methods on an uninitialized goal handle");
+    return;
+  }
+
+  // check to see if we can use the action server
+  DestructionGuard::ScopedProtector protector(*guard_);
+  if (!protector.isProtected()) {
+    ROS_ERROR_NAMED("actionlib",
+      "The ActionServer associated with this GoalHandle is invalid. Did you delete the ActionServer before the GoalHandle?");
+    return;
+  }
+
+  ROS_DEBUG_NAMED("actionlib", "Setting status to aborted on goal, id: %s, stamp: %.2f",
+    getGoalID().id.c_str(), getGoalID().stamp.toSec());
+  if (goal_) {
+    boost::recursive_mutex::scoped_lock lock(as_->lock_);
+    unsigned int status = (*status_it_).status_.status;
+    if (status == actionlib_msgs::GoalStatus::PREEMPTING ||
+      status == actionlib_msgs::GoalStatus::ACTIVE)
+    {
+      (*status_it_).status_.status = actionlib_msgs::GoalStatus::ABORTED;
+      (*status_it_).status_.text = text;
+      as_->publishResult((*status_it_).status_, result);
+    } else {
+      ROS_ERROR_NAMED("actionlib",
+        "To transition to an aborted state, the goal must be in a preempting or active state, it is currently in state: %d",
+        status);
+    }
+  } else {
+    ROS_ERROR_NAMED("actionlib", "Attempt to set status on an uninitialized ServerGoalHandle");
+  }
+}
+
+template<class ActionSpec>
+void ServerGoalHandle<ActionSpec>::setSucceeded(const Result & result, const std::string & text)
+{
+  if (as_ == nullptr) {
+    ROS_ERROR_NAMED("actionlib",
+      "You are attempting to call methods on an uninitialized goal handle");
+    return;
+  }
+
+  // check to see if we can use the action server
+  DestructionGuard::ScopedProtector protector(*guard_);
+  if (!protector.isProtected()) {
+    ROS_ERROR_NAMED("actionlib",
+      "The ActionServer associated with this GoalHandle is invalid. Did you delete the ActionServer before the GoalHandle?");
+    return;
+  }
+
+  ROS_DEBUG_NAMED("actionlib", "Setting status to succeeded on goal, id: %s, stamp: %.2f",
+    getGoalID().id.c_str(), getGoalID().stamp.toSec());
+  if (goal_) {
+    boost::recursive_mutex::scoped_lock lock(as_->lock_);
+    unsigned int status = (*status_it_).status_.status;
+    if (status == actionlib_msgs::GoalStatus::PREEMPTING ||
+      status == actionlib_msgs::GoalStatus::ACTIVE)
+    {
+      (*status_it_).status_.status = actionlib_msgs::GoalStatus::SUCCEEDED;
+      (*status_it_).status_.text = text;
+      as_->publishResult((*status_it_).status_, result);
+    } else {
+      ROS_ERROR_NAMED("actionlib",
+        "To transition to a succeeded state, the goal must be in a preempting or active state, it is currently in state: %d",
+        status);
+    }
+  } else {
+    ROS_ERROR_NAMED("actionlib", "Attempt to set status on an uninitialized ServerGoalHandle");
+  }
+}
+
+template<class ActionSpec>
+void ServerGoalHandle<ActionSpec>::publishFeedback(const Feedback & feedback)
+{
+  if (as_ == nullptr) {
+    ROS_ERROR_NAMED("actionlib",
+      "You are attempting to call methods on an uninitialized goal handle");
+    return;
+  }
+
+  // check to see if we can use the action server
+  DestructionGuard::ScopedProtector protector(*guard_);
+  if (!protector.isProtected()) {
+    ROS_ERROR_NAMED("actionlib",
+      "The ActionServer associated with this GoalHandle is invalid. Did you delete the ActionServer before the GoalHandle?");
+    return;
+  }
+
+  ROS_DEBUG_NAMED("actionlib", "Publishing feedback for goal, id: %s, stamp: %.2f",
+    getGoalID().id.c_str(), getGoalID().stamp.toSec());
+  if (goal_) {
+    boost::recursive_mutex::scoped_lock lock(as_->lock_);
+    as_->publishFeedback((*status_it_).status_, feedback);
+  } else {
+    ROS_ERROR_NAMED("actionlib",
+      "Attempt to publish feedback on an uninitialized ServerGoalHandle");
+  }
+}
+
+template<class ActionSpec>
+bool ServerGoalHandle<ActionSpec>::isValid() const
+{
+  return goal_ && as_ != nullptr;
+}
+
+template<class ActionSpec>
+boost::shared_ptr<const typename ServerGoalHandle<ActionSpec>::Goal> ServerGoalHandle<ActionSpec>::
+getGoal() const
+{
+  // if we have a goal that is non-null
+  if (goal_) {
+    // create the deleter for our goal subtype
+    EnclosureDeleter<const ActionGoal> d(goal_);
+    return boost::shared_ptr<const Goal>(&(goal_->goal), d);
+  }
+  return boost::shared_ptr<const Goal>();
+}
+
+template<class ActionSpec>
+actionlib_msgs::GoalID ServerGoalHandle<ActionSpec>::getGoalID() const
+{
+  if (goal_ && as_ != nullptr) {
+    DestructionGuard::ScopedProtector protector(*guard_);
+    if (protector.isProtected()) {
+      boost::recursive_mutex::scoped_lock lock(as_->lock_);
+      return (*status_it_).status_.goal_id;
+    } else {
+      return actionlib_msgs::GoalID();
+    }
+  } else {
+    ROS_ERROR_NAMED("actionlib",
+      "Attempt to get a goal id on an uninitialized ServerGoalHandle or one that has no ActionServer associated with it.");
+    return actionlib_msgs::GoalID();
+  }
+}
+
+template<class ActionSpec>
+actionlib_msgs::GoalStatus ServerGoalHandle<ActionSpec>::getGoalStatus() const
+{
+  if (goal_ && as_ != nullptr) {
+    DestructionGuard::ScopedProtector protector(*guard_);
+    if (protector.isProtected()) {
+      boost::recursive_mutex::scoped_lock lock(as_->lock_);
+      return (*status_it_).status_;
+    } else {
+      return actionlib_msgs::GoalStatus();
+    }
+  } else {
+    ROS_ERROR_NAMED("actionlib",
+      "Attempt to get goal status on an uninitialized ServerGoalHandle or one that has no ActionServer associated with it.");
+    return actionlib_msgs::GoalStatus();
+  }
+}
+
+template<class ActionSpec>
+ServerGoalHandle<ActionSpec> & ServerGoalHandle<ActionSpec>::operator=(const ServerGoalHandle & gh)
+{
+  status_it_ = gh.status_it_;
+  goal_ = gh.goal_;
+  as_ = gh.as_;
+  handle_tracker_ = gh.handle_tracker_;
+  guard_ = gh.guard_;
+  return *this;
+}
+
+template<class ActionSpec>
+bool ServerGoalHandle<ActionSpec>::operator==(const ServerGoalHandle & other) const
+{
+  if (!goal_ && !other.goal_) {
+    return true;
+  }
+
+  if (!goal_ || !other.goal_) {
+    return false;
+  }
+
+  actionlib_msgs::GoalID my_id = getGoalID();
+  actionlib_msgs::GoalID their_id = other.getGoalID();
+  return my_id.id == their_id.id;
+}
+
+template<class ActionSpec>
+bool ServerGoalHandle<ActionSpec>::operator!=(const ServerGoalHandle & other) const
+{
+  return !(*this == other);
+}
+
+template<class ActionSpec>
+ServerGoalHandle<ActionSpec>::ServerGoalHandle(
+  typename std::list<StatusTracker<ActionSpec> >::iterator status_it,
+  ActionServerBase<ActionSpec> * as, boost::shared_ptr<void> handle_tracker,
+  boost::shared_ptr<DestructionGuard> guard)
+: status_it_(status_it), goal_((*status_it).goal_),
+  as_(as), handle_tracker_(handle_tracker), guard_(guard) {}
+
+template<class ActionSpec>
+bool ServerGoalHandle<ActionSpec>::setCancelRequested()
+{
+  if (as_ == nullptr) {
+    ROS_ERROR_NAMED("actionlib",
+      "You are attempting to call methods on an uninitialized goal handle");
+    return false;
+  }
+
+  // check to see if we can use the action server
+  DestructionGuard::ScopedProtector protector(*guard_);
+  if (!protector.isProtected()) {
+    ROS_ERROR_NAMED("actionlib",
+      "The ActionServer associated with this GoalHandle is invalid. Did you delete the ActionServer before the GoalHandle?");
+    return false;
+  }
+
+  ROS_DEBUG_NAMED("actionlib",
+    "Transitioning to a cancel requested state on goal id: %s, stamp: %.2f",
+    getGoalID().id.c_str(), getGoalID().stamp.toSec());
+  if (goal_) {
+    boost::recursive_mutex::scoped_lock lock(as_->lock_);
+    unsigned int status = (*status_it_).status_.status;
+    if (status == actionlib_msgs::GoalStatus::PENDING) {
+      (*status_it_).status_.status = actionlib_msgs::GoalStatus::RECALLING;
+      as_->publishStatus();
+      return true;
+    }
+
+    if (status == actionlib_msgs::GoalStatus::ACTIVE) {
+      (*status_it_).status_.status = actionlib_msgs::GoalStatus::PREEMPTING;
+      as_->publishStatus();
+      return true;
+    }
+  }
+  return false;
+}
+}  // namespace actionlib
+#endif  // ACTIONLIB__SERVER__SERVER_GOAL_HANDLE_IMP_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/server/service_server.h
@@ -0,0 +1,92 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2009, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+#ifndef ACTIONLIB__SERVER__SERVICE_SERVER_H_
+#define ACTIONLIB__SERVER__SERVICE_SERVER_H_
+
+#include <actionlib/action_definition.h>
+#include <actionlib/server/action_server.h>
+
+#include <string>
+
+namespace actionlib
+{
+
+class ServiceServerImp
+{
+public:
+  ServiceServerImp() {}
+  virtual ~ServiceServerImp() {}
+};
+
+class ServiceServer
+{
+public:
+  ServiceServer(boost::shared_ptr<ServiceServerImp> server)
+  : server_(server) {}
+
+private:
+  boost::shared_ptr<ServiceServerImp> server_;
+};
+
+template<class ActionSpec>
+ServiceServer advertiseService(ros::NodeHandle n, std::string name,
+  boost::function<bool(const typename ActionSpec::_action_goal_type::_goal_type &,
+  typename ActionSpec::_action_result_type::_result_type & result)> service_cb);
+
+template<class ActionSpec>
+class ServiceServerImpT : public ServiceServerImp
+{
+public:
+  // generates typedefs that we'll use to make our lives easier
+  ACTION_DEFINITION(ActionSpec)
+
+  typedef typename ActionServer<ActionSpec>::GoalHandle GoalHandle;
+
+  ServiceServerImpT(ros::NodeHandle n, std::string name,
+    boost::function<bool(const Goal &, Result & result)> service_cb);
+  void goalCB(GoalHandle g);
+
+private:
+  boost::shared_ptr<ActionServer<ActionSpec> > as_;
+  boost::function<bool(const Goal &, Result & result)> service_cb_;
+};
+
+}  // namespace actionlib
+
+// include the implementation
+#include <actionlib/server/service_server_imp.h>
+#endif  // ACTIONLIB__SERVER__SERVICE_SERVER_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/server/service_server_imp.h
@@ -0,0 +1,80 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2009, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+#ifndef ACTIONLIB__SERVER__SERVICE_SERVER_IMP_H_
+#define ACTIONLIB__SERVER__SERVICE_SERVER_IMP_H_
+
+#include <string>
+
+namespace actionlib
+{
+
+template<class ActionSpec>
+ServiceServer advertiseService(ros::NodeHandle n, std::string name,
+  boost::function<bool(const typename ActionSpec::_action_goal_type::_goal_type &,
+  typename ActionSpec::_action_result_type::_result_type & result)> service_cb)
+{
+  boost::shared_ptr<ServiceServerImp> server_ptr(new ServiceServerImpT<ActionSpec>(n, name,
+    service_cb));
+  return ServiceServer(server_ptr);
+}
+
+template<class ActionSpec>
+ServiceServerImpT<ActionSpec>::ServiceServerImpT(ros::NodeHandle n, std::string name,
+  boost::function<bool(const Goal &, Result & result)> service_cb)
+: service_cb_(service_cb)
+{
+  as_ = boost::shared_ptr<ActionServer<ActionSpec> >(new ActionServer<ActionSpec>(n, name,
+      boost::bind(&ServiceServerImpT::goalCB, this, _1), false));
+  as_->start();
+}
+
+template<class ActionSpec>
+void ServiceServerImpT<ActionSpec>::goalCB(GoalHandle goal)
+{
+  goal.setAccepted("This goal has been accepted by the service server");
+
+  // we need to pass the result into the users callback
+  Result r;
+  if (service_cb_(*(goal.getGoal()), r)) {
+    goal.setSucceeded(r, "The service server successfully processed the request");
+  } else {
+    goal.setAborted(r, "The service server failed to process the request");
+  }
+}
+
+}  // namespace actionlib
+#endif  // ACTIONLIB__SERVER__SERVICE_SERVER_IMP_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/server/simple_action_server.h
@@ -0,0 +1,257 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+#ifndef ACTIONLIB__SERVER__SIMPLE_ACTION_SERVER_H_
+#define ACTIONLIB__SERVER__SIMPLE_ACTION_SERVER_H_
+
+#include <boost/thread/condition.hpp>
+#include <ros/ros.h>
+#include <actionlib/server/action_server.h>
+#include <actionlib/action_definition.h>
+
+#include <string>
+
+namespace actionlib
+{
+/** @class SimpleActionServer @brief The SimpleActionServer
+ * implements a single goal policy on top of the ActionServer class. The
+ * specification of the policy is as follows: only one goal can have an
+ * active status at a time, new goals preempt previous goals based on the
+ * stamp in their GoalID field (later goals preempt earlier ones), an
+ * explicit preempt goal preempts all goals with timestamps that are less
+ * than or equal to the stamp associated with the preempt, accepting a new
+ * goal implies successful preemption of any old goal and the status of the
+ * old goal will be changed automatically to reflect this.
+ */
+template<class ActionSpec>
+class SimpleActionServer
+{
+public:
+  // generates typedefs that we'll use to make our lives easier
+  ACTION_DEFINITION(ActionSpec)
+
+  typedef typename ActionServer<ActionSpec>::GoalHandle GoalHandle;
+  typedef boost::function<void (const GoalConstPtr &)> ExecuteCallback;
+
+  /**
+   * @brief  Constructor for a SimpleActionServer
+   * @param name A name for the action server
+   * @param execute_callback Optional callback that gets called in a separate thread whenever
+   *                         a new goal is received, allowing users to have blocking callbacks.
+   *                         Adding an execute callback also deactivates the goalCallback.
+   * @param  auto_start A boolean value that tells the ActionServer whether or not to start publishing as soon as it comes up. THIS SHOULD ALWAYS BE SET TO FALSE TO AVOID RACE CONDITIONS and start() should be called after construction of the server.
+   */
+  SimpleActionServer(std::string name, ExecuteCallback execute_callback, bool auto_start);
+
+  /**
+   * @brief  Constructor for a SimpleActionServer
+   * @param name A name for the action server
+   * @param  auto_start A boolean value that tells the ActionServer whether or not to start publishing as soon as it comes up. THIS SHOULD ALWAYS BE SET TO FALSE TO AVOID RACE CONDITIONS and start() should be called after construction of the server.
+   */
+  SimpleActionServer(std::string name, bool auto_start);
+
+  /**
+   * @brief  DEPRECATED: Constructor for a SimpleActionServer
+   * @param name A name for the action server
+   * @param execute_callback Optional callback that gets called in a separate thread whenever
+   *                         a new goal is received, allowing users to have blocking callbacks.
+   *                         Adding an execute callback also deactivates the goalCallback.
+   */
+  ROS_DEPRECATED SimpleActionServer(std::string name, ExecuteCallback execute_callback = NULL);
+
+  /**
+   * @brief  Constructor for a SimpleActionServer
+   * @param n A NodeHandle to create a namespace under
+   * @param name A name for the action server
+   * @param execute_callback Optional callback that gets called in a separate thread whenever
+   *                         a new goal is received, allowing users to have blocking callbacks.
+   *                         Adding an execute callback also deactivates the goalCallback.
+   * @param  auto_start A boolean value that tells the ActionServer whether or not to start publishing as soon as it comes up. THIS SHOULD ALWAYS BE SET TO FALSE TO AVOID RACE CONDITIONS and start() should be called after construction of the server.
+   */
+  SimpleActionServer(ros::NodeHandle n, std::string name, ExecuteCallback execute_callback,
+    bool auto_start);
+
+  /**
+   * @brief  Constructor for a SimpleActionServer
+   * @param n A NodeHandle to create a namespace under
+   * @param name A name for the action server
+   * @param  auto_start A boolean value that tells the ActionServer whether or not to start publishing as soon as it comes up. THIS SHOULD ALWAYS BE SET TO FALSE TO AVOID RACE CONDITIONS and start() should be called after construction of the server.
+   */
+  SimpleActionServer(ros::NodeHandle n, std::string name, bool auto_start);
+
+  /**
+   * @brief  Constructor for a SimpleActionServer
+   * @param n A NodeHandle to create a namespace under
+   * @param name A name for the action server
+   * @param execute_callback Optional callback that gets called in a separate thread whenever
+   *                         a new goal is received, allowing users to have blocking callbacks.
+   *                         Adding an execute callback also deactivates the goalCallback.
+   */
+  ROS_DEPRECATED SimpleActionServer(ros::NodeHandle n, std::string name,
+    ExecuteCallback execute_callback = NULL);
+
+  ~SimpleActionServer();
+
+  /**
+   * @brief  Accepts a new goal when one is available. The status of this
+   * goal is set to active upon acceptance, and the status of any
+   * previously active goal is set to preempted. Preempts received for the
+   * new goal between checking if isNewGoalAvailable or invocation of a
+   * goal callback and the acceptNewGoal call will not trigger a preempt
+   * callback.  This means, isPreemptRequested should be called after
+   * accepting the goal even for callback-based implementations to make
+   * sure the new goal does not have a pending preempt request.
+   * @return A shared_ptr to the new goal.
+   */
+  boost::shared_ptr<const Goal> acceptNewGoal();
+
+  /**
+   * @brief  Allows polling implementations to query about the availability of a new goal
+   * @return True if a new goal is available, false otherwise
+   */
+  bool isNewGoalAvailable();
+
+
+  /**
+   * @brief  Allows polling implementations to query about preempt requests
+   * @return True if a preempt is requested, false otherwise
+   */
+  bool isPreemptRequested();
+
+  /**
+   * @brief  Allows polling implementations to query about the status of the current goal
+   * @return True if a goal is active, false otherwise
+   */
+  bool isActive();
+
+  /**
+   * @brief  Sets the status of the active goal to succeeded
+   * @param  result An optional result to send back to any clients of the goal
+   * @param  result An optional text message to send back to any clients of the goal
+   */
+  void setSucceeded(const Result & result = Result(), const std::string & text = std::string(""));
+
+  /**
+   * @brief  Sets the status of the active goal to aborted
+   * @param  result An optional result to send back to any clients of the goal
+   * @param  result An optional text message to send back to any clients of the goal
+   */
+  void setAborted(const Result & result = Result(), const std::string & text = std::string(""));
+
+
+  /**
+  * @brief  Publishes feedback for a given goal
+  * @param  feedback Shared pointer to the feedback to publish
+  */
+  void publishFeedback(const FeedbackConstPtr & feedback);
+
+  /**
+  * @brief  Publishes feedback for a given goal
+  * @param  feedback The feedback to publish
+  */
+  void publishFeedback(const Feedback & feedback);
+
+  /**
+   * @brief  Sets the status of the active goal to preempted
+   * @param  result An optional result to send back to any clients of the goal
+   * @param  result An optional text message to send back to any clients of the goal
+   */
+  void setPreempted(const Result & result = Result(), const std::string & text = std::string(""));
+
+  /**
+   * @brief  Allows users to register a callback to be invoked when a new goal is available
+   * @param cb The callback to be invoked
+   */
+  void registerGoalCallback(boost::function<void()> cb);
+
+  /**
+   * @brief  Allows users to register a callback to be invoked when a new preempt request is available
+   * @param cb The callback to be invoked
+   */
+  void registerPreemptCallback(boost::function<void()> cb);
+
+  /**
+   * @brief  Explicitly start the action server, used it auto_start is set to false
+   */
+  void start();
+
+  /**
+   * @brief  Explicitly shutdown the action server
+   */
+  void shutdown();
+
+private:
+  /**
+   * @brief  Callback for when the ActionServer receives a new goal and passes it on
+   */
+  void goalCallback(GoalHandle goal);
+
+  /**
+   * @brief  Callback for when the ActionServer receives a new preempt and passes it on
+   */
+  void preemptCallback(GoalHandle preempt);
+
+  /**
+   * @brief  Called from a separate thread to call blocking execute calls
+   */
+  void executeLoop();
+
+  ros::NodeHandle n_;
+
+  boost::shared_ptr<ActionServer<ActionSpec> > as_;
+
+  GoalHandle current_goal_, next_goal_;
+
+  bool new_goal_, preempt_request_, new_goal_preempt_request_;
+
+  boost::recursive_mutex lock_;
+
+  boost::function<void()> goal_callback_;
+  boost::function<void()> preempt_callback_;
+  ExecuteCallback execute_callback_;
+
+  boost::condition execute_condition_;
+  boost::thread * execute_thread_;
+
+  boost::mutex terminate_mutex_;
+  bool need_to_terminate_;
+};
+
+}  // namespace actionlib
+
+// include the implementation here
+#include <actionlib/server/simple_action_server_imp.h>
+#endif  // ACTIONLIB__SERVER__SIMPLE_ACTION_SERVER_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/server/simple_action_server_imp.h
@@ -0,0 +1,411 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+#ifndef ACTIONLIB__SERVER__SIMPLE_ACTION_SERVER_IMP_H_
+#define ACTIONLIB__SERVER__SIMPLE_ACTION_SERVER_IMP_H_
+
+#include <ros/ros.h>
+#include <string>
+
+namespace actionlib
+{
+
+template<class ActionSpec>
+SimpleActionServer<ActionSpec>::SimpleActionServer(std::string name,
+  ExecuteCallback execute_callback,
+  bool auto_start)
+: new_goal_(false), preempt_request_(false), new_goal_preempt_request_(false), execute_callback_(
+    execute_callback), execute_thread_(nullptr), need_to_terminate_(false)
+{
+  if (execute_callback_) {
+    execute_thread_ = new boost::thread(boost::bind(&SimpleActionServer::executeLoop, this));
+  }
+
+  // create the action server
+  as_ = boost::shared_ptr<ActionServer<ActionSpec> >(new ActionServer<ActionSpec>(n_, name,
+      boost::bind(&SimpleActionServer::goalCallback, this, _1),
+      boost::bind(&SimpleActionServer::preemptCallback, this, _1),
+      auto_start));
+}
+
+template<class ActionSpec>
+SimpleActionServer<ActionSpec>::SimpleActionServer(std::string name, bool auto_start)
+: new_goal_(false), preempt_request_(false), new_goal_preempt_request_(false), execute_callback_(
+    NULL), execute_thread_(nullptr), need_to_terminate_(false)
+{
+  // create the action server
+  as_ = boost::shared_ptr<ActionServer<ActionSpec> >(new ActionServer<ActionSpec>(n_, name,
+      boost::bind(&SimpleActionServer::goalCallback, this, _1),
+      boost::bind(&SimpleActionServer::preemptCallback, this, _1),
+      auto_start));
+
+  if (execute_callback_) {
+    execute_thread_ = new boost::thread(boost::bind(&SimpleActionServer::executeLoop, this));
+  }
+}
+
+template<class ActionSpec>
+SimpleActionServer<ActionSpec>::SimpleActionServer(std::string name,
+  ExecuteCallback execute_callback)
+: new_goal_(false), preempt_request_(false), new_goal_preempt_request_(false), execute_callback_(
+    execute_callback), execute_thread_(nullptr), need_to_terminate_(false)
+{
+  // create the action server
+  as_ = boost::shared_ptr<ActionServer<ActionSpec> >(new ActionServer<ActionSpec>(n_, name,
+      boost::bind(&SimpleActionServer::goalCallback, this, _1),
+      boost::bind(&SimpleActionServer::preemptCallback, this, _1),
+      true));
+
+  if (execute_callback_) {
+    execute_thread_ = new boost::thread(boost::bind(&SimpleActionServer::executeLoop, this));
+  }
+}
+
+
+template<class ActionSpec>
+SimpleActionServer<ActionSpec>::SimpleActionServer(ros::NodeHandle n, std::string name,
+  ExecuteCallback execute_callback,
+  bool auto_start)
+: n_(n), new_goal_(false), preempt_request_(false), new_goal_preempt_request_(false),
+  execute_callback_(execute_callback), execute_thread_(nullptr), need_to_terminate_(false)
+{
+  // create the action server
+  as_ = boost::shared_ptr<ActionServer<ActionSpec> >(new ActionServer<ActionSpec>(n, name,
+      boost::bind(&SimpleActionServer::goalCallback, this, _1),
+      boost::bind(&SimpleActionServer::preemptCallback, this, _1),
+      auto_start));
+
+  if (execute_callback_) {
+    execute_thread_ = new boost::thread(boost::bind(&SimpleActionServer::executeLoop, this));
+  }
+}
+
+template<class ActionSpec>
+SimpleActionServer<ActionSpec>::SimpleActionServer(ros::NodeHandle n, std::string name,
+  bool auto_start)
+: n_(n), new_goal_(false), preempt_request_(false), new_goal_preempt_request_(false),
+  execute_callback_(NULL), execute_thread_(nullptr), need_to_terminate_(false)
+{
+  // create the action server
+  as_ = boost::shared_ptr<ActionServer<ActionSpec> >(new ActionServer<ActionSpec>(n, name,
+      boost::bind(&SimpleActionServer::goalCallback, this, _1),
+      boost::bind(&SimpleActionServer::preemptCallback, this, _1),
+      auto_start));
+
+  if (execute_callback_) {
+    execute_thread_ = new boost::thread(boost::bind(&SimpleActionServer::executeLoop, this));
+  }
+}
+
+template<class ActionSpec>
+SimpleActionServer<ActionSpec>::SimpleActionServer(ros::NodeHandle n, std::string name,
+  ExecuteCallback execute_callback)
+: n_(n), new_goal_(false), preempt_request_(false), new_goal_preempt_request_(false),
+  execute_callback_(execute_callback), execute_thread_(nullptr), need_to_terminate_(false)
+{
+  // create the action server
+  as_ = boost::shared_ptr<ActionServer<ActionSpec> >(new ActionServer<ActionSpec>(n, name,
+      boost::bind(&SimpleActionServer::goalCallback, this, _1),
+      boost::bind(&SimpleActionServer::preemptCallback, this, _1),
+      true));
+
+  if (execute_callback_) {
+    execute_thread_ = new boost::thread(boost::bind(&SimpleActionServer::executeLoop, this));
+  }
+}
+
+template<class ActionSpec>
+SimpleActionServer<ActionSpec>::~SimpleActionServer()
+{
+  if (execute_thread_) {
+    shutdown();
+  }
+}
+
+template<class ActionSpec>
+void SimpleActionServer<ActionSpec>::shutdown()
+{
+  if (execute_callback_) {
+    {
+      boost::mutex::scoped_lock terminate_lock(terminate_mutex_);
+      need_to_terminate_ = true;
+    }
+
+    assert(execute_thread_);
+    if (execute_thread_) {
+      execute_thread_->join();
+      delete execute_thread_;
+      execute_thread_ = nullptr;
+    }
+  }
+}
+
+template<class ActionSpec>
+boost::shared_ptr<const typename SimpleActionServer<ActionSpec>::Goal> SimpleActionServer<ActionSpec>
+::acceptNewGoal()
+{
+  boost::recursive_mutex::scoped_lock lock(lock_);
+
+  if (!new_goal_ || !next_goal_.getGoal()) {
+    ROS_ERROR_NAMED("actionlib",
+      "Attempting to accept the next goal when a new goal is not available");
+    return boost::shared_ptr<const Goal>();
+  }
+
+  // check if we need to send a preempted message for the goal that we're currently pursuing
+  if (isActive() &&
+    current_goal_.getGoal() &&
+    current_goal_ != next_goal_)
+  {
+    current_goal_.setCanceled(
+      Result(),
+      "This goal was canceled because another goal was recieved by the simple action server");
+  }
+
+  ROS_DEBUG_NAMED("actionlib", "Accepting a new goal");
+
+  // accept the next goal
+  current_goal_ = next_goal_;
+  new_goal_ = false;
+
+  // set preempt to request to equal the preempt state of the new goal
+  preempt_request_ = new_goal_preempt_request_;
+  new_goal_preempt_request_ = false;
+
+  // set the status of the current goal to be active
+  current_goal_.setAccepted("This goal has been accepted by the simple action server");
+
+  return current_goal_.getGoal();
+}
+
+template<class ActionSpec>
+bool SimpleActionServer<ActionSpec>::isNewGoalAvailable()
+{
+  return new_goal_;
+}
+
+
+template<class ActionSpec>
+bool SimpleActionServer<ActionSpec>::isPreemptRequested()
+{
+  return preempt_request_;
+}
+
+template<class ActionSpec>
+bool SimpleActionServer<ActionSpec>::isActive()
+{
+  if (!current_goal_.getGoal()) {
+    return false;
+  }
+  unsigned int status = current_goal_.getGoalStatus().status;
+  return status == actionlib_msgs::GoalStatus::ACTIVE ||
+         status == actionlib_msgs::GoalStatus::PREEMPTING;
+}
+
+template<class ActionSpec>
+void SimpleActionServer<ActionSpec>::setSucceeded(const Result & result, const std::string & text)
+{
+  boost::recursive_mutex::scoped_lock lock(lock_);
+  ROS_DEBUG_NAMED("actionlib", "Setting the current goal as succeeded");
+  current_goal_.setSucceeded(result, text);
+}
+
+template<class ActionSpec>
+void SimpleActionServer<ActionSpec>::setAborted(const Result & result, const std::string & text)
+{
+  boost::recursive_mutex::scoped_lock lock(lock_);
+  ROS_DEBUG_NAMED("actionlib", "Setting the current goal as aborted");
+  current_goal_.setAborted(result, text);
+}
+
+template<class ActionSpec>
+void SimpleActionServer<ActionSpec>::setPreempted(const Result & result, const std::string & text)
+{
+  boost::recursive_mutex::scoped_lock lock(lock_);
+  ROS_DEBUG_NAMED("actionlib", "Setting the current goal as canceled");
+  current_goal_.setCanceled(result, text);
+}
+
+template<class ActionSpec>
+void SimpleActionServer<ActionSpec>::registerGoalCallback(boost::function<void()> cb)
+{
+  // Cannot register a goal callback if an execute callback exists
+  if (execute_callback_) {
+    ROS_WARN_NAMED("actionlib",
+      "Cannot call SimpleActionServer::registerGoalCallback() because an executeCallback exists. Not going to register it.");
+  } else {
+    goal_callback_ = cb;
+  }
+}
+
+template<class ActionSpec>
+void SimpleActionServer<ActionSpec>::registerPreemptCallback(boost::function<void()> cb)
+{
+  preempt_callback_ = cb;
+}
+
+template<class ActionSpec>
+void SimpleActionServer<ActionSpec>::publishFeedback(const FeedbackConstPtr & feedback)
+{
+  current_goal_.publishFeedback(*feedback);
+}
+
+template<class ActionSpec>
+void SimpleActionServer<ActionSpec>::publishFeedback(const Feedback & feedback)
+{
+  current_goal_.publishFeedback(feedback);
+}
+
+template<class ActionSpec>
+void SimpleActionServer<ActionSpec>::goalCallback(GoalHandle goal)
+{
+  boost::recursive_mutex::scoped_lock lock(lock_);
+  ROS_DEBUG_NAMED("actionlib", "A new goal has been recieved by the single goal action server");
+
+  // check that the timestamp is past or equal to that of the current goal and the next goal
+  if ((!current_goal_.getGoal() || goal.getGoalID().stamp >= current_goal_.getGoalID().stamp) &&
+    (!next_goal_.getGoal() || goal.getGoalID().stamp >= next_goal_.getGoalID().stamp))
+  {
+    // if next_goal has not been accepted already... its going to get bumped, but we need to let the client know we're preempting
+    if (next_goal_.getGoal() && (!current_goal_.getGoal() || next_goal_ != current_goal_)) {
+      next_goal_.setCanceled(
+        Result(),
+        "This goal was canceled because another goal was recieved by the simple action server");
+    }
+
+    next_goal_ = goal;
+    new_goal_ = true;
+    new_goal_preempt_request_ = false;
+
+    // if the server is active, we'll want to call the preempt callback for the current goal
+    if (isActive()) {
+      preempt_request_ = true;
+      // if the user has registered a preempt callback, we'll call it now
+      if (preempt_callback_) {
+        preempt_callback_();
+      }
+    }
+
+    // if the user has defined a goal callback, we'll call it now
+    if (goal_callback_) {
+      goal_callback_();
+    }
+
+    // Trigger runLoop to call execute()
+    execute_condition_.notify_all();
+  } else {
+    // the goal requested has already been preempted by a different goal, so we're not going to execute it
+    goal.setCanceled(
+      Result(),
+      "This goal was canceled because another goal was recieved by the simple action server");
+  }
+}
+
+template<class ActionSpec>
+void SimpleActionServer<ActionSpec>::preemptCallback(GoalHandle preempt)
+{
+  boost::recursive_mutex::scoped_lock lock(lock_);
+  ROS_DEBUG_NAMED("actionlib", "A preempt has been received by the SimpleActionServer");
+
+  // if the preempt is for the current goal, then we'll set the preemptRequest flag and call the user's preempt callback
+  if (preempt == current_goal_) {
+    ROS_DEBUG_NAMED("actionlib",
+      "Setting preempt_request bit for the current goal to TRUE and invoking callback");
+    preempt_request_ = true;
+
+    // if the user has registered a preempt callback, we'll call it now
+    if (preempt_callback_) {
+      preempt_callback_();
+    }
+  } else if (preempt == next_goal_) {
+    // if the preempt applies to the next goal, we'll set the preempt bit for that
+    ROS_DEBUG_NAMED("actionlib", "Setting preempt request bit for the next goal to TRUE");
+    new_goal_preempt_request_ = true;
+  }
+}
+
+template<class ActionSpec>
+void SimpleActionServer<ActionSpec>::executeLoop()
+{
+  ros::Duration loop_duration = ros::Duration().fromSec(.1);
+
+  while (n_.ok()) {
+    {
+      boost::mutex::scoped_lock terminate_lock(terminate_mutex_);
+      if (need_to_terminate_) {
+        break;
+      }
+    }
+
+    boost::recursive_mutex::scoped_lock lock(lock_);
+    if (isActive()) {
+      ROS_ERROR_NAMED("actionlib", "Should never reach this code with an active goal");
+    } else if (isNewGoalAvailable()) {
+      GoalConstPtr goal = acceptNewGoal();
+
+      ROS_FATAL_COND(!execute_callback_,
+        "execute_callback_ must exist. This is a bug in SimpleActionServer");
+
+      {
+        // Make sure we're not locked when we call execute
+        boost::reverse_lock<boost::recursive_mutex::scoped_lock> unlocker(lock);
+        execute_callback_(goal);
+      }
+
+      if (isActive()) {
+        ROS_WARN_NAMED("actionlib", "Your executeCallback did not set the goal to a terminal status.\n"
+          "This is a bug in your ActionServer implementation. Fix your code!\n"
+          "For now, the ActionServer will set this goal to aborted");
+        setAborted(
+          Result(),
+          "This goal was aborted by the simple action server. The user should have set a terminal status on this goal and did not");
+      }
+    } else {
+      execute_condition_.timed_wait(lock,
+        boost::posix_time::milliseconds(static_cast<int64_t>(loop_duration.toSec() * 1000.0f)));
+    }
+  }
+}
+
+template<class ActionSpec>
+void SimpleActionServer<ActionSpec>::start()
+{
+  as_->start();
+}
+
+}  // namespace actionlib
+
+#endif  // ACTIONLIB__SERVER__SIMPLE_ACTION_SERVER_IMP_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/server/status_tracker.h
@@ -0,0 +1,78 @@
+/*********************************************************************
+ *
+ * Software License Agreement (BSD License)
+ *
+ *  Copyright (c) 2008, Willow Garage, Inc.
+ *  All rights reserved.
+ *
+ *  Redistribution and use in source and binary forms, with or without
+ *  modification, are permitted provided that the following conditions
+ *  are met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/or other materials provided
+ *     with the distribution.
+ *   * Neither the name of Willow Garage, Inc. nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ *  POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Author: Eitan Marder-Eppstein
+ *********************************************************************/
+#ifndef ACTIONLIB__SERVER__STATUS_TRACKER_H_
+#define ACTIONLIB__SERVER__STATUS_TRACKER_H_
+
+#include <actionlib_msgs/GoalID.h>
+#include <actionlib_msgs/GoalStatus.h>
+#include <actionlib/action_definition.h>
+
+#include <actionlib/goal_id_generator.h>
+
+namespace actionlib
+{
+
+/**
+ * @class StatusTracker
+ * @brief A class for storing the status of each goal the action server
+ * is currently working on
+ */
+template<class ActionSpec>
+class StatusTracker
+{
+private:
+  // generates typedefs that we'll use to make our lives easier
+  ACTION_DEFINITION(ActionSpec)
+
+public:
+  StatusTracker(const actionlib_msgs::GoalID & goal_id, unsigned int status);
+
+  StatusTracker(const boost::shared_ptr<const ActionGoal> & goal);
+
+  boost::shared_ptr<const ActionGoal> goal_;
+  boost::weak_ptr<void> handle_tracker_;
+  actionlib_msgs::GoalStatus status_;
+  ros::Time handle_destruction_time_;
+
+private:
+  GoalIDGenerator id_generator_;
+};
+}  // namespace actionlib
+
+// include the implementation
+#include <actionlib/server/status_tracker_imp.h>
+#endif  // ACTIONLIB__SERVER__STATUS_TRACKER_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/include/actionlib/server/status_tracker_imp.h
@@ -0,0 +1,71 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+#ifndef ACTIONLIB__SERVER__STATUS_TRACKER_IMP_H_
+#define ACTIONLIB__SERVER__STATUS_TRACKER_IMP_H_
+namespace actionlib
+{
+template<class ActionSpec>
+StatusTracker<ActionSpec>::StatusTracker(const actionlib_msgs::GoalID & goal_id,
+  unsigned int status)
+{
+  // set the goal id and status appropriately
+  status_.goal_id = goal_id;
+  status_.status = status;
+}
+
+template<class ActionSpec>
+StatusTracker<ActionSpec>::StatusTracker(const boost::shared_ptr<const ActionGoal> & goal)
+: goal_(goal)
+{
+  // set the goal_id from the message
+  status_.goal_id = goal_->goal_id;
+
+  // initialize the status of the goal to pending
+  status_.status = actionlib_msgs::GoalStatus::PENDING;
+
+  // if the goal id is zero, then we need to make up an id for the goal
+  if (status_.goal_id.id == "") {
+    status_.goal_id = id_generator_.generateID();
+  }
+
+  // if the timestamp of the goal is zero, then we'll set it to now()
+  if (status_.goal_id.stamp == ros::Time()) {
+    status_.goal_id.stamp = ros::Time::now();
+  }
+}
+}  // namespace actionlib
+#endif  // ACTIONLIB__SERVER__STATUS_TRACKER_IMP_H_
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/mainpage.dox
@@ -0,0 +1,26 @@
+/**
+\mainpage
+\htmlinclude manifest.html
+
+\section ActionClientAPI ActionClient Code API
+- \link actionlib::SimpleActionClient SimpleActionClient (C++) \endlink
+- \link actionlib::simple_action_client::SimpleActionClient SimpleActionClient (Python) \endlink
+
+\section ActionServerAPI ActionServer Code API
+- actionlib::SimpleActionServer
+- \link actionlib::simple_action_server::SimpleActionServer SimpleActionServer (Python) \endlink
+
+\section protocol Communication Protocol
+The values for the status of a goal are as follows:
+- \b PENDING - The goal has yet to be processed by the action server
+- \b ACTIVE - The goal is currently being processed by the action server
+- \b REJECTED - The goal was rejected by the action server without being processed and without a request from the action client to cancel
+- \b SUCCEEDED - The goal was achieved successfully by the action server
+- \b ABORTED - The goal was aborted by the action server
+- \b PREEMPTING - Processing of the goal was canceled by either another goal, or a cancel request sent to the action server
+- \b PREEMPTED - The goal was preempted by either another goal, or a preempt message being sent to the action server
+- \b RECALLING - The goal has not been processed and a cancel request has been received from the action client, but the action server has not confirmed the goal is canceled
+- \b RECALLED - The goal was canceled by either another goal, or a cancel request before the action server began processing the goal
+- \b LOST - The goal was sent by the ActionClient, but disappeared due to some communication error
+
+*/
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/package.xml
@@ -0,0 +1,39 @@
+<?xml version="1.0"?>
+<?xml-model href="http://download.ros.org/schema/package_format2.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
+<package format="2">
+  <name>actionlib</name>
+  <version>1.14.0</version>
+  <description>
+    The actionlib stack provides a standardized interface for
+    interfacing with preemptable tasks. Examples of this include moving
+    the base to a target location, performing a laser scan and returning
+    the resulting point cloud, detecting the handle of a door, etc.
+  </description>
+  <maintainer email="michael@openrobotics.org">Michael Carroll</maintainer>
+  <maintainer email="jacob@openrobotics.org">Jacob Perron</maintainer>
+  <license>BSD</license>
+
+  <url type="website">http://www.ros.org/wiki/actionlib</url>
+  <url type="bugtracker">https://github.com/ros/actionlib/issues</url>
+  <url type="repository">https://github.com/ros/actionlib</url>
+  <author>Eitan Marder-Eppstein</author>
+  <author>Vijay Pradeep</author>
+  <author>Mikael Arguedas</author>
+
+  <buildtool_depend version_gte="0.5.78">catkin</buildtool_depend>
+
+  <build_depend>message_generation</build_depend>
+
+  <depend>actionlib_msgs</depend>
+  <depend>libboost-dev</depend>
+  <depend>libboost-thread-dev</depend>
+  <depend>roscpp</depend>
+  <depend>rospy</depend>
+  <depend>rostest</depend>
+  <depend>std_msgs</depend>
+
+  <exec_depend>message_runtime</exec_depend>
+
+  <test_depend>rosnode</test_depend>
+  <test_depend>rosunit</test_depend>
+</package>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/setup.py
@@ -0,0 +1,11 @@
+#!/usr/bin/env python
+
+from setuptools import setup
+from catkin_pkg.python_setup import generate_distutils_setup
+
+d = generate_distutils_setup(
+    packages=['actionlib'],
+    package_dir={'': 'src'}
+)
+
+setup(**d)
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/src/actionlib/__init__.py
@@ -0,0 +1,31 @@
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+from actionlib.action_client import *
+from actionlib.simple_action_client import *
+from actionlib.action_server import *
+from actionlib.simple_action_server import *
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/src/actionlib/action_client.py
@@ -0,0 +1,642 @@
+#! /usr/bin/env python
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+# Author: Stuart Glaser
+'''
+Example:
+
+from move_base.msg import *
+rospy.init_node('foo')
+
+
+from move_base.msg import *
+from geometry_msgs.msg import *
+g1 = MoveBaseGoal(PoseStamped(Header(frame_id = 'base_link'),
+                              Pose(Point(2, 0, 0),
+                                   Quaternion(0, 0, 0, 1))))
+g2 = MoveBaseGoal(PoseStamped(Header(frame_id = 'base_link'),
+                              Pose(Point(5, 0, 0),
+                                   Quaternion(0, 0, 0, 1))))
+
+client = ActionClient('move_base', MoveBaseAction)
+
+h1 = client.send_goal(g1)
+h2 = client.send_goal(g2)
+client.cancel_all_goals()
+'''
+
+import threading
+import weakref
+import time
+import rospy
+from rospy import Header
+from actionlib_msgs.msg import GoalID, GoalStatus, GoalStatusArray
+from actionlib.exceptions import ActionException
+
+g_goal_id = 1
+
+
+def get_name_of_constant(C, n):
+    for k, v in C.__dict__.items():
+        if isinstance(v, int) and v == n:
+            return k
+    return "NO_SUCH_STATE_%d" % n
+
+
+class CommState(object):
+    WAITING_FOR_GOAL_ACK = 0
+    PENDING = 1
+    ACTIVE = 2
+    WAITING_FOR_RESULT = 3
+    WAITING_FOR_CANCEL_ACK = 4
+    RECALLING = 5
+    PREEMPTING = 6
+    DONE = 7
+    LOST = 8
+
+
+class TerminalState(object):
+    RECALLED = GoalStatus.RECALLED
+    REJECTED = GoalStatus.REJECTED
+    PREEMPTED = GoalStatus.PREEMPTED
+    ABORTED = GoalStatus.ABORTED
+    SUCCEEDED = GoalStatus.SUCCEEDED
+    LOST = GoalStatus.LOST
+
+
+GoalStatus.to_string = classmethod(get_name_of_constant)
+CommState.to_string = classmethod(get_name_of_constant)
+TerminalState.to_string = classmethod(get_name_of_constant)
+
+
+def _find_status_by_goal_id(status_array, id):
+    for s in status_array.status_list:
+        if s.goal_id.id == id:
+            return s
+    return None
+
+
+## @brief Client side handle to monitor goal progress.
+##
+## A ClientGoalHandle is a reference counted object that is used to
+## manipulate and monitor the progress of an already dispatched
+## goal. Once all the goal handles go out of scope (or are reset), an
+## ActionClient stops maintaining state for that goal.
+class ClientGoalHandle:
+    ## @brief Internal use only
+    ##
+    ## ClientGoalHandle objects should be created by the action
+    ## client.  You should never need to construct one yourself.
+    def __init__(self, comm_state_machine):
+        self.comm_state_machine = comm_state_machine
+
+        # print "GH created.  id = %.3f" % self.comm_state_machine.action_goal.goal_id.stamp.to_sec()
+
+    ## @brief True iff the two ClientGoalHandle's are tracking the same goal
+    def __eq__(self, o):
+        if not o:
+            return False
+        return self.comm_state_machine == o.comm_state_machine
+
+    ## @brief True iff the two ClientGoalHandle's are tracking different goals
+    def __ne__(self, o):
+        if not o:
+            return True
+        return not (self.comm_state_machine == o.comm_state_machine)
+
+    ## @brieft Hash function for ClientGoalHandle
+    def __hash__(self):
+        return hash(self.comm_state_machine)
+
+    ## @brief Sends a cancel message for this specific goal to the ActionServer.
+    ##
+    ## Also transitions the client state to WAITING_FOR_CANCEL_ACK
+    def cancel(self):
+        with self.comm_state_machine.mutex:
+            cancel_msg = GoalID(stamp=rospy.Time(0),
+                                id=self.comm_state_machine.action_goal.goal_id.id)
+            self.comm_state_machine.send_cancel_fn(cancel_msg)
+            self.comm_state_machine.transition_to(CommState.WAITING_FOR_CANCEL_ACK)
+
+    ## @brief Get the state of this goal's communication state machine from interaction with the server
+    ##
+    ## Possible States are: WAITING_FOR_GOAL_ACK, PENDING, ACTIVE, WAITING_FOR_RESULT,
+    ##                      WAITING_FOR_CANCEL_ACK, RECALLING, PREEMPTING, DONE
+    ##
+    ## @return The current goal's communication state with the server
+    def get_comm_state(self):
+        if not self.comm_state_machine:
+            rospy.logerr("Trying to get_comm_state on an inactive ClientGoalHandle.")
+            return CommState.LOST
+        return self.comm_state_machine.state
+
+    ## @brief Returns the current status of the goal.
+    ##
+    ## Possible states are listed in the enumeration in the
+    ## actionlib_msgs/GoalStatus message.
+    ##
+    ## @return The current status of the goal.
+    def get_goal_status(self):
+        if not self.comm_state_machine:
+            rospy.logerr("Trying to get_goal_status on an inactive ClientGoalHandle.")
+            return GoalStatus.PENDING
+        return self.comm_state_machine.latest_goal_status.status
+
+    ## @brief Returns the current status text of the goal.
+    ##
+    ## The text is sent by the action server.
+    ##
+    ## @return The current status text of the goal.
+    def get_goal_status_text(self):
+        if not self.comm_state_machine:
+            rospy.logerr("Trying to get_goal_status_text on an inactive ClientGoalHandle.")
+            return "ERROR: Trying to get_goal_status_text on an inactive ClientGoalHandle."
+        return self.comm_state_machine.latest_goal_status.text
+
+    ## @brief Gets the result produced by the action server for this goal.
+    ##
+    ## @return None if no result was receieved.  Otherwise the goal's result as a *Result message.
+    def get_result(self):
+        if not self.comm_state_machine:
+            rospy.logerr("Trying to get_result on an inactive ClientGoalHandle.")
+            return None
+        if not self.comm_state_machine.latest_result:
+            # rospy.logerr("Trying to get_result on a ClientGoalHandle when no result has been received.")
+            return None
+        return self.comm_state_machine.latest_result.result
+
+    ## @brief Gets the terminal state information for this goal.
+    ##
+    ## Possible States Are: RECALLED, REJECTED, PREEMPTED, ABORTED, SUCCEEDED, LOST
+    ## This call only makes sense if CommState==DONE. This will send ROS_WARNs if we're not in DONE
+    ##
+    ## @return The terminal state as an integer from the GoalStatus message.
+    def get_terminal_state(self):
+        if not self.comm_state_machine:
+            rospy.logerr("Trying to get_terminal_state on an inactive ClientGoalHandle.")
+            return GoalStatus.LOST
+
+        with self.comm_state_machine.mutex:
+            if self.comm_state_machine.state != CommState.DONE:
+                rospy.logwarn("Asking for the terminal state when we're in [%s]",
+                              CommState.to_string(self.comm_state_machine.state))
+
+            goal_status = self.comm_state_machine.latest_goal_status.status
+            if goal_status in [GoalStatus.PREEMPTED, GoalStatus.SUCCEEDED,
+                               GoalStatus.ABORTED, GoalStatus.REJECTED,
+                               GoalStatus.RECALLED, GoalStatus.LOST]:
+                return goal_status
+
+            rospy.logerr("Asking for a terminal state, but the goal status is %d", goal_status)
+            return GoalStatus.LOST
+
+
+NO_TRANSITION = -1
+INVALID_TRANSITION = -2
+_transitions = {
+    CommState.WAITING_FOR_GOAL_ACK: {
+        GoalStatus.PENDING:    CommState.PENDING,
+        GoalStatus.ACTIVE:     CommState.ACTIVE,
+        GoalStatus.REJECTED:   (CommState.PENDING, CommState.WAITING_FOR_RESULT),
+        GoalStatus.RECALLING:  (CommState.PENDING, CommState.RECALLING),
+        GoalStatus.RECALLED:   (CommState.PENDING, CommState.WAITING_FOR_RESULT),
+        GoalStatus.PREEMPTED:  (CommState.ACTIVE, CommState.PREEMPTING, CommState.WAITING_FOR_RESULT),
+        GoalStatus.SUCCEEDED:  (CommState.ACTIVE, CommState.WAITING_FOR_RESULT),
+        GoalStatus.ABORTED:    (CommState.ACTIVE, CommState.WAITING_FOR_RESULT),
+        GoalStatus.PREEMPTING: (CommState.ACTIVE, CommState.PREEMPTING)},
+    CommState.PENDING: {
+        GoalStatus.PENDING:    NO_TRANSITION,
+        GoalStatus.ACTIVE:     CommState.ACTIVE,
+        GoalStatus.REJECTED:   CommState.WAITING_FOR_RESULT,
+        GoalStatus.RECALLING:  CommState.RECALLING,
+        GoalStatus.RECALLED:   (CommState.RECALLING, CommState.WAITING_FOR_RESULT),
+        GoalStatus.PREEMPTED:  (CommState.ACTIVE, CommState.PREEMPTING, CommState.WAITING_FOR_RESULT),
+        GoalStatus.SUCCEEDED:  (CommState.ACTIVE, CommState.WAITING_FOR_RESULT),
+        GoalStatus.ABORTED:    (CommState.ACTIVE, CommState.WAITING_FOR_RESULT),
+        GoalStatus.PREEMPTING: (CommState.ACTIVE, CommState.PREEMPTING)},
+    CommState.ACTIVE: {
+        GoalStatus.PENDING:    INVALID_TRANSITION,
+        GoalStatus.ACTIVE:     NO_TRANSITION,
+        GoalStatus.REJECTED:   INVALID_TRANSITION,
+        GoalStatus.RECALLING:  INVALID_TRANSITION,
+        GoalStatus.RECALLED:   INVALID_TRANSITION,
+        GoalStatus.PREEMPTED:  (CommState.PREEMPTING, CommState.WAITING_FOR_RESULT),
+        GoalStatus.SUCCEEDED:  CommState.WAITING_FOR_RESULT,
+        GoalStatus.ABORTED:    CommState.WAITING_FOR_RESULT,
+        GoalStatus.PREEMPTING: CommState.PREEMPTING},
+    CommState.WAITING_FOR_RESULT: {
+        GoalStatus.PENDING:    INVALID_TRANSITION,
+        GoalStatus.ACTIVE:     NO_TRANSITION,
+        GoalStatus.REJECTED:   NO_TRANSITION,
+        GoalStatus.RECALLING:  INVALID_TRANSITION,
+        GoalStatus.RECALLED:   NO_TRANSITION,
+        GoalStatus.PREEMPTED:  NO_TRANSITION,
+        GoalStatus.SUCCEEDED:  NO_TRANSITION,
+        GoalStatus.ABORTED:    NO_TRANSITION,
+        GoalStatus.PREEMPTING: INVALID_TRANSITION},
+    CommState.WAITING_FOR_CANCEL_ACK: {
+        GoalStatus.PENDING:    NO_TRANSITION,
+        GoalStatus.ACTIVE:     NO_TRANSITION,
+        GoalStatus.REJECTED:   CommState.WAITING_FOR_RESULT,
+        GoalStatus.RECALLING:  CommState.RECALLING,
+        GoalStatus.RECALLED:   (CommState.RECALLING, CommState.WAITING_FOR_RESULT),
+        GoalStatus.PREEMPTED:  (CommState.PREEMPTING, CommState.WAITING_FOR_RESULT),
+        GoalStatus.SUCCEEDED:  (CommState.PREEMPTING, CommState.WAITING_FOR_RESULT),
+        GoalStatus.ABORTED:    (CommState.PREEMPTING, CommState.WAITING_FOR_RESULT),
+        GoalStatus.PREEMPTING: CommState.PREEMPTING},
+    CommState.RECALLING: {
+        GoalStatus.PENDING:    INVALID_TRANSITION,
+        GoalStatus.ACTIVE:     INVALID_TRANSITION,
+        GoalStatus.REJECTED:   CommState.WAITING_FOR_RESULT,
+        GoalStatus.RECALLING:  NO_TRANSITION,
+        GoalStatus.RECALLED:   CommState.WAITING_FOR_RESULT,
+        GoalStatus.PREEMPTED:  (CommState.PREEMPTING, CommState.WAITING_FOR_RESULT),
+        GoalStatus.SUCCEEDED:  (CommState.PREEMPTING, CommState.WAITING_FOR_RESULT),
+        GoalStatus.ABORTED:    (CommState.PREEMPTING, CommState.WAITING_FOR_RESULT),
+        GoalStatus.PREEMPTING: CommState.PREEMPTING},
+    CommState.PREEMPTING: {
+        GoalStatus.PENDING:    INVALID_TRANSITION,
+        GoalStatus.ACTIVE:     INVALID_TRANSITION,
+        GoalStatus.REJECTED:   INVALID_TRANSITION,
+        GoalStatus.RECALLING:  INVALID_TRANSITION,
+        GoalStatus.RECALLED:   INVALID_TRANSITION,
+        GoalStatus.PREEMPTED:  CommState.WAITING_FOR_RESULT,
+        GoalStatus.SUCCEEDED:  CommState.WAITING_FOR_RESULT,
+        GoalStatus.ABORTED:    CommState.WAITING_FOR_RESULT,
+        GoalStatus.PREEMPTING: NO_TRANSITION},
+    CommState.DONE: {
+        GoalStatus.PENDING:    INVALID_TRANSITION,
+        GoalStatus.ACTIVE:     INVALID_TRANSITION,
+        GoalStatus.REJECTED:   NO_TRANSITION,
+        GoalStatus.RECALLING:  INVALID_TRANSITION,
+        GoalStatus.RECALLED:   NO_TRANSITION,
+        GoalStatus.PREEMPTED:  NO_TRANSITION,
+        GoalStatus.SUCCEEDED:  NO_TRANSITION,
+        GoalStatus.ABORTED:    NO_TRANSITION,
+        GoalStatus.PREEMPTING: INVALID_TRANSITION}}
+
+
+class CommStateMachine:
+    def __init__(self, action_goal, transition_cb, feedback_cb, send_goal_fn, send_cancel_fn):
+        self.action_goal = action_goal
+        self.transition_cb = transition_cb
+        self.feedback_cb = feedback_cb
+        self.send_goal_fn = send_goal_fn
+        self.send_cancel_fn = send_cancel_fn
+
+        self.state = CommState.WAITING_FOR_GOAL_ACK
+        self.mutex = threading.RLock()
+        self.latest_goal_status = GoalStatus(status=GoalStatus.PENDING)
+        self.latest_result = None
+
+    def __eq__(self, o):
+        return self.action_goal.goal_id.id == o.action_goal.goal_id.id
+
+    ## @brieft Hash function for CommStateMachine
+    def __hash__(self):
+        return hash(self.action_goal.goal_id.id)
+
+    def set_state(self, state):
+        rospy.logdebug("Transitioning CommState from %s to %s",
+                       CommState.to_string(self.state), CommState.to_string(state))
+        self.state = state
+
+    ##
+    ## @param gh ClientGoalHandle
+    ## @param status_array actionlib_msgs/GoalStatusArray
+    def update_status(self, status_array):
+        with self.mutex:
+            if self.state == CommState.DONE:
+                return
+
+            status = _find_status_by_goal_id(status_array, self.action_goal.goal_id.id)
+
+            # You mean you haven't heard of me?
+            if not status:
+                if self.state not in [CommState.WAITING_FOR_GOAL_ACK,
+                                      CommState.WAITING_FOR_RESULT,
+                                      CommState.DONE]:
+                    self._mark_as_lost()
+                return
+
+            self.latest_goal_status = status
+
+            # Determines the next state from the lookup table
+            if self.state not in _transitions:
+                rospy.logerr("CommStateMachine is in a funny state: %i" % self.state)
+                return
+            if status.status not in _transitions[self.state]:
+                rospy.logerr("Got an unknown status from the ActionServer: %i" % status.status)
+                return
+            next_state = _transitions[self.state][status.status]
+
+            # Knowing the next state, what should we do?
+            if next_state == NO_TRANSITION:
+                pass
+            elif next_state == INVALID_TRANSITION:
+                rospy.logerr("Invalid goal status transition from %s to %s" %
+                             (CommState.to_string(self.state), GoalStatus.to_string(status.status)))
+            else:
+                if hasattr(next_state, '__getitem__'):
+                    for s in next_state:
+                        self.transition_to(s)
+                else:
+                    self.transition_to(next_state)
+
+    def transition_to(self, state):
+        rospy.logdebug("Transitioning to %s (from %s, goal: %s)",
+                       CommState.to_string(state), CommState.to_string(self.state),
+                       self.action_goal.goal_id.id)
+        self.state = state
+        if self.transition_cb:
+            self.transition_cb(ClientGoalHandle(self))
+
+    def _mark_as_lost(self):
+        self.latest_goal_status.status = GoalStatus.LOST
+        self.transition_to(CommState.DONE)
+
+    def update_result(self, action_result):
+        # Might not be for us
+        if self.action_goal.goal_id.id != action_result.status.goal_id.id:
+            return
+
+        with self.mutex:
+            self.latest_goal_status = action_result.status
+            self.latest_result = action_result
+
+            if self.state in [CommState.WAITING_FOR_GOAL_ACK,
+                              CommState.WAITING_FOR_CANCEL_ACK,
+                              CommState.PENDING,
+                              CommState.ACTIVE,
+                              CommState.WAITING_FOR_RESULT,
+                              CommState.RECALLING,
+                              CommState.PREEMPTING]:
+                # Stuffs the goal status in the result into a GoalStatusArray
+                status_array = GoalStatusArray()
+                status_array.status_list.append(action_result.status)
+                self.update_status(status_array)
+
+                self.transition_to(CommState.DONE)
+            elif self.state == CommState.DONE:
+                rospy.logerr("Got a result when we were already in the DONE state")
+            else:
+                rospy.logerr("In a funny state: %i" % self.state)
+
+    def update_feedback(self, action_feedback):
+        # Might not be for us
+        if self.action_goal.goal_id.id != action_feedback.status.goal_id.id:
+            return
+
+        # with self.mutex:
+        if self.feedback_cb and self.state != CommState.DONE:
+            self.feedback_cb(ClientGoalHandle(self), action_feedback.feedback)
+
+
+class GoalManager:
+
+    # statuses - a list of weak references to CommStateMachine objects
+
+    def __init__(self, ActionSpec):
+        self.list_mutex = threading.RLock()
+        self.statuses = []
+        self.send_goal_fn = None
+
+        try:
+            a = ActionSpec()
+
+            self.ActionSpec = ActionSpec
+            self.ActionGoal = type(a.action_goal)
+            self.ActionResult = type(a.action_result)
+            self.ActionFeedback = type(a.action_feedback)
+        except AttributeError:
+            raise ActionException("Type is not an action spec: %s" % str(ActionSpec))
+
+    def _generate_id(self):
+        global g_goal_id
+        id, g_goal_id = g_goal_id, g_goal_id + 1
+        now = rospy.Time.now()
+        return GoalID(id="%s-%i-%.3f" % (rospy.get_caller_id(), id, now.to_sec()), stamp=now)
+
+    def register_send_goal_fn(self, fn):
+        self.send_goal_fn = fn
+
+    def register_cancel_fn(self, fn):
+        self.cancel_fn = fn
+
+    ## Sends off a goal and starts tracking its status.
+    ##
+    ## @return ClientGoalHandle for the sent goal.
+    def init_goal(self, goal, transition_cb=None, feedback_cb=None):
+        action_goal = self.ActionGoal(header=Header(),
+                                      goal_id=self._generate_id(),
+                                      goal=goal)
+        action_goal.header.stamp = rospy.get_rostime()
+
+        csm = CommStateMachine(action_goal, transition_cb, feedback_cb,
+                               self.send_goal_fn, self.cancel_fn)
+
+        with self.list_mutex:
+            self.statuses.append(weakref.ref(csm))
+
+        self.send_goal_fn(action_goal)
+
+        return ClientGoalHandle(csm)
+
+    # Pulls out the statuses that are still live (creating strong
+    # references to them)
+    def _get_live_statuses(self):
+        with self.list_mutex:
+            live_statuses = [r() for r in self.statuses]
+            live_statuses = [x for x in live_statuses if x]
+            return live_statuses
+
+    ## Updates the statuses of all goals from the information in status_array.
+    ##
+    ## @param status_array (\c actionlib_msgs/GoalStatusArray)
+    def update_statuses(self, status_array):
+
+        with self.list_mutex:
+            # Garbage collects dead status objects
+            self.statuses = [r for r in self.statuses if r()]
+
+        for status in self._get_live_statuses():
+            status.update_status(status_array)
+
+    def update_results(self, action_result):
+        for status in self._get_live_statuses():
+            status.update_result(action_result)
+
+    def update_feedbacks(self, action_feedback):
+        for status in self._get_live_statuses():
+            status.update_feedback(action_feedback)
+
+
+class ActionClient:
+    ## @brief Constructs an ActionClient and opens connections to an ActionServer.
+    ##
+    ## @param ns The namespace in which to access the action.  For
+    ## example, the "goal" topic should occur under ns/goal
+    ##
+    ## @param ActionSpec The *Action message type.  The ActionClient
+    ## will grab the other message types from this type.
+    def __init__(self, ns, ActionSpec):
+        self.ns = ns
+        self.last_status_msg = None
+
+        try:
+            a = ActionSpec()
+
+            self.ActionSpec = ActionSpec
+            self.ActionGoal = type(a.action_goal)
+            self.ActionResult = type(a.action_result)
+            self.ActionFeedback = type(a.action_feedback)
+        except AttributeError:
+            raise ActionException("Type is not an action spec: %s" % str(ActionSpec))
+
+        self.pub_queue_size = rospy.get_param('actionlib_client_pub_queue_size', 10)
+        if self.pub_queue_size < 0:
+            self.pub_queue_size = 10
+        self.pub_goal = rospy.Publisher(rospy.remap_name(ns) + '/goal', self.ActionGoal, queue_size=self.pub_queue_size)
+        self.pub_cancel = rospy.Publisher(rospy.remap_name(ns) + '/cancel', GoalID, queue_size=self.pub_queue_size)
+
+        self.manager = GoalManager(ActionSpec)
+        self.manager.register_send_goal_fn(self.pub_goal.publish)
+        self.manager.register_cancel_fn(self.pub_cancel.publish)
+
+        self.sub_queue_size = rospy.get_param('actionlib_client_sub_queue_size', -1)
+        if self.sub_queue_size < 0:
+            self.sub_queue_size = None
+        self.status_sub = rospy.Subscriber(rospy.remap_name(ns) + '/status', GoalStatusArray, callback=self._status_cb, queue_size=self.sub_queue_size)
+        self.result_sub = rospy.Subscriber(rospy.remap_name(ns) + '/result', self.ActionResult, callback=self._result_cb, queue_size=self.sub_queue_size)
+        self.feedback_sub = rospy.Subscriber(rospy.remap_name(ns) + '/feedback', self.ActionFeedback, callback=self._feedback_cb, queue_size=self.sub_queue_size)
+
+    ## @brief  Stop the action client.
+    def stop(self):
+        self.pub_goal.unregister()
+        self.pub_cancel.unregister()
+        self.status_sub.unregister()
+        self.result_sub.unregister()
+        self.feedback_sub.unregister()
+
+    ## @brief Sends a goal to the action server
+    ##
+    ## @param goal An instance of the *Goal message.
+    ##
+    ## @param transition_cb Callback that gets called on every client
+    ## state transition for the sent goal.  It should take in a
+    ## ClientGoalHandle as an argument.
+    ##
+    ## @param feedback_cb Callback that gets called every time
+    ## feedback is received for the sent goal.  It takes two
+    ## parameters: a ClientGoalHandle and an instance of the *Feedback
+    ## message.
+    ##
+    ## @return ClientGoalHandle for the sent goal.
+    def send_goal(self, goal, transition_cb=None, feedback_cb=None):
+        return self.manager.init_goal(goal, transition_cb, feedback_cb)
+
+    ## @brief Cancels all goals currently running on the action server.
+    ##
+    ## Preempts all goals running on the action server at the point
+    ## that the cancel message is serviced by the action server.
+    def cancel_all_goals(self):
+        cancel_msg = GoalID(stamp=rospy.Time.from_sec(0.0), id="")
+        self.pub_cancel.publish(cancel_msg)
+
+    ## @brief Cancels all goals prior to a given timestamp
+    ##
+    ## This preempts all goals running on the action server for which the
+    ## time stamp is earlier than the specified time stamp
+    ## this message is serviced by the ActionServer.
+
+    def cancel_goals_at_and_before_time(self, time):
+        cancel_msg = GoalID(stamp=time, id="")
+        self.pub_cancel.publish(cancel_msg)
+
+    ## @brief [Deprecated] Use wait_for_server
+    def wait_for_action_server_to_start(self, timeout=rospy.Duration(0.0)):
+        return self.wait_for_server(timeout)
+
+    ## @brief Waits for the ActionServer to connect to this client
+    ##
+    ## Often, it can take a second for the action server & client to negotiate
+    ## a connection, thus, risking the first few goals to be dropped. This call lets
+    ## the user wait until the network connection to the server is negotiated
+    def wait_for_server(self, timeout=rospy.Duration(0.0)):
+        started = False
+        timeout_time = rospy.get_rostime() + timeout
+        while not rospy.is_shutdown():
+            if self.last_status_msg:
+                server_id = self.last_status_msg._connection_header['callerid']
+
+                if self.pub_goal.impl.has_connection(server_id) and \
+                        self.pub_cancel.impl.has_connection(server_id):
+                    # Check that the connections to the result and feedback
+                    # topics have completed and are ready to receive data.
+                    # Check the connections by checking the callerid from the
+                    # publisher's header against the server_id.
+                    # Note: there is no need to check the status topic, as
+                    # we already received a status message in last_status_msg
+                    # and are using it as the source of truth for the server_id.
+                    # Note: there is no need to grab the c_lock, the
+                    # implementation guarantees to never mutate the connection
+                    # list, only replace the reference. So all we need to do is
+                    # to copy a reference ourselves. This behavior is
+                    # documented in the comment above the c_lock creation in
+                    # rospy._TopicImpl.__init__.
+                    result_sub_connections = self.result_sub.impl.connections
+                    result_sub_found = False
+                    for c in result_sub_connections:
+                        if c.callerid_pub == server_id:
+                            result_sub_found = True
+                    feedback_sub_connections = self.feedback_sub.impl.connections
+                    feedback_sub_found = False
+                    for c in feedback_sub_connections:
+                        if c.callerid_pub == server_id:
+                            feedback_sub_found = True
+
+                    if result_sub_found and feedback_sub_found:
+                        started = True
+                        break
+
+            if timeout != rospy.Duration(0.0) and rospy.get_rostime() >= timeout_time:
+                break
+
+            time.sleep(0.01)
+
+        return started
+
+    def _status_cb(self, msg):
+        self.last_status_msg = msg
+        self.manager.update_statuses(msg)
+
+    def _result_cb(self, msg):
+        self.manager.update_results(msg)
+
+    def _feedback_cb(self, msg):
+        self.manager.update_feedbacks(msg)
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/src/actionlib/action_server.py
@@ -0,0 +1,325 @@
+#! /usr/bin/env python
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+#
+# Author: Alexander Sorokin.
+# Based on C++ action_server.h by Eitan Marder-Eppstein
+import rospy
+import threading
+
+from actionlib_msgs.msg import GoalID, GoalStatus, GoalStatusArray
+
+from actionlib.goal_id_generator import GoalIDGenerator
+from actionlib.status_tracker import StatusTracker
+
+from actionlib.handle_tracker_deleter import HandleTrackerDeleter
+from actionlib.server_goal_handle import ServerGoalHandle
+
+from actionlib.exceptions import ActionException
+
+
+def nop_cb(goal_handle):
+    pass
+
+
+## @class ActionServer
+## @brief The ActionServer is a helpful tool for managing goal requests to a
+## node. It allows the user to specify callbacks that are invoked when goal
+## or cancel requests come over the wire, and passes back GoalHandles that
+## can be used to track the state of a given goal request. The ActionServer
+## makes no assumptions about the policy used to service these goals, and
+## sends status for each goal over the wire until the last GoalHandle
+## associated with a goal request is destroyed.
+class ActionServer:
+    ## @brief  Constructor for an ActionServer
+    ## @param  ns/name A namespace for the action server
+    ## @param  actionspec An explicit specification of the action
+    ## @param  goal_cb A goal callback to be called when the ActionServer receives a new goal over the wire
+    ## @param  cancel_cb A cancel callback to be called when the ActionServer receives a new cancel request over the wire
+    ## @param  auto_start A boolean value that tells the ActionServer wheteher or not to start publishing as soon as it comes up. THIS SHOULD ALWAYS BE SET TO FALSE TO AVOID RACE CONDITIONS and start() should be called after construction of the server.
+    def __init__(self, ns,  ActionSpec, goal_cb, cancel_cb=nop_cb, auto_start=True):
+        self.ns = ns
+
+        try:
+            a = ActionSpec()
+
+            self.ActionSpec = ActionSpec
+            self.ActionGoal = type(a.action_goal)
+            self.ActionResult = type(a.action_result)
+            self.ActionResultType = type(a.action_result.result)
+            self.ActionFeedback = type(a.action_feedback)
+        except AttributeError:
+            raise ActionException("Type is not an action spec: %s" % str(ActionSpec))
+
+        self.goal_sub = None
+        self.cancel_sub = None
+        self.status_pub = None
+        self.result_pub = None
+        self.feedback_pub = None
+
+        self.lock = threading.RLock()
+
+        self.status_timer = None
+
+        self.status_list = []
+
+        self.last_cancel = rospy.Time()
+        self.status_list_timeout = rospy.Duration()
+
+        self.id_generator = GoalIDGenerator()
+
+        self.goal_callback = goal_cb
+        assert(self.goal_callback)
+
+        self.cancel_callback = cancel_cb
+        self.auto_start = auto_start
+
+        self.started = False
+
+        if self.auto_start:
+            rospy.logwarn("You've passed in true for auto_start to the python action server, you should always pass "
+                          "in false to avoid race conditions.")
+            self.start()
+
+    ## @brief  Register a callback to be invoked when a new goal is received, this will replace any  previously registered callback
+    ## @param  cb The callback to invoke
+    def register_goal_callback(self, cb):
+        self.goal_callback = cb
+
+    ## @brief  Register a callback to be invoked when a new cancel is received, this will replace any  previously registered callback
+    ## @param  cb The callback to invoke
+    def register_cancel_callback(self, cancel_cb):
+        self.cancel_callback = cancel_cb
+
+    ## @brief  Start the action server
+    def start(self):
+        with self.lock:
+            self.initialize()
+            self.started = True
+            self.publish_status()
+
+    ## @brief  Stop the action server. Please make sure it is not processing any goals at stop-time.
+    def stop(self):
+        with self.lock:
+            self.started = False
+            self.status_timer.shutdown()
+            self.goal_sub.unregister()
+            self.cancel_sub.unregister()
+            self.status_pub.unregister()
+            self.feedback_pub.unregister()
+            self.result_pub.unregister()
+
+    ## @brief  Initialize all ROS connections and setup timers
+    def initialize(self):
+        self.pub_queue_size = rospy.get_param('actionlib_server_pub_queue_size', 50)
+        if self.pub_queue_size < 0:
+            self.pub_queue_size = 50
+        self.status_pub = rospy.Publisher(rospy.remap_name(self.ns)+"/status", GoalStatusArray, latch=True, queue_size=self.pub_queue_size)
+        self.result_pub = rospy.Publisher(rospy.remap_name(self.ns)+"/result", self.ActionResult, queue_size=self.pub_queue_size)
+        self.feedback_pub = rospy.Publisher(rospy.remap_name(self.ns)+"/feedback", self.ActionFeedback, queue_size=self.pub_queue_size)
+
+        self.sub_queue_size = rospy.get_param('actionlib_server_sub_queue_size', -1)
+        if self.sub_queue_size < 0:
+            self.sub_queue_size = None
+        self.goal_sub = rospy.Subscriber(rospy.remap_name(self.ns)+"/goal", self.ActionGoal, callback=self.internal_goal_callback, queue_size=self.sub_queue_size)
+
+        self.cancel_sub = rospy.Subscriber(rospy.remap_name(self.ns)+"/cancel", GoalID, callback=self.internal_cancel_callback, queue_size=self.sub_queue_size)
+
+        # read the frequency with which to publish status from the parameter server
+        # if not specified locally explicitly, use search param to find actionlib_status_frequency
+        resolved_status_frequency_name = rospy.remap_name(self.ns)+"/status_frequency"
+        if rospy.has_param(resolved_status_frequency_name):
+            self.status_frequency = rospy.get_param(resolved_status_frequency_name, 5.0)
+            rospy.logwarn("You're using the deprecated status_frequency parameter, please switch to actionlib_status_frequency.")
+        else:
+            search_status_frequency_name = rospy.search_param("actionlib_status_frequency")
+            if search_status_frequency_name is None:
+                self.status_frequency = 5.0
+            else:
+                self.status_frequency = rospy.get_param(search_status_frequency_name, 5.0)
+
+        status_list_timeout = rospy.get_param(rospy.remap_name(self.ns)+"/status_list_timeout", 5.0)
+        self.status_list_timeout = rospy.Duration(status_list_timeout)
+
+        if self.status_frequency > 0.0:
+            status_period = rospy.Duration(1.0 / self.status_frequency)
+            self.status_timer = rospy.Timer(status_period, self.publish_status_async)
+
+    ## @brief  Publishes a result for a given goal
+    ## @param status The status of the goal with which the result is associated
+    ## @param result The result to publish
+    def publish_result(self, status, result):
+        with self.lock:
+            ar = self.ActionResult()
+            ar.header.stamp = rospy.Time.now()
+            ar.status = status
+            ar.result = result
+            if not rospy.is_shutdown():
+                self.result_pub.publish(ar)
+            self.publish_status()
+
+    ## @brief  Publishes feedback for a given goal
+    ## @param status The status of the goal with which the feedback is associated
+    ## @param feedback The feedback to publish
+    def publish_feedback(self, status, feedback):
+        with self.lock:
+            af = self.ActionFeedback()
+            af.header.stamp = rospy.Time.now()
+            af.status = status
+            af.feedback = feedback
+            if not rospy.is_shutdown():
+                self.feedback_pub.publish(af)
+
+    ## @brief  The ROS callback for cancel requests coming into the ActionServer
+    def internal_cancel_callback(self, goal_id):
+        with self.lock:
+
+            # if we're not started... then we're not actually going to do anything
+            if not self.started:
+                return
+
+            # we need to handle a cancel for the user
+            rospy.logdebug("The action server has received a new cancel request")
+
+            goal_id_found = False
+            for st in self.status_list[:]:
+                # check if the goal id is zero or if it is equal to the goal id of
+                # the iterator or if the time of the iterator warrants a cancel
+
+                cancel_everything = (goal_id.id == "" and goal_id.stamp == rospy.Time())   # rospy::Time()) #id and stamp 0 --> cancel everything
+                cancel_this_one = (goal_id.id == st.status.goal_id.id)   # ids match... cancel that goal
+                cancel_before_stamp = (goal_id.stamp != rospy.Time() and st.status.goal_id.stamp <= goal_id.stamp)  # //stamp != 0 --> cancel everything before stamp
+
+                if cancel_everything or cancel_this_one or cancel_before_stamp:
+                    # we need to check if we need to store this cancel request for later
+                    if goal_id.id == st.status.goal_id.id:
+                        goal_id_found = True
+
+                    # attempt to get the handle_tracker for the list item if it exists
+                    handle_tracker = st.handle_tracker
+
+                    if handle_tracker is None:
+                        # if the handle tracker is expired, then we need to create a new one
+                        handle_tracker = HandleTrackerDeleter(self, st)
+                        st.handle_tracker = handle_tracker
+
+                        # we also need to reset the time that the status is supposed to be removed from the list
+                        st.handle_destruction_time = rospy.Time.now()
+
+                    # set the status of the goal to PREEMPTING or RECALLING as appropriate
+                    # and check if the request should be passed on to the user
+                    gh = ServerGoalHandle(st, self, handle_tracker)
+                    if gh.set_cancel_requested():
+                        # call the user's cancel callback on the relevant goal
+                        self.cancel_callback(gh)
+
+            # if the requested goal_id was not found, and it is non-zero, then we need to store the cancel request
+            if goal_id.id != "" and not goal_id_found:
+                tracker = StatusTracker(goal_id, GoalStatus.RECALLING)
+                self.status_list.append(tracker)
+                # start the timer for how long the status will live in the list without a goal handle to it
+                tracker.handle_destruction_time = rospy.Time.now()
+
+            # make sure to set last_cancel_ based on the stamp associated with this cancel request
+            if goal_id.stamp > self.last_cancel:
+                self.last_cancel = goal_id.stamp
+
+    ## @brief  The ROS callback for goals coming into the ActionServer
+    def internal_goal_callback(self, goal):
+        with self.lock:
+            # if we're not started... then we're not actually going to do anything
+            if not self.started:
+                return
+
+            rospy.logdebug("The action server has received a new goal request")
+
+            # we need to check if this goal already lives in the status list
+            for st in self.status_list[:]:
+                if goal.goal_id.id == st.status.goal_id.id:
+                    rospy.logdebug("Goal %s was already in the status list with status %i" % (goal.goal_id.id, st.status.status))
+                    # Goal could already be in recalling state if a cancel came in before the goal
+                    if st.status.status == GoalStatus.RECALLING:
+                        st.status.status = GoalStatus.RECALLED
+                        self.publish_result(st.status, self.ActionResultType())
+
+                    # if this is a request for a goal that has no active handles left,
+                    # we'll bump how long it stays in the list
+                    if st.handle_tracker is None:
+                        st.handle_destruction_time = rospy.Time.now()
+
+                    # make sure not to call any user callbacks or add duplicate status onto the list
+                    return
+
+            # if the goal is not in our list, we need to create a StatusTracker associated with this goal and push it on
+            st = StatusTracker(None, None, goal)
+            self.status_list.append(st)
+
+            # we need to create a handle tracker for the incoming goal and update the StatusTracker
+            handle_tracker = HandleTrackerDeleter(self, st)
+
+            st.handle_tracker = handle_tracker
+
+            # check if this goal has already been canceled based on its timestamp
+            gh = ServerGoalHandle(st, self, handle_tracker)
+            if goal.goal_id.stamp != rospy.Time() and goal.goal_id.stamp <= self.last_cancel:
+                # if it has... just create a GoalHandle for it and setCanceled
+                gh.set_canceled(None, "This goal handle was canceled by the action server because its timestamp is before the timestamp of the last cancel request")
+            else:
+                # now, we need to create a goal handle and call the user's callback
+                self.goal_callback(gh)
+
+    ## @brief  Publish status for all goals on a timer event
+    def publish_status_async(self, event):
+        with self.lock:
+            # we won't publish status unless we've been started
+            if not self.started:
+                return
+            self.publish_status()
+
+    ## @brief  Explicitly publish status
+    def publish_status(self):
+        with self.lock:
+            # build a status array
+            status_array = GoalStatusArray()
+
+            # status_array.set_status_list_size(len(self.status_list));
+
+            i = 0
+            while i < len(self.status_list):
+                st = self.status_list[i]
+                # check if the item is due for deletion from the status list
+                if st.handle_destruction_time != rospy.Time() and st.handle_destruction_time + self.status_list_timeout < rospy.Time.now():
+                    rospy.logdebug("Item %s with destruction time of %.3f being removed from list.  Now = %.3f" %
+                                   (st.status.goal_id, st.handle_destruction_time.to_sec(), rospy.Time.now().to_sec()))
+                    del self.status_list[i]
+                else:
+                    status_array.status_list.append(st.status)
+                    i += 1
+
+            status_array.header.stamp = rospy.Time.now()
+            if not rospy.is_shutdown():
+                self.status_pub.publish(status_array)
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/src/actionlib/exceptions.py
@@ -0,0 +1,33 @@
+#! /usr/bin/env python
+# Copyright (c) 2010, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+# Author: Jonathan Bohren
+
+
+class ActionException(Exception):
+    pass
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/src/actionlib/goal_id_generator.py
@@ -0,0 +1,79 @@
+#! /usr/bin/env python
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+# Author: Alexander Sorokin.
+# Based on C++ goal_id_generator.h/cpp
+import rospy
+
+from actionlib_msgs.msg import GoalID
+import threading
+
+global s_goalcount_lock
+global s_goalcount
+s_goalcount_lock = threading.Lock()
+s_goalcount = 0
+
+
+class GoalIDGenerator:
+
+    def __init__(self, name=None):
+        """
+        * Create a generator that prepends the fully qualified node name to the Goal ID
+        * \param name Unique name to prepend to the goal id. This will
+        *             generally be a fully qualified node name.
+        """
+        if name is not None:
+            self.set_name(name)
+        else:
+            self.set_name(rospy.get_name())
+
+    def set_name(self, name):
+        """
+        * \param name Set the name to prepend to the goal id. This will
+        *             generally be a fully qualified node name.
+        """
+        self.name = name
+
+    def generate_ID(self):
+        """
+        * \brief Generates a unique ID
+        * \return A unique GoalID for this action
+        """
+        id = GoalID()
+        cur_time = rospy.Time.now()
+        ss = self.name + "-"
+        global s_goalcount_lock
+        global s_goalcount
+        with s_goalcount_lock:
+            s_goalcount += 1
+            ss += str(s_goalcount) + "-"
+        ss += str(cur_time.secs) + "." + str(cur_time.nsecs)
+
+        id.id = ss
+        id.stamp = cur_time
+        return id
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/src/actionlib/handle_tracker_deleter.py
@@ -0,0 +1,51 @@
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+# Author: Alexander Sorokin.
+# Based on C++ goal_id_generator.h/cpp
+import rospy
+
+
+class HandleTrackerDeleter:
+    """
+    * @class HandleTrackerDeleter
+    * @brief A class to help with tracking GoalHandles and removing goals
+    * from the status list when the last GoalHandle associated with a given
+    * goal is deleted.
+    """
+
+    def __init__(self, action_server, status_tracker):
+        """
+        @brief create deleter
+        """
+        self.action_server = action_server
+        self.status_tracker = status_tracker
+
+    def __call__(self, ptr):
+        if self.action_server:
+            with self.action_server.lock:
+                self.status_tracker.handle_destruction_time = rospy.Time.now()
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/src/actionlib/server_goal_handle.py
@@ -0,0 +1,309 @@
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+# Author: Alexander Sorokin.
+# Based on C++ goal_id_generator.h/cpp
+import rospy
+
+import actionlib_msgs.msg
+
+
+class ServerGoalHandle:
+    """
+    * @class ServerGoalHandle
+    * @brief Encapsulates a state machine for a given goal that the user can
+    * trigger transisions on. All ROS interfaces for the goal are managed by
+    * the ActionServer to lessen the burden on the user.
+
+    """
+
+    def __init__(self, status_tracker=None, action_server=None, handle_tracker=None):
+        """
+        A private constructor used by the ActionServer to initialize a ServerGoalHandle.
+        @node  The default constructor was not ported.
+        """
+        self.status_tracker = status_tracker
+        self.action_server = action_server
+        self.handle_tracker = handle_tracker
+
+        if status_tracker:
+            self.goal = status_tracker.goal
+        else:
+            self.goal = None
+
+    def get_default_result(self):
+        return self.action_server.ActionResultType()
+
+    def set_accepted(self, text=""):
+        """
+        Accept the goal referenced by the goal handle. This will
+        transition to the ACTIVE state or the PREEMPTING state depending
+        on whether a cancel request has been received for the goal
+        """
+
+        rospy.logdebug("Accepting goal, id: %s, stamp: %.2f", self.get_goal_id().id, self.get_goal_id().stamp.to_sec())
+        if self.goal:
+            with self.action_server.lock:
+                status = self.status_tracker.status.status
+
+                # if we were pending before, then we'll go active
+                if status == actionlib_msgs.msg.GoalStatus.PENDING:
+                    self.status_tracker.status.status = actionlib_msgs.msg.GoalStatus.ACTIVE
+                    self.status_tracker.status.text = text
+                    self.action_server.publish_status()
+
+                # if we were recalling before, now we'll go to preempting
+                elif status == actionlib_msgs.msg.GoalStatus.RECALLING:
+                    self.status_tracker.status.status = actionlib_msgs.msg.GoalStatus.PREEMPTING
+                    self.status_tracker.status.text = text
+                    self.action_server.publish_status()
+
+                else:
+                    rospy.logerr("To transition to an active state, the goal must be in a pending or recalling state, it is currently in state: %d",  self.status_tracker.status.status)
+
+        else:
+            rospy.logerr("Attempt to set status on an uninitialized ServerGoalHandle")
+
+    def set_canceled(self, result=None, text=""):
+        """
+        Set the status of the goal associated with the ServerGoalHandle to RECALLED or PREEMPTED
+        depending on what the current status of the goal is
+        @param  result Optionally, the user can pass in a result to be sent to any clients of the goal
+        """
+        if not result:
+            result = self.get_default_result()
+
+        rospy.logdebug("Setting status to canceled on goal, id: %s, stamp: %.2f", self.get_goal_id().id, self.get_goal_id().stamp.to_sec())
+
+        if self.goal:
+            with self.action_server.lock:
+                status = self.status_tracker.status.status
+                if status == actionlib_msgs.msg.GoalStatus.PENDING or status == actionlib_msgs.msg.GoalStatus.RECALLING:
+                    self.status_tracker.status.status = actionlib_msgs.msg.GoalStatus.RECALLED
+                    self.status_tracker.status.text = text
+                    # on transition to a terminal state, we'll also set the handle destruction time
+                    self.status_tracker.handle_destruction_time = rospy.Time.now()
+                    self.action_server.publish_result(self.status_tracker.status, result)
+                elif status == actionlib_msgs.msg.GoalStatus.ACTIVE or status == actionlib_msgs.msg.GoalStatus.PREEMPTING:
+                    self.status_tracker.status.status = actionlib_msgs.msg.GoalStatus.PREEMPTED
+                    self.status_tracker.status.text = text
+                    # on transition to a terminal state, we'll also set the handle destruction time
+                    self.status_tracker.handle_destruction_time = rospy.Time.now()
+                    self.action_server.publish_result(self.status_tracker.status, result)
+
+                else:
+                    rospy.logerr("To transition to a cancelled state, the goal must be in a pending, recalling, active, or preempting state, it is currently in state: %d",
+                                 self.status_tracker.status.status)
+
+        else:
+            rospy.logerr("Attempt to set status on an uninitialized ServerGoalHandle")
+
+    def set_rejected(self, result=None, text=""):
+        """
+        * @brief  Set the status of the goal associated with the ServerGoalHandle to rejected
+        * @param  result Optionally, the user can pass in a result to be sent to any clients of the goal
+        """
+        if not result:
+            result = self.get_default_result()
+
+        rospy.logdebug("Setting status to rejected on goal, id: %s, stamp: %.2f", self.get_goal_id().id, self.get_goal_id().stamp.to_sec())
+        if self.goal:
+            with self.action_server.lock:
+                status = self.status_tracker.status.status
+                if status == actionlib_msgs.msg.GoalStatus.PENDING or status == actionlib_msgs.msg.GoalStatus.RECALLING:
+                    self.status_tracker.status.status = actionlib_msgs.msg.GoalStatus.REJECTED
+                    self.status_tracker.status.text = text
+                    # on transition to a terminal state, we'll also set the handle destruction time
+                    self.status_tracker.handle_destruction_time = rospy.Time.now()
+                    self.action_server.publish_result(self.status_tracker.status, result)
+
+                else:
+                    rospy.logerr("To transition to a rejected state, the goal must be in a pending or recalling state, it is currently in state: %d",
+                                 self.status_tracker.status.status)
+
+        else:
+            rospy.logerr("Attempt to set status on an uninitialized ServerGoalHandle")
+
+    def set_aborted(self, result=None, text=""):
+        """
+        Set the status of the goal associated with the ServerGoalHandle to aborted
+        @param  result Optionally, the user can pass in a result to be sent to any clients of the goal
+        """
+        if not result:
+            result = self.get_default_result()
+
+        rospy.logdebug("Setting status to aborted on goal, id: %s, stamp: %.2f", self.get_goal_id().id, self.get_goal_id().stamp.to_sec())
+        if self.goal:
+            with self.action_server.lock:
+                status = self.status_tracker.status.status
+                if status == actionlib_msgs.msg.GoalStatus.PREEMPTING or status == actionlib_msgs.msg.GoalStatus.ACTIVE:
+                    self.status_tracker.status.status = actionlib_msgs.msg.GoalStatus.ABORTED
+                    self.status_tracker.status.text = text
+                    # on transition to a terminal state, we'll also set the handle destruction time
+                    self.status_tracker.handle_destruction_time = rospy.Time.now()
+                    self.action_server.publish_result(self.status_tracker.status, result)
+
+                else:
+                    rospy.logerr("To transition to an aborted state, the goal must be in a preempting or active state, it is currently in state: %d",
+                                 status)
+
+        else:
+            rospy.logerr("Attempt to set status on an uninitialized ServerGoalHandle")
+
+    def set_succeeded(self, result=None, text=""):
+        """
+        Set the status of the goal associated with the ServerGoalHandle to succeeded
+        @param  result Optionally, the user can pass in a result to be sent to any clients of the goal
+        """
+        if not result:
+            result = self.get_default_result()
+
+        rospy.logdebug("Setting status to succeeded on goal, id: %s, stamp: %.2f",
+                       self.get_goal_id().id, self.get_goal_id().stamp.to_sec())
+        if self.goal:
+            with self.action_server.lock:
+                status = self.status_tracker.status.status
+                if status == actionlib_msgs.msg.GoalStatus.PREEMPTING or status == actionlib_msgs.msg.GoalStatus.ACTIVE:
+                    self.status_tracker.status.status = actionlib_msgs.msg.GoalStatus.SUCCEEDED
+                    self.status_tracker.status.text = text
+                    # on transition to a terminal state, we'll also set the handle destruction time
+                    self.status_tracker.handle_destruction_time = rospy.Time.now()
+                    self.action_server.publish_result(self.status_tracker.status, result)
+
+                else:
+                    rospy.logerr("To transition to a succeeded state, the goal must be in a preempting or active state, it is currently in state: %d",
+                                 status)
+
+        else:
+            rospy.logerr("Attempt to set status on an uninitialized ServerGoalHandle")
+
+    def publish_feedback(self, feedback):
+        """
+        Send feedback to any clients of the goal associated with this ServerGoalHandle
+        @param feedback The feedback to send to the client
+        """
+        rospy.logdebug("Publishing feedback for goal, id: %s, stamp: %.2f",
+                       self.get_goal_id().id, self.get_goal_id().stamp.to_sec())
+        if self.goal:
+            with self.action_server.lock:
+                self.action_server.publish_feedback(self.status_tracker.status, feedback)
+        else:
+            rospy.logerr("Attempt to publish feedback on an uninitialized ServerGoalHandle")
+
+    def get_goal(self):
+        """
+        Accessor for the goal associated with the ServerGoalHandle
+        @return A shared_ptr to the goal object
+        """
+        # if we have a goal that is non-null
+        if self.goal:
+            # @todo Test that python reference counting automatically handles this.
+            # create the deleter for our goal subtype
+            # d = EnclosureDeleter(self.goal)
+            # weakref.ref(boost::shared_ptr<const Goal>(&(goal_->goal), d)
+            return self.goal.goal
+
+        return None
+
+    def get_goal_id(self):
+        """
+        Accessor for the goal id associated with the ServerGoalHandle
+        @return The goal id
+        """
+        if self.goal:
+            with self.action_server.lock:
+                return self.status_tracker.status.goal_id
+        else:
+            rospy.logerr("Attempt to get a goal id on an uninitialized ServerGoalHandle")
+            return actionlib_msgs.msg.GoalID()
+
+    def get_goal_status(self):
+        """
+        Accessor for the status associated with the ServerGoalHandle
+        @return The goal status
+        """
+        if self.goal:
+            with self.action_server.lock:
+                return self.status_tracker.status
+        else:
+            rospy.logerr("Attempt to get goal status on an uninitialized ServerGoalHandle")
+            return actionlib_msgs.msg.GoalStatus()
+
+    def __eq__(self, other):
+        """
+        Equals operator for ServerGoalHandles
+        @param other The ServerGoalHandle to compare to
+        @return True if the ServerGoalHandles refer to the same goal, false otherwise
+        """
+
+        if not self.goal or not other.goal:
+            return False
+        my_id = self.get_goal_id()
+        their_id = other.get_goal_id()
+        return my_id.id == their_id.id
+
+    def __ne__(self, other):
+        """
+        != operator for ServerGoalHandles
+        @param other The ServerGoalHandle to compare to
+        @return True if the ServerGoalHandles refer to different goals, false otherwise
+        """
+        if not self.goal or not other.goal:
+            return True
+        my_id = self.get_goal_id()
+        their_id = other.get_goal_id()
+
+        return my_id.id != their_id.id
+
+    def __hash__(self):
+        """
+        hash function for ServerGoalHandles
+        @return hash of the goal ID
+        """
+        return hash(self.get_goal_id().id)
+
+    def set_cancel_requested(self):
+        """
+        A private method to set status to PENDING or RECALLING
+        @return True if the cancel request should be passed on to the user, false otherwise
+        """
+        rospy.logdebug("Transisitoning to a cancel requested state on goal id: %s, stamp: %.2f",
+                       self.get_goal_id().id, self.get_goal_id().stamp.to_sec())
+        if self.goal:
+            with self.action_server.lock:
+                status = self.status_tracker.status.status
+                if status == actionlib_msgs.msg.GoalStatus.PENDING:
+                    self.status_tracker.status.status = actionlib_msgs.msg.GoalStatus.RECALLING
+                    self.action_server.publish_status()
+                    return True
+
+                if status == actionlib_msgs.msg.GoalStatus.ACTIVE:
+                    self.status_tracker.status.status = actionlib_msgs.msg.GoalStatus.PREEMPTING
+                    self.action_server.publish_status()
+                    return True
+
+        return False
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/src/actionlib/simple_action_client.py
@@ -0,0 +1,266 @@
+#! /usr/bin/env python
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+# Author: Stuart Glaser
+import rospy
+import threading
+
+from actionlib_msgs.msg import GoalStatus
+from actionlib.action_client import ActionClient, CommState, get_name_of_constant
+
+
+class SimpleGoalState:
+    PENDING = 0
+    ACTIVE = 1
+    DONE = 2
+
+
+SimpleGoalState.to_string = classmethod(get_name_of_constant)
+
+
+class SimpleActionClient:
+    ## @brief Constructs a SimpleActionClient and opens connections to an ActionServer.
+    ##
+    ## @param ns The namespace in which to access the action.  For
+    ## example, the "goal" topic should occur under ns/goal
+    ##
+    ## @param ActionSpec The *Action message type.  The SimpleActionClient
+    ## will grab the other message types from this type.
+    def __init__(self, ns, ActionSpec):
+        self.action_client = ActionClient(ns, ActionSpec)
+        self.simple_state = SimpleGoalState.DONE
+        self.gh = None
+        self.done_condition = threading.Condition()
+
+    ## @brief Blocks until the action server connects to this client
+    ##
+    ## @param timeout Max time to block before returning. A zero
+    ## timeout is interpreted as an infinite timeout.
+    ##
+    ## @return True if the server connected in the allocated time. False on timeout
+    def wait_for_server(self, timeout=rospy.Duration()):
+        return self.action_client.wait_for_server(timeout)
+
+    ## @brief Sends a goal to the ActionServer, and also registers callbacks
+    ##
+    ## If a previous goal is already active when this is called. We simply forget
+    ## about that goal and start tracking the new goal. No cancel requests are made.
+    ##
+    ## @param done_cb Callback that gets called on transitions to
+    ## Done.  The callback should take two parameters: the terminal
+    ## state (as an integer from actionlib_msgs/GoalStatus) and the
+    ## result.
+    ##
+    ## @param active_cb   No-parameter callback that gets called on transitions to Active.
+    ##
+    ## @param feedback_cb Callback that gets called whenever feedback
+    ## for this goal is received.  Takes one parameter: the feedback.
+    def send_goal(self, goal, done_cb=None, active_cb=None, feedback_cb=None):
+        # destroys the old goal handle
+        self.stop_tracking_goal()
+
+        self.done_cb = done_cb
+        self.active_cb = active_cb
+        self.feedback_cb = feedback_cb
+
+        self.simple_state = SimpleGoalState.PENDING
+        self.gh = self.action_client.send_goal(goal, self._handle_transition, self._handle_feedback)
+
+    ## @brief Sends a goal to the ActionServer, waits for the goal to complete, and preempts goal is necessary
+    ##
+    ## If a previous goal is already active when this is called. We simply forget
+    ## about that goal and start tracking the new goal. No cancel requests are made.
+    ##
+    ## If the goal does not complete within the execute_timeout, the goal gets preempted
+    ##
+    ## If preemption of the goal does not complete withing the preempt_timeout, this
+    ## method simply returns
+    ##
+    ## @param execute_timeout The time to wait for the goal to complete
+    ##
+    ## @param preempt_timeout The time to wait for preemption to complete
+    ##
+    ## @return The goal's state.
+    def send_goal_and_wait(self, goal, execute_timeout=rospy.Duration(), preempt_timeout=rospy.Duration()):
+        self.send_goal(goal)
+        if not self.wait_for_result(execute_timeout):
+            # preempt action
+            rospy.logdebug("Canceling goal")
+            self.cancel_goal()
+            if self.wait_for_result(preempt_timeout):
+                rospy.logdebug("Preempt finished within specified preempt_timeout [%.2f]", preempt_timeout.to_sec())
+            else:
+                rospy.logdebug("Preempt didn't finish specified preempt_timeout [%.2f]", preempt_timeout.to_sec())
+        return self.get_state()
+
+    ## @brief Blocks until this goal transitions to done
+    ## @param timeout Max time to block before returning. A zero timeout is interpreted as an infinite timeout.
+    ## @return True if the goal finished. False if the goal didn't finish within the allocated timeout
+    def wait_for_result(self, timeout=rospy.Duration()):
+        if not self.gh:
+            rospy.logerr("Called wait_for_result when no goal exists")
+            return False
+
+        timeout_time = rospy.get_rostime() + timeout
+        loop_period = rospy.Duration(0.1)
+        with self.done_condition:
+            while not rospy.is_shutdown():
+                time_left = timeout_time - rospy.get_rostime()
+                if timeout > rospy.Duration(0.0) and time_left <= rospy.Duration(0.0):
+                    break
+
+                if self.simple_state == SimpleGoalState.DONE:
+                    break
+
+                if time_left > loop_period or timeout == rospy.Duration():
+                    time_left = loop_period
+
+                self.done_condition.wait(time_left.to_sec())
+
+        return self.simple_state == SimpleGoalState.DONE
+
+    ## @brief Gets the Result of the current goal
+    def get_result(self):
+        if not self.gh:
+            rospy.logerr("Called get_result when no goal is running")
+            return None
+
+        return self.gh.get_result()
+
+    ## @brief Get the state information for this goal
+    ##
+    ## Possible States Are: PENDING, ACTIVE, RECALLED, REJECTED,
+    ## PREEMPTED, ABORTED, SUCCEEDED, LOST.
+    ##
+    ## @return The goal's state. Returns LOST if this
+    ## SimpleActionClient isn't tracking a goal.
+    def get_state(self):
+        if not self.gh:
+            return GoalStatus.LOST
+        status = self.gh.get_goal_status()
+
+        if status == GoalStatus.RECALLING:
+            status = GoalStatus.PENDING
+        elif status == GoalStatus.PREEMPTING:
+            status = GoalStatus.ACTIVE
+
+        return status
+
+    ## @brief Returns the current status text of the goal.
+    ##
+    ## The text is sent by the action server. It is designed to
+    ## help debugging issues on the server side.
+    ##
+    ## @return The current status text of the goal.
+    def get_goal_status_text(self):
+        if not self.gh:
+            rospy.logerr("Called get_goal_status_text when no goal is running")
+            return "ERROR: Called get_goal_status_text when no goal is running"
+
+        return self.gh.get_goal_status_text()
+
+    ## @brief Cancels all goals currently running on the action server
+    ##
+    ## This preempts all goals running on the action server at the point that
+    ## this message is serviced by the ActionServer.
+    def cancel_all_goals(self):
+        self.action_client.cancel_all_goals()
+
+    ## @brief Cancels all goals prior to a given timestamp
+    ##
+    ## This preempts all goals running on the action server for which the
+    ## time stamp is earlier than the specified time stamp
+    ## this message is serviced by the ActionServer.
+    def cancel_goals_at_and_before_time(self, time):
+        self.action_client.cancel_goals_at_and_before_time(time)
+
+    ## @brief Cancels the goal that we are currently pursuing
+    def cancel_goal(self):
+        if self.gh:
+            self.gh.cancel()
+
+    ## @brief Stops tracking the state of the current goal. Unregisters this goal's callbacks
+    ##
+    ## This is useful if we want to make sure we stop calling our callbacks before sending a new goal.
+    ## Note that this does not cancel the goal, it simply stops looking for status info about this goal.
+    def stop_tracking_goal(self):
+        self.gh = None
+
+    def _handle_transition(self, gh):
+
+        if gh != self.gh:
+            rospy.logerr("Got a transition callback on a goal handle that we're not tracking")
+            return
+
+        comm_state = gh.get_comm_state()
+
+        error_msg = "Received comm state %s when in simple state %s with SimpleActionClient in NS %s" % \
+            (CommState.to_string(comm_state), SimpleGoalState.to_string(self.simple_state), rospy.resolve_name(self.action_client.ns))
+
+        if comm_state == CommState.ACTIVE:
+            if self.simple_state == SimpleGoalState.PENDING:
+                self._set_simple_state(SimpleGoalState.ACTIVE)
+                if self.active_cb:
+                    self.active_cb()
+            elif self.simple_state == SimpleGoalState.DONE:
+                rospy.logerr(error_msg)
+        elif comm_state == CommState.RECALLING:
+            if self.simple_state != SimpleGoalState.PENDING:
+                rospy.logerr(error_msg)
+        elif comm_state == CommState.PREEMPTING:
+            if self.simple_state == SimpleGoalState.PENDING:
+                self._set_simple_state(SimpleGoalState.ACTIVE)
+                if self.active_cb:
+                    self.active_cb()
+            elif self.simple_state == SimpleGoalState.DONE:
+                rospy.logerr(error_msg)
+        elif comm_state == CommState.DONE:
+            if self.simple_state in [SimpleGoalState.PENDING, SimpleGoalState.ACTIVE]:
+                if self.done_cb:
+                    self.done_cb(gh.get_goal_status(), gh.get_result())
+                with self.done_condition:
+                    self._set_simple_state(SimpleGoalState.DONE)
+                    self.done_condition.notifyAll()
+            elif self.simple_state == SimpleGoalState.DONE:
+                rospy.logerr("SimpleActionClient received DONE twice")
+
+    def _handle_feedback(self, gh, feedback):
+        if not self.gh:
+            # this is not actually an error - there can be a small window in which old feedback
+            # can be received between the time this variable is reset and a new goal is
+            # sent and confirmed
+            return
+        if gh != self.gh:
+            rospy.logerr("Got a feedback callback on a goal handle that we're not tracking. %s vs %s" %
+                         (self.gh.comm_state_machine.action_goal.goal_id.id, gh.comm_state_machine.action_goal.goal_id.id))
+            return
+        if self.feedback_cb:
+            self.feedback_cb(feedback)
+
+    def _set_simple_state(self, state):
+        self.simple_state = state
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/src/actionlib/simple_action_server.py
@@ -0,0 +1,302 @@
+#! /usr/bin/env python
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+#
+# Author: Alexander Sorokin.
+# Based on C++ simple_action_server.h by Eitan Marder-Eppstein
+import rospy
+import threading
+import traceback
+
+from actionlib_msgs.msg import GoalStatus
+
+from actionlib import ActionServer
+from actionlib.server_goal_handle import ServerGoalHandle
+
+
+def nop_cb(goal_handle):
+    pass
+
+
+## @class SimpleActionServer
+## @brief The SimpleActionServer
+## implements a singe goal policy on top of the ActionServer class. The
+## specification of the policy is as follows: only one goal can have an
+## active status at a time, new goals preempt previous goals based on the
+## stamp in their GoalID field (later goals preempt earlier ones), an
+## explicit preempt goal preempts all goals with timestamps that are less
+## than or equal to the stamp associated with the preempt, accepting a new
+## goal implies successful preemption of any old goal and the status of the
+## old goal will be change automatically to reflect this.
+class SimpleActionServer:
+    ## @brief Constructor for a SimpleActionServer
+    ## @param name A name for the action server
+    ## @param execute_cb Optional callback that gets called in a separate thread whenever
+    ## a new goal is received, allowing users to have blocking callbacks.
+    ## Adding an execute callback also deactivates the goalCallback.
+    ## @param  auto_start A boolean value that tells the ActionServer wheteher or not to start publishing as soon as it comes up. THIS SHOULD ALWAYS BE SET TO FALSE TO AVOID RACE CONDITIONS and start() should be called after construction of the server.
+    def __init__(self, name, ActionSpec, execute_cb=None, auto_start=True):
+
+        self.new_goal = False
+        self.preempt_request = False
+        self.new_goal_preempt_request = False
+
+        self.execute_callback = execute_cb
+        self.goal_callback = None
+        self.preempt_callback = None
+
+        self.need_to_terminate = False
+        self.terminate_mutex = threading.RLock()
+
+        # since the internal_goal/preempt_callbacks are invoked from the
+        # ActionServer while holding the self.action_server.lock
+        # self.lock must always be locked after the action server lock
+        # to avoid an inconsistent lock acquisition order
+        self.lock = threading.RLock()
+
+        self.execute_condition = threading.Condition(self.lock)
+
+        self.current_goal = ServerGoalHandle()
+        self.next_goal = ServerGoalHandle()
+
+        if self.execute_callback:
+            self.execute_thread = threading.Thread(None, self.executeLoop)
+            self.execute_thread.start()
+        else:
+            self.execute_thread = None
+
+        # create the action server
+        self.action_server = ActionServer(name, ActionSpec, self.internal_goal_callback, self.internal_preempt_callback, auto_start)
+
+    def __del__(self):
+        if hasattr(self, 'execute_callback') and self.execute_callback:
+            with self.terminate_mutex:
+                self.need_to_terminate = True
+
+            assert(self.execute_thread)
+            self.execute_thread.join()
+
+    ## @brief Accepts a new goal when one is available The status of this
+    ## goal is set to active upon acceptance, and the status of any
+    ## previously active goal is set to preempted. Preempts received for the
+    ## new goal between checking if isNewGoalAvailable or invokation of a
+    ## goal callback and the acceptNewGoal call will not trigger a preempt
+    ## callback.  This means, isPreemptReqauested should be called after
+    ## accepting the goal even for callback-based implementations to make
+    ## sure the new goal does not have a pending preempt request.
+    ## @return A shared_ptr to the new goal.
+    def accept_new_goal(self):
+        with self.action_server.lock, self.lock:
+            if not self.new_goal or not self.next_goal.get_goal():
+                rospy.logerr("Attempting to accept the next goal when a new goal is not available")
+                return None
+
+            # check if we need to send a preempted message for the goal that we're currently pursuing
+            if self.is_active() and self.current_goal.get_goal() and self.current_goal != self.next_goal:
+                self.current_goal.set_canceled(None, "This goal was canceled because another goal was received by the simple action server")
+
+            rospy.logdebug("Accepting a new goal")
+
+            # accept the next goal
+            self.current_goal = self.next_goal
+            self.new_goal = False
+
+            # set preempt to request to equal the preempt state of the new goal
+            self.preempt_request = self.new_goal_preempt_request
+            self.new_goal_preempt_request = False
+
+            # set the status of the current goal to be active
+            self.current_goal.set_accepted("This goal has been accepted by the simple action server")
+
+            return self.current_goal.get_goal()
+
+    ## @brief Allows  polling implementations to query about the availability of a new goal
+    ## @return True if a new goal is available, false otherwise
+    def is_new_goal_available(self):
+        return self.new_goal
+
+    ## @brief Allows  polling implementations to query about preempt requests
+    ## @return True if a preempt is requested, false otherwise
+    def is_preempt_requested(self):
+        return self.preempt_request
+
+    ## @brief Allows  polling implementations to query about the status of the current goal
+    ## @return True if a goal is active, false otherwise
+    def is_active(self):
+        if not self.current_goal.get_goal():
+            return False
+
+        status = self.current_goal.get_goal_status().status
+        return status == GoalStatus.ACTIVE or status == GoalStatus.PREEMPTING
+
+    ## @brief Sets the status of the active goal to succeeded
+    ## @param  result An optional result to send back to any clients of the goal
+    def set_succeeded(self, result=None, text=""):
+        with self.action_server.lock, self.lock:
+            if not result:
+                result = self.get_default_result()
+            self.current_goal.set_succeeded(result, text)
+
+    ## @brief Sets the status of the active goal to aborted
+    ## @param  result An optional result to send back to any clients of the goal
+    def set_aborted(self, result=None, text=""):
+        with self.action_server.lock, self.lock:
+            if not result:
+                result = self.get_default_result()
+            self.current_goal.set_aborted(result, text)
+
+    ## @brief Publishes feedback for a given goal
+    ## @param  feedback Shared pointer to the feedback to publish
+    def publish_feedback(self, feedback):
+        self.current_goal.publish_feedback(feedback)
+
+    def get_default_result(self):
+        return self.action_server.ActionResultType()
+
+    ## @brief Sets the status of the active goal to preempted
+    ## @param  result An optional result to send back to any clients of the goal
+    def set_preempted(self, result=None, text=""):
+        if not result:
+            result = self.get_default_result()
+        with self.action_server.lock, self.lock:
+            rospy.logdebug("Setting the current goal as canceled")
+            self.current_goal.set_canceled(result, text)
+
+    ## @brief Allows users to register a callback to be invoked when a new goal is available
+    ## @param cb The callback to be invoked
+    def register_goal_callback(self, cb):
+        if self.execute_callback:
+            rospy.logwarn("Cannot call SimpleActionServer.register_goal_callback() because an executeCallback exists. Not going to register it.")
+        else:
+            self.goal_callback = cb
+
+    ## @brief Allows users to register a callback to be invoked when a new preempt request is available
+    ## @param cb The callback to be invoked
+    def register_preempt_callback(self, cb):
+        self.preempt_callback = cb
+
+    ## @brief Explicitly start the action server, used it auto_start is set to false
+    def start(self):
+        self.action_server.start()
+
+    ## @brief Callback for when the ActionServer receives a new goal and passes it on
+    def internal_goal_callback(self, goal):
+        self.execute_condition.acquire()
+
+        try:
+            rospy.logdebug("A new goal %s has been received by the single goal action server", goal.get_goal_id().id)
+
+            # check that the timestamp is past that of the current goal and the next goal
+            if((not self.current_goal.get_goal() or goal.get_goal_id().stamp >= self.current_goal.get_goal_id().stamp)
+               and (not self.next_goal.get_goal() or goal.get_goal_id().stamp >= self.next_goal.get_goal_id().stamp)):
+                # if next_goal has not been accepted already... its going to get bumped, but we need to let the client know we're preempting
+                if(self.next_goal.get_goal() and (not self.current_goal.get_goal() or self.next_goal != self.current_goal)):
+                    self.next_goal.set_canceled(None, "This goal was canceled because another goal was received by the simple action server")
+
+                self.next_goal = goal
+                self.new_goal = True
+                self.new_goal_preempt_request = False
+
+                # if the server is active, we'll want to call the preempt callback for the current goal
+                if(self.is_active()):
+                    self.preempt_request = True
+                    # if the user has registered a preempt callback, we'll call it now
+                    if(self.preempt_callback):
+                        self.preempt_callback()
+
+                # if the user has defined a goal callback, we'll call it now
+                if self.goal_callback:
+                    self.goal_callback()
+
+                # Trigger runLoop to call execute()
+                self.execute_condition.notify()
+                self.execute_condition.release()
+            else:
+                # the goal requested has already been preempted by a different goal, so we're not going to execute it
+                goal.set_canceled(None, "This goal was canceled because another goal was received by the simple action server")
+                self.execute_condition.release()
+        except Exception as e:
+            rospy.logerr("SimpleActionServer.internal_goal_callback - exception %s", str(e))
+            self.execute_condition.release()
+
+    ## @brief Callback for when the ActionServer receives a new preempt and passes it on
+    def internal_preempt_callback(self, preempt):
+        with self.lock:
+            rospy.logdebug("A preempt has been received by the SimpleActionServer")
+
+            # if the preempt is for the current goal, then we'll set the preemptRequest flag and call the user's preempt callback
+            if(preempt == self.current_goal):
+                rospy.logdebug("Setting preempt_request bit for the current goal to TRUE and invoking callback")
+                self.preempt_request = True
+
+                # if the user has registered a preempt callback, we'll call it now
+                if(self.preempt_callback):
+                    self.preempt_callback()
+            # if the preempt applies to the next goal, we'll set the preempt bit for that
+            elif(preempt == self.next_goal):
+                rospy.logdebug("Setting preempt request bit for the next goal to TRUE")
+                self.new_goal_preempt_request = True
+
+    ## @brief Called from a separate thread to call blocking execute calls
+    def executeLoop(self):
+        loop_duration = rospy.Duration.from_sec(.1)
+
+        while (not rospy.is_shutdown()):
+            with self.terminate_mutex:
+                if (self.need_to_terminate):
+                    break
+
+            # the following checks (is_active, is_new_goal_available)
+            # are performed without locking
+            # the worst thing that might happen in case of a race
+            # condition is a warning/error message on the console
+            if (self.is_active()):
+                rospy.logerr("Should never reach this code with an active goal")
+                return
+
+            if (self.is_new_goal_available()):
+                # accept_new_goal() is performing its own locking
+                goal = self.accept_new_goal()
+                if not self.execute_callback:
+                    rospy.logerr("execute_callback_ must exist. This is a bug in SimpleActionServer")
+                    return
+
+                try:
+                    self.execute_callback(goal)
+
+                    if self.is_active():
+                        rospy.logwarn("Your executeCallback did not set the goal to a terminal status.  " +
+                                      "This is a bug in your ActionServer implementation. Fix your code!  " +
+                                      "For now, the ActionServer will set this goal to aborted")
+                        self.set_aborted(None, "No terminal state was set.")
+                except Exception as ex:
+                    rospy.logerr("Exception in your execute callback: %s\n%s", str(ex),
+                                 traceback.format_exc())
+                    self.set_aborted(None, "Exception in execute callback: %s" % str(ex))
+
+            with self.execute_condition:
+                self.execute_condition.wait(loop_duration.to_sec())
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/src/actionlib/status_tracker.py
@@ -0,0 +1,72 @@
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+# Author: Alexander Sorokin.
+# Based on C++ goal_id_generator.h/cpp
+import rospy
+
+import actionlib_msgs.msg
+from actionlib import goal_id_generator
+
+
+class StatusTracker:
+    """
+    * @class StatusTracker
+    * @brief A class for storing the status of each goal the action server
+    * is currently working on
+    """
+
+    def __init__(self, goal_id=None, status=None, goal=None):
+        """
+        @brief create status tracker. Either pass goal_id and status OR goal
+        """
+        self.goal = None
+        self.handle_tracker = None
+        self.status = actionlib_msgs.msg.GoalStatus()
+
+        self.handle_destruction_time = rospy.Time()
+
+        self.id_generator = goal_id_generator.GoalIDGenerator()
+
+        if goal_id:
+            # set the goal id and status appropriately
+            self.status.goal_id = goal_id
+            self.status.status = status
+        else:
+            self.goal = goal
+            self.status.goal_id = goal.goal_id
+
+            # initialize the status of the goal to pending
+            self.status.status = actionlib_msgs.msg.GoalStatus.PENDING
+
+            # if the goal id is zero, then we need to make up an id for the goal
+            if self.status.goal_id.id == "":
+                self.status.goal_id = self.id_generator.generate_ID()
+
+            # if the timestamp of the goal is zero, then we'll set it to now()
+            if self.status.goal_id.stamp == rospy.Time():
+                self.status.goal_id.stamp = rospy.Time.now()
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/src/connection_monitor.cpp
@@ -0,0 +1,283 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+
+#include <actionlib/client/connection_monitor.h>
+#include <ros/ros.h>
+
+#include <map>
+#include <sstream>
+#include <string>
+
+// using namespace actionlib;
+
+
+#define CONNECTION_DEBUG(fmt, ...) \
+  ROS_DEBUG_NAMED("ConnectionMonitor", fmt, ## __VA_ARGS__)
+
+#define CONNECTION_WARN(fmt, ...) \
+  ROS_WARN_NAMED("ConnectionMonitor", fmt, ## __VA_ARGS__)
+
+
+actionlib::ConnectionMonitor::ConnectionMonitor(ros::Subscriber & feedback_sub,
+  ros::Subscriber & result_sub)
+: feedback_sub_(feedback_sub), result_sub_(result_sub)
+{
+  status_received_ = false;
+}
+
+// ********* Goal Connections *********
+
+void actionlib::ConnectionMonitor::goalConnectCallback(const ros::SingleSubscriberPublisher & pub)
+{
+  boost::recursive_mutex::scoped_lock lock(data_mutex_);
+
+  // Check if it's not in the list
+  if (goalSubscribers_.find(pub.getSubscriberName()) == goalSubscribers_.end()) {
+    CONNECTION_DEBUG("goalConnectCallback: Adding [%s] to goalSubscribers",
+      pub.getSubscriberName().c_str());
+    goalSubscribers_[pub.getSubscriberName()] = 1;
+  } else {
+    CONNECTION_WARN(
+      "goalConnectCallback: Trying to add [%s] to goalSubscribers, but it is already in the goalSubscribers list",
+      pub.getSubscriberName().c_str());
+    goalSubscribers_[pub.getSubscriberName()]++;
+  }
+  CONNECTION_DEBUG("%s", goalSubscribersString().c_str());
+
+  check_connection_condition_.notify_all();
+}
+
+void actionlib::ConnectionMonitor::goalDisconnectCallback(const ros::SingleSubscriberPublisher & pub)
+{
+  boost::recursive_mutex::scoped_lock lock(data_mutex_);
+
+  std::map<std::string, size_t>::iterator it;
+  it = goalSubscribers_.find(pub.getSubscriberName());
+
+  if (it == goalSubscribers_.end()) {
+    CONNECTION_WARN(
+      "goalDisconnectCallback: Trying to remove [%s] to goalSubscribers, but it is not in the goalSubscribers list",
+      pub.getSubscriberName().c_str());
+  } else {
+    CONNECTION_DEBUG("goalDisconnectCallback: Removing [%s] from goalSubscribers",
+      pub.getSubscriberName().c_str());
+    goalSubscribers_[pub.getSubscriberName()]--;
+    if (goalSubscribers_[pub.getSubscriberName()] == 0) {
+      goalSubscribers_.erase(it);
+    }
+  }
+  CONNECTION_DEBUG("%s", goalSubscribersString().c_str());
+}
+
+std::string actionlib::ConnectionMonitor::goalSubscribersString()
+{
+  boost::recursive_mutex::scoped_lock lock(data_mutex_);
+  std::ostringstream ss;
+  ss << "Goal Subscribers (" << goalSubscribers_.size() << " total)";
+  for (std::map<std::string, size_t>::iterator it = goalSubscribers_.begin();
+    it != goalSubscribers_.end(); it++)
+  {
+    ss << "\n   - " << it->first;
+  }
+  return ss.str();
+}
+
+// ********* Cancel Connections *********
+
+void actionlib::ConnectionMonitor::cancelConnectCallback(const ros::SingleSubscriberPublisher & pub)
+{
+  boost::recursive_mutex::scoped_lock lock(data_mutex_);
+
+  // Check if it's not in the list
+  if (cancelSubscribers_.find(pub.getSubscriberName()) == cancelSubscribers_.end()) {
+    CONNECTION_DEBUG("cancelConnectCallback: Adding [%s] to cancelSubscribers",
+      pub.getSubscriberName().c_str());
+    cancelSubscribers_[pub.getSubscriberName()] = 1;
+  } else {
+    CONNECTION_WARN(
+      "cancelConnectCallback: Trying to add [%s] to cancelSubscribers, but it is already in the cancelSubscribers list",
+      pub.getSubscriberName().c_str());
+    cancelSubscribers_[pub.getSubscriberName()]++;
+  }
+  CONNECTION_DEBUG("%s", cancelSubscribersString().c_str());
+
+  check_connection_condition_.notify_all();
+}
+
+void actionlib::ConnectionMonitor::cancelDisconnectCallback(
+  const ros::SingleSubscriberPublisher & pub)
+{
+  boost::recursive_mutex::scoped_lock lock(data_mutex_);
+
+  std::map<std::string, size_t>::iterator it;
+  it = cancelSubscribers_.find(pub.getSubscriberName());
+
+  if (it == cancelSubscribers_.end()) {
+    CONNECTION_WARN(
+      "cancelDisconnectCallback: Trying to remove [%s] to cancelSubscribers, but it is not in the cancelSubscribers list",
+      pub.getSubscriberName().c_str());
+  } else {
+    CONNECTION_DEBUG("cancelDisconnectCallback: Removing [%s] from cancelSubscribers",
+      pub.getSubscriberName().c_str());
+    cancelSubscribers_[pub.getSubscriberName()]--;
+    if (cancelSubscribers_[pub.getSubscriberName()] == 0) {
+      cancelSubscribers_.erase(it);
+    }
+  }
+  CONNECTION_DEBUG("%s", cancelSubscribersString().c_str());
+}
+
+std::string actionlib::ConnectionMonitor::cancelSubscribersString()
+{
+  boost::recursive_mutex::scoped_lock lock(data_mutex_);
+
+  std::ostringstream ss;
+  ss << "cancel Subscribers (" << cancelSubscribers_.size() << " total)";
+  for (std::map<std::string, size_t>::iterator it = cancelSubscribers_.begin();
+    it != cancelSubscribers_.end(); it++)
+  {
+    ss << "\n   - " << it->first;
+  }
+  return ss.str();
+}
+
+// ********* GoalStatus Connections *********
+void actionlib::ConnectionMonitor::processStatus(
+  const actionlib_msgs::GoalStatusArrayConstPtr & status, const std::string & cur_status_caller_id)
+{
+  boost::recursive_mutex::scoped_lock lock(data_mutex_);
+
+  if (status_received_) {
+    if (status_caller_id_ != cur_status_caller_id) {
+      CONNECTION_WARN(
+        "processStatus: Previously received status from [%s], but we now received status from [%s]. Did the ActionServer change?",
+        status_caller_id_.c_str(), cur_status_caller_id.c_str());
+      status_caller_id_ = cur_status_caller_id;
+    }
+    latest_status_time_ = status->header.stamp;
+  } else {
+    CONNECTION_DEBUG(
+      "processStatus: Just got our first status message from the ActionServer at node [%s]",
+      cur_status_caller_id.c_str());
+    status_received_ = true;
+    status_caller_id_ = cur_status_caller_id;
+    latest_status_time_ = status->header.stamp;
+  }
+
+  check_connection_condition_.notify_all();
+}
+
+// ********* Connection logic *********
+bool actionlib::ConnectionMonitor::isServerConnected()
+{
+  boost::recursive_mutex::scoped_lock lock(data_mutex_);
+
+  if (!status_received_) {
+    CONNECTION_DEBUG("isServerConnected: Didn't receive status yet, so not connected yet");
+    return false;
+  }
+
+  if (goalSubscribers_.find(status_caller_id_) == goalSubscribers_.end()) {
+    CONNECTION_DEBUG(
+      "isServerConnected: Server [%s] has not yet subscribed to the goal topic, so not connected yet",
+      status_caller_id_.c_str());
+    CONNECTION_DEBUG("%s", goalSubscribersString().c_str());
+    return false;
+  }
+
+  if (cancelSubscribers_.find(status_caller_id_) == cancelSubscribers_.end()) {
+    CONNECTION_DEBUG(
+      "isServerConnected: Server [%s] has not yet subscribed to the cancel topic, so not connected yet",
+      status_caller_id_.c_str());
+    CONNECTION_DEBUG("%s", cancelSubscribersString().c_str());
+    return false;
+  }
+
+  if (feedback_sub_.getNumPublishers() == 0) {
+    CONNECTION_DEBUG(
+      "isServerConnected: Client has not yet connected to feedback topic of server [%s]",
+      status_caller_id_.c_str());
+    return false;
+  }
+
+  if (result_sub_.getNumPublishers() == 0) {
+    CONNECTION_DEBUG(
+      "isServerConnected: Client has not yet connected to result topic of server [%s]",
+      status_caller_id_.c_str());
+    return false;
+  }
+
+  CONNECTION_DEBUG("isServerConnected: Server [%s] is fully connected", status_caller_id_.c_str());
+  return true;
+}
+
+bool actionlib::ConnectionMonitor::waitForActionServerToStart(const ros::Duration & timeout,
+  const ros::NodeHandle & nh)
+{
+  if (timeout < ros::Duration(0, 0)) {
+    ROS_ERROR_NAMED("actionlib", "Timeouts can't be negative. Timeout is [%.2fs]", timeout.toSec());
+  }
+
+  ros::Time timeout_time = ros::Time::now() + timeout;
+
+  boost::recursive_mutex::scoped_lock lock(data_mutex_);
+
+  if (isServerConnected()) {
+    return true;
+  }
+
+  // Hardcode how often we check for node.ok()
+  ros::Duration loop_period = ros::Duration().fromSec(.5);
+
+  while (nh.ok() && !isServerConnected()) {
+    // Determine how long we should wait
+    ros::Duration time_left = timeout_time - ros::Time::now();
+
+    // Check if we're past the timeout time
+    if (timeout != ros::Duration(0, 0) && time_left <= ros::Duration(0, 0) ) {
+      break;
+    }
+
+    // Truncate the time left
+    if (time_left > loop_period || timeout == ros::Duration()) {
+      time_left = loop_period;
+    }
+
+    check_connection_condition_.timed_wait(lock,
+      boost::posix_time::milliseconds(static_cast<int64_t>(time_left.toSec() * 1000.0f)));
+  }
+
+  return isServerConnected();
+}
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/src/goal_id_generator.cpp
@@ -0,0 +1,78 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+#include <ros/ros.h>
+#include <actionlib/goal_id_generator.h>
+#include <boost/thread/mutex.hpp>
+#include <string>
+
+// using namespace actionlib;
+
+static boost::mutex s_goalcount_mutex_;
+static unsigned int s_goalcount_ = 0;
+
+actionlib::GoalIDGenerator::GoalIDGenerator()
+{
+  setName(ros::this_node::getName());
+}
+
+actionlib::GoalIDGenerator::GoalIDGenerator(const std::string & name)
+{
+  setName(name);
+}
+
+void actionlib::GoalIDGenerator::setName(const std::string & name)
+{
+  name_ = name;
+}
+
+actionlib_msgs::GoalID actionlib::GoalIDGenerator::generateID()
+{
+  actionlib_msgs::GoalID id;
+  ros::Time cur_time = ros::Time::now();
+  std::stringstream ss;
+
+  ss << name_ << "-";
+
+  {
+    boost::mutex::scoped_lock lock(s_goalcount_mutex_);
+    s_goalcount_++;
+    ss << s_goalcount_ << "-";
+  }
+
+  ss << cur_time.sec << "." << cur_time.nsec;
+  id.id = ss.str();
+  id.stamp = cur_time;
+  return id;
+}
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/CMakeLists.txt
@@ -0,0 +1,75 @@
+if(GTEST_FOUND)
+  include_directories(${GTEST_INCLUDE_DIRS})
+  link_directories(${GTEST_LIBRARY_DIRS})
+
+  add_executable(actionlib-add_two_ints_server EXCLUDE_FROM_ALL add_two_ints_server.cpp)
+  target_link_libraries(actionlib-add_two_ints_server ${PROJECT_NAME} ${GTEST_LIBRARIES})
+
+  add_executable(actionlib-ref_server EXCLUDE_FROM_ALL ref_server.cpp)
+  target_link_libraries(actionlib-ref_server ${PROJECT_NAME})
+
+  add_executable(actionlib-simple_client_test EXCLUDE_FROM_ALL simple_client_test.cpp)
+  target_link_libraries(actionlib-simple_client_test ${PROJECT_NAME} ${GTEST_LIBRARIES})
+
+  add_executable(actionlib-simple_execute_ref_server EXCLUDE_FROM_ALL simple_execute_ref_server.cpp)
+  target_link_libraries(actionlib-simple_execute_ref_server ${PROJECT_NAME})
+
+  add_executable(actionlib-server_goal_handle_destruction EXCLUDE_FROM_ALL server_goal_handle_destruction.cpp)
+  target_link_libraries(actionlib-server_goal_handle_destruction ${PROJECT_NAME} ${GTEST_LIBRARIES})
+
+  add_executable(actionlib-simple_client_wait_test EXCLUDE_FROM_ALL simple_client_wait_test.cpp)
+  target_link_libraries(actionlib-simple_client_wait_test ${PROJECT_NAME} ${GTEST_LIBRARIES})
+
+  add_executable(actionlib-simple_client_allocator_test EXCLUDE_FROM_ALL simple_client_allocator_test.cpp)
+  target_link_libraries(actionlib-simple_client_allocator_test ${PROJECT_NAME} ${GTEST_LIBRARIES})
+
+  add_executable(actionlib-simple_action_server_construction_test EXCLUDE_FROM_ALL simple_action_server_construction_test.cpp)
+  target_link_libraries(actionlib-simple_action_server_construction_test ${PROJECT_NAME} ${GTEST_LIBRARIES})
+
+  add_executable(actionlib-action_client_destruction_test EXCLUDE_FROM_ALL action_client_destruction_test.cpp)
+  target_link_libraries(actionlib-action_client_destruction_test ${PROJECT_NAME} ${GTEST_LIBRARIES})
+
+  add_executable(actionlib-test_cpp_simple_client_cancel_crash EXCLUDE_FROM_ALL test_cpp_simple_client_cancel_crash.cpp)
+  target_link_libraries(actionlib-test_cpp_simple_client_cancel_crash ${PROJECT_NAME} ${GTEST_LIBRARIES})
+
+  add_executable(actionlib-exercise_simple_client EXCLUDE_FROM_ALL exercise_simple_client.cpp)
+  target_link_libraries(actionlib-exercise_simple_client ${PROJECT_NAME} ${GTEST_LIBRARIES})
+
+  if(TARGET tests)
+    add_dependencies(tests
+      actionlib-add_two_ints_server
+      actionlib-ref_server
+      actionlib-simple_client_test
+      actionlib-simple_execute_ref_server
+      actionlib-server_goal_handle_destruction
+      actionlib-simple_client_wait_test
+      actionlib-simple_client_allocator_test
+      actionlib-simple_action_server_construction_test
+      actionlib-action_client_destruction_test
+      actionlib-test_cpp_simple_client_cancel_crash
+      actionlib-exercise_simple_client
+    )
+  endif()
+endif()
+
+add_rostest(ref_server_test.launch)
+add_rostest(simple_execute_ref_server_test.launch)
+add_rostest(test_python_simple_client.launch)
+add_rostest(test_cpp_simple_client_allocator.launch)
+add_rostest(test_cpp_action_client_destruction.launch)
+add_rostest(test_server_goal_handle_destruction.launch)
+add_rostest(test_cpp_simple_client_cancel_crash.launch)
+add_rostest(test_imports.launch)
+add_rostest(test_python_server_components.launch)
+add_rostest(test_python_server.launch)
+add_rostest(test_python_server2.launch)
+add_rostest(test_python_server3.launch)
+add_rostest(test_python_simple_server.launch)
+add_rostest(test_cpp_exercise_simple_client.launch)
+add_rostest(test_python_exercise_simple_client.launch)
+add_rostest(test_simple_action_server_deadlock_python.launch)
+
+catkin_add_gtest(actionlib-destruction_guard_test destruction_guard_test.cpp)
+if(TARGET actionlib-destruction_guard_test)
+  target_link_libraries(actionlib-destruction_guard_test ${PROJECT_NAME})
+endif()
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/action_client_destruction_test.cpp
@@ -0,0 +1,63 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+//! \author Vijay Pradeep
+
+#include <gtest/gtest.h>
+#include <actionlib/TestAction.h>
+#include <actionlib/client/simple_action_client.h>
+#include <stdlib.h>
+
+using namespace actionlib;
+
+TEST(ActionClientDestruction, persistent_goal_handles_1) {
+  ActionClient<TestAction> * test_client = new ActionClient<TestAction>("test_action");
+
+  ClientGoalHandle<TestAction> gh = test_client->sendGoal(TestGoal());
+
+  ros::Duration(.1).sleep();
+
+  printf("Destroying ActionClient\n");
+  delete test_client;
+  printf("Done Destroying ActionClient\n");
+}
+
+int main(int argc, char ** argv)
+{
+  testing::InitGoogleTest(&argc, argv);
+
+  ros::init(argc, argv, "simple_client_allocator");
+
+  return RUN_ALL_TESTS();
+}
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/add_two_ints_client.cpp
@@ -0,0 +1,65 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2009, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+#include <ros/ros.h>
+#include <actionlib/client/service_client.h>
+#include <actionlib/TwoIntsAction.h>
+
+int main(int argc, char ** argv)
+{
+  ros::init(argc, argv, "add_two_ints_client");
+  if (argc != 3) {
+    ROS_INFO_NAMED("actionlib", "Usage: add_two_ints_client X Y");
+    return 1;
+  }
+
+  ros::NodeHandle n;
+  actionlib::ServiceClient client = actionlib::serviceClient<actionlib::TwoIntsAction>(n,
+      "add_two_ints");
+  client.waitForServer();
+  actionlib::TwoIntsGoal req;
+  actionlib::TwoIntsResult resp;
+
+  req.a = atoi(argv[1]);
+  req.b = atoi(argv[2]);
+
+  if (client.call(req, resp)) {
+    ROS_INFO_NAMED("actionlib", "Sum: %ld", (int64_t)resp.sum);
+    return 1;
+  }
+
+  return 0;
+}
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/add_two_ints_server.cpp
@@ -0,0 +1,61 @@
+/*********************************************************************
+*
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2009, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*
+* Author: Eitan Marder-Eppstein
+*********************************************************************/
+#include <ros/ros.h>
+#include <actionlib/server/service_server.h>
+#include <actionlib/TwoIntsAction.h>
+
+bool add(const actionlib::TwoIntsGoal & req, actionlib::TwoIntsResult & res)
+{
+  res.sum = req.a + req.b;
+  ROS_INFO_NAMED("actionlib", "request: x=%ld, y=%ld", (int64_t)req.a, (int64_t)req.b);
+  ROS_INFO_NAMED("actionlib", "   sending back response: [%ld]", (int64_t)res.sum);
+  return true;
+}
+
+int main(int argc, char ** argv)
+{
+  ros::init(argc, argv, "add_two_ints_server");
+  ros::NodeHandle n;
+
+  actionlib::ServiceServer service = actionlib::advertiseService<actionlib::TwoIntsAction>(n,
+      "add_two_ints",
+      boost::bind(add, _1, _2));
+
+  ros::spin();
+
+  return 0;
+}
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/destruction_guard_test.cpp
@@ -0,0 +1,131 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+//! \author Vijay Pradeep
+
+#include <gtest/gtest.h>
+#include <actionlib/destruction_guard.h>
+#include <boost/thread.hpp>
+#include <boost/bind.hpp>
+
+using namespace actionlib;
+
+class TestRunner : public testing::Test
+{
+public:
+  TestRunner()
+  : done_protecting_(false)
+  {
+  }
+
+  void protectingThread()
+  {
+    DestructionGuard::ScopedProtector protector_1(guard_);
+    EXPECT_TRUE(protector_1.isProtected());
+
+    DestructionGuard::ScopedProtector protector_2(guard_);
+    EXPECT_TRUE(protector_2.isProtected());
+
+    // Let the main thread know that we've successfully created to protectors
+    {
+      boost::mutex::scoped_lock lock(mutex_);
+      done_protecting_ = true;
+      cond_.notify_all();
+    }
+
+    // Don't destruct the protectors immeadiately. Sleep for a little bit, and then destruct.
+    //  This will force the main thread to have to wait in it's destruct() call
+    printf("protecting thread is sleeping\n");
+    boost::this_thread::sleep(boost::posix_time::microseconds(5000000));
+    printf("protecting thread is exiting\n");
+  }
+
+protected:
+  DestructionGuard guard_;
+
+  bool done_protecting_;
+  boost::mutex mutex_;
+  boost::condition cond_;
+};
+
+
+TEST_F(TestRunner, threaded_test) {
+  boost::thread spin_thread(boost::bind(&TestRunner::protectingThread, this));
+
+  {
+    boost::mutex::scoped_lock lock(mutex_);
+    while (!done_protecting_) {
+      cond_.timed_wait(lock, boost::posix_time::milliseconds(100));
+    }
+  }
+
+  printf("About to destruct\n");
+  guard_.destruct();
+  printf("Done destructing\n");
+
+  // Already 'destructed', so protector should fail
+  DestructionGuard::ScopedProtector protector(guard_);
+  EXPECT_FALSE(protector.isProtected());
+
+  spin_thread.join();
+}
+
+
+TEST(DestructionGuard, easy_test) {
+  DestructionGuard guard;
+
+  {
+    DestructionGuard::ScopedProtector protector_1(guard);
+    EXPECT_TRUE(protector_1.isProtected());
+
+    DestructionGuard::ScopedProtector protector_2(guard);
+    EXPECT_TRUE(protector_2.isProtected());
+  }
+
+  guard.destruct();
+
+  {
+    DestructionGuard::ScopedProtector protector_3(guard);
+    EXPECT_FALSE(protector_3.isProtected());
+  }
+}
+
+
+int main(int argc, char ** argv)
+{
+  testing::InitGoogleTest(&argc, argv);
+
+
+  return RUN_ALL_TESTS();
+}
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/exercise_simple_client.cpp
@@ -0,0 +1,181 @@
+/*
+ * Copyright (c) 2009, Willow Garage, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Willow Garage, Inc. nor the names of its
+ *       contributors may be used to endorse or promote products derived from
+ *       this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+// Derived from excercise_simple_server.py
+
+#include <gtest/gtest.h>
+#include <ros/ros.h>
+#include <actionlib/TestRequestAction.h>
+#include <actionlib/TestRequestGoal.h>
+#include <actionlib/client/simple_action_client.h>
+#include <actionlib_msgs/GoalStatus.h>
+
+
+#define EXPECT_STATE(expected_state) EXPECT_TRUE( \
+    ac_.getState() == SimpleClientGoalState::expected_state) \
+    << "Expected [" << #expected_state << "], but goal state is [" << ac_.getState().toString() << \
+    "]";
+
+
+using namespace actionlib;
+using namespace actionlib_msgs;
+
+class SimpleClientFixture : public testing::Test
+{
+public:
+  SimpleClientFixture()
+  : ac_("test_request_action"), default_wait_(60.0) {}
+
+protected:
+  virtual void SetUp()
+  {
+    // Make sure that the server comes up
+    ASSERT_TRUE(ac_.waitForServer(ros::Duration(10.0)) );
+  }
+
+  SimpleActionClient<TestRequestAction> ac_;
+  ros::Duration default_wait_;
+};
+
+TEST_F(SimpleClientFixture, just_succeed) {
+  TestRequestGoal goal;
+  goal.terminate_status = TestRequestGoal::TERMINATE_SUCCESS;
+  goal.the_result = 42;
+  ac_.sendGoal(goal);
+  ac_.waitForResult(default_wait_);
+  EXPECT_STATE(SUCCEEDED);
+  EXPECT_EQ(42, ac_.getResult()->the_result);
+}
+
+TEST_F(SimpleClientFixture, just_abort) {
+  TestRequestGoal goal;
+  goal.terminate_status = TestRequestGoal::TERMINATE_ABORTED;
+  goal.the_result = 42;
+  ac_.sendGoal(goal);
+  ac_.waitForResult(default_wait_);
+  EXPECT_STATE(ABORTED);
+  EXPECT_EQ(42, ac_.getResult()->the_result);
+}
+
+TEST_F(SimpleClientFixture, just_preempt) {
+  TestRequestGoal goal;
+  goal.terminate_status = TestRequestGoal::TERMINATE_SUCCESS;
+  goal.delay_terminate = ros::Duration(1000);
+  goal.the_result = 42;
+  ac_.sendGoal(goal);
+
+  // Sleep for 10 seconds or until we hear back from the action server
+  for (unsigned int i = 0; i < 100; i++) {
+    ROS_DEBUG_NAMED("actionlib", "Waiting for Server Response");
+    if (ac_.getState() != SimpleClientGoalState::PENDING) {
+      break;
+    }
+    ros::Duration(0.1).sleep();
+  }
+
+  ac_.cancelGoal();
+  ac_.waitForResult(default_wait_);
+  EXPECT_STATE(PREEMPTED);
+  EXPECT_EQ(42, ac_.getResult()->the_result);
+}
+
+TEST_F(SimpleClientFixture, drop) {
+  TestRequestGoal goal;
+  goal.terminate_status = TestRequestGoal::TERMINATE_DROP;
+  goal.the_result = 42;
+  ac_.sendGoal(goal);
+  ac_.waitForResult(default_wait_);
+  EXPECT_STATE(ABORTED);
+  EXPECT_EQ(0, ac_.getResult()->the_result);
+}
+
+TEST_F(SimpleClientFixture, exception) {
+  TestRequestGoal goal;
+  goal.terminate_status = TestRequestGoal::TERMINATE_EXCEPTION;
+  goal.the_result = 42;
+  ac_.sendGoal(goal);
+  ac_.waitForResult(default_wait_);
+  EXPECT_STATE(ABORTED);
+  EXPECT_EQ(0, ac_.getResult()->the_result);
+}
+
+TEST_F(SimpleClientFixture, ignore_cancel_and_succeed) {
+  TestRequestGoal goal;
+  goal.terminate_status = TestRequestGoal::TERMINATE_SUCCESS;
+  goal.delay_terminate = ros::Duration(2.0);
+  goal.ignore_cancel = true;
+  goal.the_result = 42;
+  ac_.sendGoal(goal);
+
+  // Sleep for 10 seconds or until we hear back from the action server
+  for (unsigned int i = 0; i < 100; i++) {
+    ROS_DEBUG_NAMED("actionlib", "Waiting for Server Response");
+    if (ac_.getState() != SimpleClientGoalState::PENDING) {
+      break;
+    }
+    ros::Duration(0.1).sleep();
+  }
+
+  ac_.cancelGoal();
+  ac_.waitForResult(default_wait_ + default_wait_);
+  EXPECT_STATE(SUCCEEDED);
+  EXPECT_EQ(42, ac_.getResult()->the_result);
+}
+
+TEST_F(SimpleClientFixture, lose) {
+  TestRequestGoal goal;
+  goal.terminate_status = TestRequestGoal::TERMINATE_LOSE;
+  goal.the_result = 42;
+  ac_.sendGoal(goal);
+  ac_.waitForResult(default_wait_);
+  EXPECT_STATE(LOST);
+}
+
+void spinThread()
+{
+  ros::NodeHandle nh;
+  ros::spin();
+}
+
+int main(int argc, char ** argv)
+{
+  testing::InitGoogleTest(&argc, argv);
+
+  ros::init(argc, argv, "simple_client_test");
+
+  boost::thread spin_thread(&spinThread);
+
+  int result = RUN_ALL_TESTS();
+
+  ros::shutdown();
+
+  spin_thread.join();
+
+  return result;
+}
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/exercise_simple_client.py
@@ -0,0 +1,145 @@
+#! /usr/bin/env python
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+PKG = 'actionlib'
+
+import sys
+import unittest
+import rospy
+import rostest
+from actionlib import SimpleActionClient
+from actionlib_msgs.msg import GoalStatus
+from actionlib.msg import TestRequestAction, TestRequestGoal
+
+
+class SimpleExerciser(unittest.TestCase):
+
+    def setUp(self):
+        self.default_wait = rospy.Duration(60.0)
+        self.client = SimpleActionClient('test_request_action', TestRequestAction)
+        self.assertTrue(self.client.wait_for_server(self.default_wait))
+
+    def test_just_succeed(self):
+        goal = TestRequestGoal(terminate_status=TestRequestGoal.TERMINATE_SUCCESS,
+                               the_result=42)
+        self.client.send_goal(goal)
+        self.client.wait_for_result(self.default_wait)
+
+        self.assertEqual(GoalStatus.SUCCEEDED, self.client.get_state())
+        self.assertEqual(42, self.client.get_result().the_result)
+
+    def test_just_abort(self):
+        goal = TestRequestGoal(terminate_status=TestRequestGoal.TERMINATE_ABORTED,
+                               the_result=42)
+        self.client.send_goal(goal)
+        self.client.wait_for_result(self.default_wait)
+
+        self.assertEqual(GoalStatus.ABORTED, self.client.get_state())
+        self.assertEqual(42, self.client.get_result().the_result)
+
+    def test_just_preempt(self):
+        goal = TestRequestGoal(terminate_status=TestRequestGoal.TERMINATE_SUCCESS,
+                               delay_terminate=rospy.Duration(100000),
+                               the_result=42)
+        self.client.send_goal(goal)
+
+        # Ensure that the action server got the goal, before continuing
+        timeout_time = rospy.Time.now() + self.default_wait
+        while rospy.Time.now() < timeout_time:
+            if (self.client.get_state() != GoalStatus.PENDING):
+                break
+        self.client.cancel_goal()
+
+        self.client.wait_for_result(self.default_wait)
+        self.assertEqual(GoalStatus.PREEMPTED, self.client.get_state())
+        self.assertEqual(42, self.client.get_result().the_result)
+
+    # Should print out errors about not setting a terminal status in the action server.
+    def test_drop(self):
+        goal = TestRequestGoal(terminate_status=TestRequestGoal.TERMINATE_DROP,
+                               the_result=42)
+        self.client.send_goal(goal)
+        self.client.wait_for_result(self.default_wait)
+
+        self.assertEqual(GoalStatus.ABORTED, self.client.get_state())
+        self.assertEqual(0, self.client.get_result().the_result)
+
+    # Should print out errors about throwing an exception
+    def test_exception(self):
+        goal = TestRequestGoal(terminate_status=TestRequestGoal.TERMINATE_EXCEPTION,
+                               the_result=42)
+        self.client.send_goal(goal)
+        self.client.wait_for_result(self.default_wait)
+
+        self.assertEqual(GoalStatus.ABORTED, self.client.get_state())
+        self.assertEqual(0, self.client.get_result().the_result)
+
+    def test_ignore_cancel_and_succeed(self):
+        goal = TestRequestGoal(terminate_status=TestRequestGoal.TERMINATE_SUCCESS,
+                               delay_terminate=rospy.Duration(2.0),
+                               ignore_cancel=True,
+                               the_result=42)
+        self.client.send_goal(goal)
+
+        # Ensure that the action server got the goal, before continuing
+        timeout_time = rospy.Time.now() + self.default_wait
+        while rospy.Time.now() < timeout_time:
+            if (self.client.get_state() != GoalStatus.PENDING):
+                break
+        self.client.cancel_goal()
+
+        self.client.wait_for_result(self.default_wait)
+
+        self.assertEqual(GoalStatus.SUCCEEDED, self.client.get_state())
+        self.assertEqual(42, self.client.get_result().the_result)
+
+    def test_lose(self):
+        goal = TestRequestGoal(terminate_status=TestRequestGoal.TERMINATE_LOSE,
+                               the_result=42)
+        self.client.send_goal(goal)
+        self.client.wait_for_result(self.default_wait)
+
+        self.assertEqual(GoalStatus.LOST, self.client.get_state())
+
+    # test_freeze_server has been removed, as it is undecided what should happen
+    # when the action server disappears.
+    #
+    # # def test_freeze_server(self):
+    # #     goal = TestRequestGoal(terminate_status = TestRequestGoal.TERMINATE_SUCCESS,
+    # #                            the_result = 42,
+    # #                            pause_status = rospy.Duration(10.0))
+    # #     self.client.send_goal(goal)
+    # #     self.client.wait_for_result(rospy.Duration(13.0))
+    # #
+    # #     self.assertEqual(GoalStatus.LOST, self.client.get_state())
+    #
+
+
+if __name__ == '__main__':
+    rospy.init_node("exercise_simple_server")
+    rostest.run(PKG, 'exercise_simple_server', SimpleExerciser, sys.argv)
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/mock_simple_server.py
@@ -0,0 +1,96 @@
+#! /usr/bin/env python
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+
+import time
+import rospy
+
+from actionlib.simple_action_server import SimpleActionServer
+from actionlib.server_goal_handle import ServerGoalHandle
+from actionlib.msg import TestRequestAction, TestRequestGoal, TestRequestResult
+
+
+class RefSimpleServer(SimpleActionServer):
+    def __init__(self, name):
+        SimpleActionServer.__init__(self, name, TestRequestAction, self.execute_cb, False)
+        self.start()
+
+    def execute_cb(self, goal):
+        rospy.logdebug("Goal:\n" + str(goal))
+        result = TestRequestResult(goal.the_result, True)
+
+        if goal.pause_status > rospy.Duration(0.0):
+            rospy.loginfo("Locking the action server for %.3f seconds" % goal.pause_status.to_sec())
+            status_continue_time = rospy.get_rostime() + goal.pause_status
+            # Takes the action server lock to prevent status from
+            # being published (simulates a freeze).
+            with self.action_server.lock:
+                while rospy.get_rostime() < status_continue_time:
+                    time.sleep(0.02)
+                rospy.loginfo("Unlocking the action server")
+
+        terminate_time = rospy.get_rostime() + goal.delay_terminate
+        while rospy.get_rostime() < terminate_time:
+            time.sleep(0.02)
+            if not goal.ignore_cancel:
+                if self.is_preempt_requested():
+                    self.set_preempted(result, goal.result_text)
+                    return
+
+        rospy.logdebug("Terminating goal as: %i" % goal.terminate_status)
+
+        if goal.terminate_status == TestRequestGoal.TERMINATE_SUCCESS:
+            self.set_succeeded(result, goal.result_text)
+        elif goal.terminate_status == TestRequestGoal.TERMINATE_ABORTED:
+            self.set_aborted(result, goal.result_text)
+        elif goal.terminate_status == TestRequestGoal.TERMINATE_REJECTED:
+            rospy.logerr("Simple action server cannot reject goals")
+            self.set_aborted(None, "Simple action server cannot reject goals")
+        elif goal.terminate_status == TestRequestGoal.TERMINATE_DROP:
+            rospy.loginfo("About to drop the goal.  This should produce an error message.")
+            return
+        elif goal.terminate_status == TestRequestGoal.TERMINATE_EXCEPTION:
+            rospy.loginfo("About to throw an exception.  This should produce an error message.")
+            raise Exception("Terminating by throwing an exception")
+        elif goal.terminate_status == TestRequestGoal.TERMINATE_LOSE:
+            # Losing the goal requires messing about in the action server's innards
+            for i, s in enumerate(self.action_server.status_list):
+                if s.status.goal_id.id == self.current_goal.goal.goal_id.id:
+                    del self.action_server.status_list[i]
+                    break
+            self.current_goal = ServerGoalHandle()
+        else:
+            rospy.logerr("Don't know how to terminate as %d" % goal.terminate_status)
+            self.set_aborted(None, "Don't know how to terminate as %d" % goal.terminate_status)
+
+
+if __name__ == '__main__':
+    rospy.init_node("ref_simple_server")
+    ref_server = RefSimpleServer("test_request_action")
+    print("Spinning")
+    rospy.spin()
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/ref_server.cpp
@@ -0,0 +1,107 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+//! \author Vijay Pradeep
+
+#include <actionlib/server/action_server.h>
+#include <actionlib/TestAction.h>
+#include <ros/ros.h>
+#include <cstdio>
+#include <string>
+
+namespace actionlib
+{
+
+class RefServer : public ActionServer<TestAction>
+{
+public:
+  typedef ServerGoalHandle<TestAction> GoalHandle;
+
+  RefServer(ros::NodeHandle & n, const std::string & name);
+
+private:
+  void goalCallback(GoalHandle gh);
+  void cancelCallback(GoalHandle gh);
+};
+
+}  // namespace actionlib
+
+using namespace actionlib;
+
+RefServer::RefServer(ros::NodeHandle & n, const std::string & name)
+: ActionServer<TestAction>(n, name,
+    boost::bind(&RefServer::goalCallback, this, _1),
+    boost::bind(&RefServer::cancelCallback, this, _1),
+    false)
+{
+  start();
+  printf("Creating ActionServer [%s]\n", name.c_str());
+}
+
+void RefServer::goalCallback(GoalHandle gh)
+{
+  TestGoal goal = *gh.getGoal();
+
+  switch (goal.goal) {
+    case 1:
+      gh.setAccepted();
+      gh.setSucceeded(TestResult(), "The ref server has succeeded");
+      break;
+    case 2:
+      gh.setAccepted();
+      gh.setAborted(TestResult(), "The ref server has aborted");
+      break;
+    case 3:
+      gh.setRejected(TestResult(), "The ref server has rejected");
+      break;
+    default:
+      break;
+  }
+}
+
+void RefServer::cancelCallback(GoalHandle)
+{
+}
+
+
+int main(int argc, char ** argv)
+{
+  ros::init(argc, argv, "ref_server");
+
+  ros::NodeHandle nh;
+
+  RefServer ref_server(nh, "reference_action");
+
+  ros::spin();
+}
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/ref_server.py
@@ -0,0 +1,103 @@
+#!/usr/bin/env python
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+# Author: Alexander Sorokin.
+# Based on code from ref_server.cpp by Vijay Pradeep
+PKG = 'actionlib'
+import rospy
+
+from actionlib.action_server import ActionServer
+from actionlib.msg import TestAction, TestFeedback, TestResult
+
+
+class RefServer (ActionServer):
+
+    def __init__(self, name):
+        action_spec = TestAction
+        ActionServer.__init__(
+            self, name, action_spec, self.goalCallback, self.cancelCallback, False)
+        self.start()
+        rospy.loginfo("Creating ActionServer [%s]\n", name)
+
+        self.saved_goals = []
+
+    def goalCallback(self, gh):
+        goal = gh.get_goal()
+
+        rospy.loginfo("Got goal %d", int(goal.goal))
+        if goal.goal == 1:
+            gh.set_accepted()
+            gh.set_succeeded(None, "The ref server has succeeded")
+        elif goal.goal == 2:
+            gh.set_accepted()
+            gh.set_aborted(None, "The ref server has aborted")
+        elif goal.goal == 3:
+            gh.set_rejected(None, "The ref server has rejected")
+        elif goal.goal == 4:
+            self.saved_goals.append(gh)
+            gh.set_accepted()
+        elif goal.goal == 5:
+            gh.set_accepted()
+            for g in self.saved_goals:
+                g.set_succeeded()
+            self.saved_goals = []
+            gh.set_succeeded()
+        elif goal.goal == 6:
+            gh.set_accepted()
+            for g in self.saved_goals:
+                g.set_aborted()
+            self.saved_goals = []
+            gh.set_succeeded()
+        elif goal.goal == 7:
+            gh.set_accepted()
+            n = len(self.saved_goals)
+            for i, g in enumerate(self.saved_goals):
+                g.publish_feedback(TestFeedback(n-i))
+            gh.set_succeeded()
+        elif goal.goal == 8:
+            gh.set_accepted()
+            n = len(self.saved_goals)
+            for i, g in enumerate(self.saved_goals):
+                if i % 2 == 0:
+                    g.set_succeeded(TestResult(n - i), "The ref server has succeeded")
+                else:
+                    g.set_aborted(TestResult(n - i), "The ref server has aborted")
+            self.saved_goals = []
+            gh.set_succeeded()
+        else:
+            pass
+
+    def cancelCallback(self, gh):
+        pass
+
+
+if __name__ == "__main__":
+    rospy.init_node("ref_server")
+    ref_server = RefServer("reference_action")
+
+    rospy.spin()
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/ref_server_test.launch
@@ -0,0 +1,5 @@
+<launch>
+  <node pkg="actionlib" type="actionlib-ref_server" name="ref_server" output="screen" />
+
+  <test test-name="ref_server_test" pkg="actionlib" type="actionlib-simple_client_test" />
+</launch>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/ref_simple_server.py
@@ -0,0 +1,79 @@
+#!/usr/bin/env python
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+# Author: Alexander Sorokin.
+# Based on code from ref_server.cpp by Vijay Pradeep
+PKG = 'actionlib'
+import rospy
+
+from actionlib.simple_action_server import SimpleActionServer
+from actionlib.msg import TestAction, TestFeedback
+
+
+class RefSimpleServer (SimpleActionServer):
+
+    def __init__(self, name):
+        action_spec = TestAction
+        SimpleActionServer.__init__(
+            self, name, action_spec, self.goal_callback, False)
+        self.start()
+        rospy.loginfo("Creating SimpleActionServer [%s]\n", name)
+
+    def goal_callback(self, goal):
+        rospy.loginfo("Got goal %d", int(goal.goal))
+        if goal.goal == 1:
+            self.set_succeeded(None, "The ref server has succeeded")
+        elif goal.goal == 2:
+            self.set_aborted(None, "The ref server has aborted")
+        elif goal.goal == 3:
+            self.set_aborted(None, "The simple action server can't reject goals")
+        elif goal.goal == 4:
+            self.set_aborted(None, "Simple server can't save goals")
+        elif goal.goal == 5:
+            self.set_aborted(None, "Simple server can't save goals")
+        elif goal.goal == 6:
+            self.set_aborted(None, "Simple server can't save goals")
+        elif goal.goal == 7:
+            self.set_aborted(None, "Simple server can't save goals")
+        elif goal.goal == 8:
+            self.set_aborted(None, "Simple server can't save goals")
+        elif goal.goal == 9:
+            rospy.sleep(1)
+            rospy.loginfo("Sending feedback")
+            self.publish_feedback(TestFeedback(9))  # by the goal ID
+            rospy.sleep(1)
+            self.set_succeeded(None, "The ref server has succeeded")
+        else:
+            pass
+
+
+if __name__ == "__main__":
+    rospy.init_node("ref_simple_server")
+    ref_server = RefSimpleServer("reference_simple_action")
+
+    rospy.spin()
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/server_goal_handle_destruction.cpp
@@ -0,0 +1,140 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+//! \author Eitan Marder-Eppstein
+
+#include <actionlib/server/action_server.h>
+#include <actionlib/TestAction.h>
+#include <actionlib/client/simple_action_client.h>
+#include <ros/ros.h>
+#include <gtest/gtest.h>
+
+namespace actionlib
+{
+
+class ServerGoalHandleDestructionTester
+{
+public:
+  typedef ServerGoalHandle<TestAction> GoalHandle;
+
+  ServerGoalHandleDestructionTester();
+
+  ros::NodeHandle nh_;
+  ActionServer<TestAction> * as_;
+  GoalHandle * gh_;
+
+  ~ServerGoalHandleDestructionTester();
+  void goalCallback(GoalHandle gh);
+};
+
+}  // namespace actionlib
+
+using namespace actionlib;
+
+ServerGoalHandleDestructionTester::ServerGoalHandleDestructionTester()
+{
+  as_ = new ActionServer<TestAction>(nh_, "reference_action", false);
+  as_->start();
+  as_->registerGoalCallback(boost::bind(&ServerGoalHandleDestructionTester::goalCallback, this,
+    _1));
+  gh_ = new GoalHandle();
+}
+
+ServerGoalHandleDestructionTester::~ServerGoalHandleDestructionTester()
+{
+  delete as_;
+  gh_->setAccepted();
+  delete gh_;
+}
+
+void ServerGoalHandleDestructionTester::goalCallback(GoalHandle gh)
+{
+  ROS_ERROR_NAMED("actionlib", "In callback");
+  // assign to our stored goal handle
+  *gh_ = gh;
+
+  TestGoal goal = *gh.getGoal();
+
+  switch (goal.goal) {
+    case 1:
+      gh.setAccepted();
+      gh.setSucceeded(TestResult(), "The ref server has succeeded");
+      break;
+    case 2:
+      gh.setAccepted();
+      gh.setAborted(TestResult(), "The ref server has aborted");
+      break;
+    case 3:
+      gh.setRejected(TestResult(), "The ref server has rejected");
+      break;
+    default:
+      break;
+  }
+
+  ros::shutdown();
+}
+
+void spinner()
+{
+  ros::spin();
+}
+
+TEST(ServerGoalHandleDestruction, destruction_test) {
+  boost::thread spin_thread(&spinner);
+
+  ServerGoalHandleDestructionTester server;
+
+  SimpleActionClient<TestAction> client("reference_action", true);
+
+  ROS_ERROR_NAMED("actionlib", "Waiting for server");
+  client.waitForServer();
+  ROS_ERROR_NAMED("actionlib", "Done waiting for server");
+
+  TestGoal goal;
+
+  goal.goal = 1;
+  client.sendGoal(goal);
+  ROS_ERROR_NAMED("actionlib", "Sending goal");
+
+  spin_thread.join();
+}
+
+int main(int argc, char ** argv)
+{
+  testing::InitGoogleTest(&argc, argv);
+
+  ros::init(argc, argv, "ref_server");
+
+  return RUN_ALL_TESTS();
+}
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/simple_action_server_construction_test.cpp
@@ -0,0 +1,92 @@
+/*********************************************************************
+ * Software License Agreement (BSD License)
+ *
+ *  Copyright (c) 2021, Smart Robotics BV.
+ *  All rights reserved.
+ *
+ *  Redistribution and use in source and binary forms, with or without
+ *  modification, are permitted provided that the following conditions
+ *  are met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/or other materials provided
+ *     with the distribution.
+ *   * Neither the name of the Willow Garage nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ *  POSSIBILITY OF SUCH DAMAGE.
+ *********************************************************************/
+
+//! \author Ramon Wijnands
+
+#include <actionlib/TestAction.h>
+#include <actionlib/server/simple_action_server.h>
+#include <gtest/gtest.h>
+#include <stdlib.h>
+
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+
+using namespace actionlib;
+
+TEST(SimpleActionServerConstruction, test_name_cb_autostart) {
+  SimpleActionServer<TestAction>::ExecuteCallback callback = [](const TestGoalConstPtr&){};
+  SimpleActionServer<TestAction> as("name", callback, false);
+}
+
+TEST(SimpleActionServerConstruction, test_name_autostart) {
+  SimpleActionServer<TestAction> as("name", false);
+}
+
+TEST(SimpleActionServerConstruction, test_name) {
+  SimpleActionServer<TestAction> as("name");
+}
+
+TEST(SimpleActionServerConstruction, test_name_cb) {
+  SimpleActionServer<TestAction>::ExecuteCallback callback = [](const TestGoalConstPtr&){};
+  SimpleActionServer<TestAction> as("name", callback);
+}
+
+TEST(SimpleActionServerConstruction, test_nh_name_cb_autostart) {
+  ros::NodeHandle nh;
+  SimpleActionServer<TestAction>::ExecuteCallback callback = [](const TestGoalConstPtr&){};
+  SimpleActionServer<TestAction> as(nh, "name", callback, false);
+}
+
+TEST(SimpleActionServerConstruction, test_nh_name_autostart) {
+  ros::NodeHandle nh;
+  SimpleActionServer<TestAction> as(nh, "name", false);
+}
+
+TEST(SimpleActionServerConstruction, test_nh_name) {
+  ros::NodeHandle nh;
+  SimpleActionServer<TestAction> as(nh, "name");
+}
+
+TEST(SimpleActionServerConstruction, test_nh_name_cb) {
+  ros::NodeHandle nh;
+  SimpleActionServer<TestAction>::ExecuteCallback callback = [](const TestGoalConstPtr&){};
+  SimpleActionServer<TestAction> as(nh, "name", callback);
+}
+
+int main(int argc, char **argv) {
+  testing::InitGoogleTest(&argc, argv);
+
+  ros::init(argc, argv, "simple_action_server_construction");
+
+  return RUN_ALL_TESTS();
+}
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/simple_action_server_deadlock_companion.py
@@ -0,0 +1,80 @@
+#! /usr/bin/env python
+#
+# Copyright (c) 2013, Miguel Sarabia
+# Imperial College London
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of Imperial College London nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+#
+
+
+class Constants:
+    node = "simple_action_server_deadlock_companion"
+    topic = "deadlock"
+    max_action_duration = 3
+
+
+import random
+
+import actionlib
+from actionlib.msg import TestAction, TestGoal
+from actionlib_msgs.msg import GoalStatus
+import rospy
+
+
+class DeadlockCompanion:
+
+    def __init__(self):
+        # Seed random with fully resolved name of node and current time
+        random.seed(rospy.get_name() + str(rospy.Time.now().to_sec()))
+
+        # Create actionlib client
+        self.action_client = actionlib.SimpleActionClient(
+            Constants.topic,
+            TestAction)
+
+    def run(self):
+        while not rospy.is_shutdown():
+            # Send dummy goal
+            self.action_client.send_goal(TestGoal())
+
+            # Wait for a random amount of time
+            action_duration = random.uniform(0, Constants.max_action_duration)
+            self.action_client.wait_for_result(rospy.Duration(action_duration))
+
+            state = self.action_client.get_state()
+            if state == GoalStatus.ACTIVE or state == GoalStatus.PENDING:
+                self.action_client.cancel_goal()
+
+
+if __name__ == '__main__':
+    rospy.init_node(Constants.node)
+    try:
+        companion = DeadlockCompanion()
+        companion.run()
+    except (KeyboardInterrupt, SystemExit):
+        raise
+    except:
+        pass
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/simple_client_allocator_test.cpp
@@ -0,0 +1,61 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+//! \author Vijay Pradeep
+
+#include <gtest/gtest.h>
+#include <actionlib/TestAction.h>
+#include <actionlib/client/simple_action_client.h>
+#include <stdlib.h>
+
+using namespace actionlib;
+
+TEST(SimpleClientAllocator, easy_test) {
+  typedef actionlib::SimpleActionClient<TestAction> TrajClient;
+
+  TrajClient * traj_client_ = new TrajClient("test_action", true);
+
+  ros::Duration(1, 0).sleep();
+
+  delete traj_client_;
+}
+
+int main(int argc, char ** argv)
+{
+  testing::InitGoogleTest(&argc, argv);
+
+  ros::init(argc, argv, "simple_client_allocator");
+
+  return RUN_ALL_TESTS();
+}
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/simple_client_test.cpp
@@ -0,0 +1,137 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+//! \author Vijay Pradeep
+
+#include <gtest/gtest.h>
+#include <actionlib/TestAction.h>
+#include <actionlib/client/simple_action_client.h>
+
+using namespace actionlib;
+
+TEST(SimpleClient, easy_tests) {
+  ros::NodeHandle n;
+  SimpleActionClient<TestAction> client(n, "reference_action");
+
+  bool started = client.waitForServer(ros::Duration(10.0));
+  ASSERT_TRUE(started);
+
+  TestGoal goal;
+  bool finished;
+
+  goal.goal = 1;
+  // sleep a bit to make sure that all topics are properly connected to the server.
+  ros::Duration(0.01).sleep();
+  client.sendGoal(goal);
+  finished = client.waitForResult(ros::Duration(10.0));
+  ASSERT_TRUE(finished);
+  EXPECT_TRUE( client.getState() == SimpleClientGoalState::SUCCEEDED)
+      << "Expected [SUCCEEDED], but goal state is [" << client.getState().toString() << "]";
+
+  // test that setting the text field for the status works
+  EXPECT_TRUE(client.getState().getText() == "The ref server has succeeded");
+
+  goal.goal = 2;
+  client.sendGoal(goal);
+  finished = client.waitForResult(ros::Duration(10.0));
+  ASSERT_TRUE(finished);
+  EXPECT_TRUE( client.getState() == SimpleClientGoalState::ABORTED)
+      << "Expected [ABORTED], but goal state is [" << client.getState().toString() << "]";
+
+  // test that setting the text field for the status works
+  EXPECT_TRUE(client.getState().getText() == "The ref server has aborted");
+
+  client.cancelAllGoals();
+
+  // Don't need this line, but keep it as a compilation check
+  client.cancelGoalsAtAndBeforeTime(ros::Time(1.0));
+}
+
+
+void easyDoneCallback(bool * called, SimpleActionClient<TestAction> * ac, const SimpleClientGoalState & state,
+  const TestResultConstPtr &)
+{
+  EXPECT_TRUE(ac->getState() == SimpleClientGoalState::SUCCEEDED)
+    << "Expected [SUCCEEDED], but getState() returned [" << ac->getState().toString() << "]";
+  EXPECT_TRUE(state == SimpleClientGoalState::SUCCEEDED)
+    << "Expected [SUCCEEDED], but goal state is [" << state.toString() << "]";
+  ros::Duration(0.1).sleep();
+  *called = true;
+}
+
+TEST(SimpleClient, easy_callback)
+{
+  ros::NodeHandle n;
+  SimpleActionClient<TestAction> client(n, "reference_action");
+
+  bool started = client.waitForServer(ros::Duration(10.0));
+  ASSERT_TRUE(started);
+
+  // sleep a bit to make sure that all topics are properly connected to the server.
+  ros::Duration(0.01).sleep();
+
+  TestGoal goal;
+  bool finished;
+
+  bool called = false;
+  goal.goal = 1;
+  SimpleActionClient<TestAction>::SimpleDoneCallback func = boost::bind(&easyDoneCallback, &called, &client, _1, _2);
+  client.sendGoal(goal, func);
+  finished = client.waitForResult(ros::Duration(10.0));
+  ASSERT_TRUE(finished);
+  EXPECT_TRUE(called) << "easyDoneCallback() was never called" ;
+}
+
+void spinThread()
+{
+  ros::NodeHandle nh;
+  ros::spin();
+}
+
+int main(int argc, char ** argv)
+{
+  testing::InitGoogleTest(&argc, argv);
+
+  ros::init(argc, argv, "simple_client_test");
+
+  boost::thread spin_thread(&spinThread);
+
+  int result = RUN_ALL_TESTS();
+
+  ros::shutdown();
+
+  spin_thread.join();
+
+  return result;
+}
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/simple_client_wait_test.cpp
@@ -0,0 +1,85 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+//! \author Vijay Pradeep
+
+#include <gtest/gtest.h>
+#include <actionlib/TestAction.h>
+#include <actionlib/client/simple_action_client.h>
+
+using namespace actionlib;
+
+TEST(SimpleClient, easy_wait_test) {
+  ros::NodeHandle n;
+  SimpleActionClient<TestAction> client(n, "reference_action");
+
+  bool started = client.waitForServer(ros::Duration(10.0));
+  ASSERT_TRUE(started);
+
+  TestGoal goal;
+  SimpleClientGoalState state(SimpleClientGoalState::LOST);
+
+  goal.goal = 1;
+  state = client.sendGoalAndWait(goal, ros::Duration(10, 0), ros::Duration(10, 0));
+  EXPECT_TRUE(state == SimpleClientGoalState::SUCCEEDED) <<
+    "Expected [SUCCEEDED], but goal state is [" << client.getState().toString() << "]";
+
+  goal.goal = 4;
+  state = client.sendGoalAndWait(goal, ros::Duration(2, 0), ros::Duration(1, 0));
+  EXPECT_TRUE(state == SimpleClientGoalState::PREEMPTED) <<
+    "Expected [PREEMPTED], but goal state is [" << client.getState().toString() << "]";
+}
+
+void spinThread()
+{
+  ros::NodeHandle nh;
+  ros::spin();
+}
+
+int main(int argc, char ** argv)
+{
+  testing::InitGoogleTest(&argc, argv);
+
+  ros::init(argc, argv, "simple_client_test");
+
+  boost::thread spin_thread(&spinThread);
+
+  int result = RUN_ALL_TESTS();
+
+  ros::shutdown();
+
+  spin_thread.join();
+
+  return result;
+}
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/simple_execute_ref_server.cpp
@@ -0,0 +1,109 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+//! \author Vijay Pradeep
+
+#include <actionlib/server/simple_action_server.h>
+#include <actionlib/TestAction.h>
+#include <ros/ros.h>
+
+namespace actionlib
+{
+
+class SimpleExecuteRefServer
+{
+public:
+  typedef ServerGoalHandle<TestAction> GoalHandle;
+
+  SimpleExecuteRefServer();
+
+private:
+  ros::NodeHandle nh_;
+  SimpleActionServer<TestAction> as_;
+
+  void executeCallback(const TestGoalConstPtr & goal);
+};
+
+}  // namespace actionlib
+
+using namespace actionlib;
+
+SimpleExecuteRefServer::SimpleExecuteRefServer()
+: as_(nh_, "reference_action", boost::bind(&SimpleExecuteRefServer::executeCallback, this,
+    _1), false)
+{
+  as_.start();
+}
+
+void SimpleExecuteRefServer::executeCallback(const TestGoalConstPtr & goal)
+{
+  ROS_DEBUG_NAMED("actionlib", "Got a goal of type [%u]", goal->goal);
+  switch (goal->goal) {
+    case 1:
+      ROS_DEBUG_NAMED("actionlib", "Got goal #1");
+      as_.setSucceeded(TestResult(), "The ref server has succeeded");
+      break;
+    case 2:
+      ROS_DEBUG_NAMED("actionlib", "Got goal #2");
+      as_.setAborted(TestResult(), "The ref server has aborted");
+      break;
+    case 4:
+      {
+        ROS_DEBUG_NAMED("actionlib", "Got goal #4");
+        ros::Duration sleep_dur(.1);
+        for (unsigned int i = 0; i < 100; i++) {
+          sleep_dur.sleep();
+          if (as_.isPreemptRequested()) {
+            as_.setPreempted();
+            return;
+          }
+        }
+        as_.setAborted();
+        break;
+      }
+    default:
+      break;
+  }
+}
+
+int main(int argc, char ** argv)
+{
+  ros::init(argc, argv, "ref_server");
+
+  SimpleExecuteRefServer server;
+
+  ros::spin();
+
+  return 0;
+}
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/simple_execute_ref_server_test.launch
@@ -0,0 +1,6 @@
+<launch>
+  <node pkg="actionlib" type="actionlib-simple_execute_ref_server" name="ref_server" output="screen" />
+
+  <test test-name="simple_client_test" pkg="actionlib" type="actionlib-simple_client_test" />
+  <test test-name="simple_client_wait_test" pkg="actionlib" type="actionlib-simple_client_wait_test" />
+</launch>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/simple_python_client_test.py
@@ -0,0 +1,61 @@
+#! /usr/bin/env python
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+import unittest
+import rospy
+from actionlib_msgs.msg import GoalStatus
+from actionlib import SimpleActionClient
+from actionlib.msg import TestAction, TestGoal
+
+
+class TestSimpleActionClient(unittest.TestCase):
+
+    def testsimple(self):
+        client = SimpleActionClient('reference_action', TestAction)
+        self.assertTrue(client.wait_for_server(rospy.Duration(10.0)),
+                        'Could not connect to the action server')
+
+        goal = TestGoal(1)
+        client.send_goal(goal)
+        self.assertTrue(client.wait_for_result(rospy.Duration(10.0)),
+                        "Goal didn't finish")
+        self.assertEqual(GoalStatus.SUCCEEDED, client.get_state())
+        self.assertEqual("The ref server has succeeded", client.get_goal_status_text())
+
+        goal = TestGoal(2)
+        client.send_goal(goal)
+        self.assertTrue(client.wait_for_result(rospy.Duration(10.0)),
+                        "Goal didn't finish")
+        self.assertEqual(GoalStatus.ABORTED, client.get_state())
+        self.assertEqual("The ref server has aborted", client.get_goal_status_text())
+
+
+if __name__ == '__main__':
+    import rostest
+    rospy.init_node('simple_python_client_test')
+    rostest.rosrun('actionlib', 'test_simple_action_client_python', TestSimpleActionClient)
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_cpp_action_client_destruction.launch
@@ -0,0 +1,3 @@
+<launch>
+  <test test-name="test_cpp_action_client_destruction" pkg="actionlib" type="actionlib-action_client_destruction_test"/>
+</launch>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_cpp_exercise_simple_client.launch
@@ -0,0 +1,9 @@
+<launch>
+
+  <node name="mock_simple_server"
+        pkg="actionlib" type="mock_simple_server.py" output="screen" />
+
+  <test test-name="test_cpp_simple_client" time-limit="90"
+        pkg="actionlib" type="actionlib-exercise_simple_client" />
+
+</launch>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_cpp_simple_client_allocator.launch
@@ -0,0 +1,3 @@
+<launch>
+  <test test-name="test_cpp_simple_client_allocator" pkg="actionlib" type="actionlib-simple_client_allocator_test"/>
+</launch>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_cpp_simple_client_cancel_crash.cpp
@@ -0,0 +1,61 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+//! \author Vijay Pradeep
+
+#include <gtest/gtest.h>
+#include <actionlib/client/simple_action_client.h>
+#include <actionlib/TestAction.h>
+#include <ros/ros.h>
+
+typedef actionlib::SimpleActionClient<actionlib::TestAction> Client;
+
+TEST(SimpleClientCancelCrash, uninitialized_crash) {
+  ros::NodeHandle nh;
+  Client client("test_client", true);
+  ROS_INFO_NAMED("actionlib", "calling cancelGoal()");
+  client.cancelGoal();
+  ROS_INFO_NAMED("actionlib", "Done calling cancelGoal()");
+  EXPECT_TRUE(true);
+  ROS_INFO_NAMED("actionlib", "Successfully done with test. Exiting");
+}
+
+int main(int argc, char ** argv)
+{
+  testing::InitGoogleTest(&argc, argv);
+
+  ros::init(argc, argv, "test_cpp_simple_client_cancel_crash");
+
+  return RUN_ALL_TESTS();
+}
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_cpp_simple_client_cancel_crash.launch
@@ -0,0 +1,3 @@
+<launch>
+  <test test-name="test_cpp_simple_client_cancel_crash" pkg="actionlib" type="actionlib-test_cpp_simple_client_cancel_crash"/>
+</launch>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_imports.launch
@@ -0,0 +1,3 @@
+<launch>
+  <test test-name="test_imports" pkg="actionlib" type="test_imports.py" />
+</launch>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_imports.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+# Author: Alexander Sorokin.
+
+
+PKG = 'actionlib'
+
+import sys
+import unittest
+
+
+# A simple unit test to make sure python module structure and files aren't broken
+class TestImports(unittest.TestCase):
+    # import everything
+    def test_imports(self):
+        from actionlib import simple_action_client
+        from actionlib import action_client
+
+        from actionlib import goal_id_generator
+        from actionlib import handle_tracker_deleter
+        from actionlib import server_goal_handle
+        from actionlib import status_tracker
+
+        from actionlib import action_server
+        from actionlib import simple_action_server
+
+        self.assertEqual(1, 1, "1!=1")
+
+
+if __name__ == '__main__':
+    import rostest
+    print(sys.path)
+    rostest.rosrun(PKG, 'test_imports', TestImports)
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_python_exercise_simple_client.launch
@@ -0,0 +1,9 @@
+<launch>
+
+  <node name="mock_simple_server"
+        pkg="actionlib" type="mock_simple_server.py" output="screen" />
+
+  <test test-name="test_py_simple_client"
+        pkg="actionlib" type="exercise_simple_client.py" />
+
+</launch>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_python_server.launch
@@ -0,0 +1,5 @@
+<launch>
+  <node pkg="actionlib" type="ref_server.py" name="ref_server" output="screen" />
+
+  <test test-name="test_python_server" pkg="actionlib" type="actionlib-simple_client_test"/>
+</launch>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_python_server2.launch
@@ -0,0 +1,5 @@
+<launch>
+  <node pkg="actionlib" type="ref_server.py" name="ref_server" output="screen" />
+
+  <test test-name="test_python_server" pkg="actionlib" type="simple_python_client_test.py"/>
+</launch>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_python_server3.launch
@@ -0,0 +1,5 @@
+<launch>
+  <node pkg="actionlib" type="ref_server.py" name="ref_server" output="screen" />
+
+  <test test-name="test_python_server3" pkg="actionlib" type="test_ref_action_server.py"/>
+</launch>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_python_server_components.launch
@@ -0,0 +1,3 @@
+<launch>
+  <test test-name="test_goal_id_generator" pkg="actionlib" type="test_server_components.py" />
+</launch>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_python_simple_client.launch
@@ -0,0 +1,5 @@
+<launch>
+  <node pkg="actionlib" type="actionlib-simple_execute_ref_server" name="ref_server" output="screen" />
+
+  <test test-name="simple_python_client_test" pkg="actionlib" type="simple_python_client_test.py" />
+</launch>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_python_simple_server.launch
@@ -0,0 +1,5 @@
+<launch>
+  <node pkg="actionlib" type="ref_simple_server.py" name="ref_simple_server" output="screen"/>
+
+  <test test-name="test_simple_python_server" pkg="actionlib" type="test_ref_simple_action_server.py" />
+</launch>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_ref_action_server.py
@@ -0,0 +1,174 @@
+#! /usr/bin/env python
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+PKG = 'actionlib'
+
+import unittest
+import rospy
+from actionlib_msgs.msg import GoalStatus
+# TODO(mikaelarguedas) use SimpleActionClient here if it makes sense
+# from actionlib import SimpleActionClient
+from actionlib import ActionClient
+from actionlib.msg import TestAction, TestGoal
+
+
+class TestRefSimpleActionServer(unittest.TestCase):
+
+    def testsimple(self):
+        return
+        client = ActionClient('reference_action', TestAction)
+        self.assertTrue(client.wait_for_action_server_to_start(rospy.Duration(2.0)),
+                        'Could not connect to the action server')
+
+        goal = TestGoal(1)
+        client.send_goal(goal)
+        self.assertTrue(client.wait_for_goal_to_finish(rospy.Duration(2.0)),
+                        "Goal didn't finish")
+        self.assertEqual(GoalStatus.SUCCEEDED, client.get_terminal_state())
+        self.assertEqual(GoalStatus.SUCCEEDED, client.get_state())
+
+        goal = TestGoal(2)
+        client.send_goal(goal)
+        self.assertTrue(client.wait_for_goal_to_finish(rospy.Duration(10.0)),
+                        "Goal didn't finish")
+        self.assertEqual(GoalStatus.ABORTED, client.get_terminal_state())
+        self.assertEqual(GoalStatus.ABORTED, client.get_state())
+
+    def test_abort(self):
+        client = ActionClient('reference_action', TestAction)
+        self.assertTrue(client.wait_for_server(rospy.Duration(2.0)),
+                        'Could not connect to the action server')
+
+        goal_work = TestGoal(4)
+        goal_abort = TestGoal(6)
+        goal_feedback = TestGoal(8)
+
+        g1 = client.send_goal(goal_work)
+        g2 = client.send_goal(goal_work)
+        g3 = client.send_goal(goal_work)
+        g4 = client.send_goal(goal_work)
+
+        rospy.sleep(0.5)
+        self.assertEqual(g1.get_goal_status(), GoalStatus.ACTIVE)  # ,"Should be active")
+        self.assertEqual(g2.get_goal_status(), GoalStatus.ACTIVE, "Should be active")
+        self.assertEqual(g3.get_goal_status(), GoalStatus.ACTIVE, "Shoule be active")
+        self.assertEqual(g4.get_goal_status(), GoalStatus.ACTIVE, "Should be active")
+
+        g5 = client.send_goal(goal_abort)
+        rospy.sleep(0.5)
+        self.assertEqual(g5.get_goal_status(), GoalStatus.SUCCEEDED, "Should be done")
+
+        self.assertEqual(g1.get_goal_status(), GoalStatus.ABORTED, "Should be aborted")
+        self.assertEqual(g2.get_goal_status(), GoalStatus.ABORTED, "Should be aborted")
+        self.assertEqual(g3.get_goal_status(), GoalStatus.ABORTED, "Shoule be aborted")
+        self.assertEqual(g4.get_goal_status(), GoalStatus.ABORTED, "Should be aborted")
+
+    def test_feedback(self):
+        client = ActionClient('reference_action', TestAction)
+        self.assertTrue(client.wait_for_server(rospy.Duration(2.0)),
+                        'Could not connect to the action server')
+
+        goal_work = TestGoal(4)
+        goal_abort = TestGoal(6)
+        goal_feedback = TestGoal(7)
+
+        rospy.logwarn("This is a hacky way to associate goals with feedback")
+        feedback = {}
+
+        def update_feedback(id, g, f):
+            feedback[id] = f
+
+        g1 = client.send_goal(goal_work, feedback_cb=lambda g, f: update_feedback(0, g, f))
+        g2 = client.send_goal(goal_work, feedback_cb=lambda g, f: update_feedback(1, g, f))
+        g3 = client.send_goal(goal_work, feedback_cb=lambda g, f: update_feedback(2, g, f))
+        g4 = client.send_goal(goal_work, feedback_cb=lambda g, f: update_feedback(3, g, f))
+
+        rospy.sleep(0.5)
+        self.assertEqual(g1.get_goal_status(), GoalStatus.ACTIVE, "Should be active")
+        self.assertEqual(g2.get_goal_status(), GoalStatus.ACTIVE, "Should be active")
+        self.assertEqual(g3.get_goal_status(), GoalStatus.ACTIVE, "Shoule be active")
+        self.assertEqual(g4.get_goal_status(), GoalStatus.ACTIVE, "Should be active")
+
+        g5 = client.send_goal(goal_feedback)
+        rospy.sleep(0.5)
+        self.assertEqual(g5.get_goal_status(), GoalStatus.SUCCEEDED, "Should be done")
+
+        self.assertEqual(g1.get_goal_status(), GoalStatus.ACTIVE)
+        self.assertEqual(feedback[0].feedback, 4)
+        self.assertEqual(g2.get_goal_status(), GoalStatus.ACTIVE)
+        self.assertEqual(feedback[1].feedback, 3)
+        self.assertEqual(g3.get_goal_status(), GoalStatus.ACTIVE)
+        self.assertEqual(feedback[2].feedback, 2)
+        self.assertEqual(g4.get_goal_status(), GoalStatus.ACTIVE)
+        self.assertEqual(feedback[3].feedback, 1)
+
+        g6 = client.send_goal(goal_abort)
+        rospy.sleep(0.5)
+
+    def test_result(self):
+        client = ActionClient('reference_action', TestAction)
+        self.assertTrue(client.wait_for_server(rospy.Duration(2.0)),
+                        'Could not connect to the action server')
+
+        goal_work = TestGoal(4)
+        goal_abort = TestGoal(6)
+        goal_result = TestGoal(8)
+
+        rospy.logwarn("This is a hacky way to associate goals with feedback")
+
+        g1 = client.send_goal(goal_work)
+        g2 = client.send_goal(goal_work)
+        g3 = client.send_goal(goal_work)
+        g4 = client.send_goal(goal_work)
+
+        rospy.sleep(0.5)
+        self.assertEqual(g1.get_goal_status(), GoalStatus.ACTIVE, "Should be active")
+        self.assertEqual(g2.get_goal_status(), GoalStatus.ACTIVE, "Should be active")
+        self.assertEqual(g3.get_goal_status(), GoalStatus.ACTIVE, "Shoule be active")
+        self.assertEqual(g4.get_goal_status(), GoalStatus.ACTIVE, "Should be active")
+
+        g5 = client.send_goal(goal_result)
+        rospy.sleep(0.5)
+        self.assertEqual(g5.get_goal_status(), GoalStatus.SUCCEEDED, "Should be done")
+
+        self.assertEqual(g1.get_goal_status(), GoalStatus.SUCCEEDED)
+        self.assertEqual(g1.get_result().result, 4)
+        self.assertEqual(g2.get_goal_status(), GoalStatus.ABORTED)
+        self.assertEqual(g2.get_result().result, 3)
+        self.assertEqual(g3.get_goal_status(), GoalStatus.SUCCEEDED)
+        self.assertEqual(g3.get_result().result, 2)
+        self.assertEqual(g4.get_goal_status(), GoalStatus.ABORTED)
+        self.assertEqual(g4.get_result().result, 1)
+        g6 = client.send_goal(goal_abort)
+        rospy.sleep(0.5)
+
+
+if __name__ == '__main__':
+    import rostest
+    rospy.init_node('test_ref_simple_action_server')
+    rostest.rosrun('actionlib', 'test_simple_action_client_python', TestRefSimpleActionServer)
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_ref_simple_action_server.py
@@ -0,0 +1,83 @@
+#! /usr/bin/env python
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+PKG = 'actionlib'
+
+import unittest
+import rospy
+from actionlib_msgs.msg import GoalStatus
+from actionlib import SimpleActionClient
+from actionlib import ActionClient
+from actionlib.msg import TestAction, TestGoal
+
+
+class TestRefSimpleActionServer(unittest.TestCase):
+
+    def test_one(self):
+        client = SimpleActionClient('reference_simple_action', TestAction)
+        self.assertTrue(client.wait_for_server(rospy.Duration(2.0)),
+                     'Could not connect to the action server')
+
+        goal = TestGoal(1)
+        client.send_goal(goal)
+        self.assertTrue(client.wait_for_result(rospy.Duration(2.0)),
+                     "Goal didn't finish")
+        self.assertEqual(GoalStatus.SUCCEEDED, client.get_state())
+
+        goal = TestGoal(2)
+        client.send_goal(goal)
+        self.assertTrue(client.wait_for_result(rospy.Duration(10.0)),
+                     "Goal didn't finish")
+        self.assertEqual(GoalStatus.ABORTED, client.get_state())
+
+        goal = TestGoal(3)
+        client.send_goal(goal)
+        self.assertTrue(client.wait_for_result(rospy.Duration(10.0)),
+                     "Goal didn't finish")
+
+        # The simple server can't reject goals
+        self.assertEqual(GoalStatus.ABORTED, client.get_state())
+
+        goal = TestGoal(9)
+        saved_feedback = {}
+
+        def on_feedback(fb):
+            rospy.loginfo("Got feedback")
+            saved_feedback[0] = fb
+
+        client.send_goal(goal, feedback_cb=on_feedback)
+        self.assertTrue(client.wait_for_result(rospy.Duration(10.0)),
+                     "Goal didn't finish")
+        self.assertEqual(GoalStatus.SUCCEEDED, client.get_state())
+
+        self.assertEqual(saved_feedback[0].feedback, 9)
+
+
+if __name__ == '__main__':
+    import rostest
+    rospy.init_node('test_ref_simple_action_server')
+    rostest.rosrun('actionlib', 'test_simple_action_client_python', TestRefSimpleActionServer)
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_server_components.py
@@ -0,0 +1,105 @@
+#!/usr/bin/env python
+# Copyright (c) 2009, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of the Willow Garage, Inc. nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+# Author: Alexander Sorokin.
+
+PKG = 'actionlib'
+import rospy
+
+import unittest
+import threading
+
+from actionlib import goal_id_generator, status_tracker
+import actionlib_msgs.msg
+
+
+# A sample python unit test
+class TestGoalIDGenerator(unittest.TestCase):
+
+    def test_generator(self):
+        gen1 = goal_id_generator.GoalIDGenerator()
+
+        id1 = gen1.generate_ID()
+        id2 = gen1.generate_ID()
+        id3 = gen1.generate_ID()
+        nn1, s1, ts1 = id1.id.split('-')
+        nn2, s2, ts2 = id2.id.split('-')
+        nn3, s3, ts3 = id3.id.split('-')
+
+        self.assertEqual(nn1, "/test_goal_id_generator", "node names are different")
+        self.assertEqual(nn1, nn2, "node names are different")
+        self.assertEqual(nn1, nn3, "node names are different")
+
+        self.assertEqual(s1, "1", "Sequence numbers mismatch")
+        self.assertEqual(s2, "2", "Sequence numbers mismatch")
+        self.assertEqual(s3, "3", "Sequence numbers mismatch")
+
+    def test_threaded_generation(self):
+        """
+        This test checks that all the ids are generated unique. This test should fail if the synchronization is set incorrectly.
+        @note this test is can succeed when the errors are present.
+        """
+        global ids_lists
+        ids_lists = {}
+
+        def gen_ids(tID=1, num_ids=1000):
+            gen = goal_id_generator.GoalIDGenerator()
+            for i in range(0, num_ids):
+                id = gen.generate_ID()
+                ids_lists[tID].append(id)
+
+        num_ids = 1000
+        num_threads = 200
+        threads = []
+        for tID in range(0, num_threads):
+            ids_lists[tID] = []
+            t = threading.Thread(None, gen_ids, None, (), {'tID': tID, 'num_ids': num_ids})
+            threads.append(t)
+            t.start()
+
+        for t in threads:
+            t.join()
+
+        all_ids = {}
+        for tID in range(0, num_threads):
+            self.assertEqual(len(ids_lists[tID]), num_ids)
+            for id in ids_lists[tID]:
+                nn, s, ts = id.id.split('-')
+                self.assertFalse(s in all_ids, "Duplicate ID found")
+                all_ids[s] = 1
+
+    def test_status_tracker(self):
+        tracker = status_tracker.StatusTracker("test-id", actionlib_msgs.msg.GoalStatus.PENDING)
+        self.assertEqual(tracker.status.goal_id, "test-id")
+        self.assertEqual(tracker.status.status, actionlib_msgs.msg.GoalStatus.PENDING)
+
+
+if __name__ == '__main__':
+    import rostest
+    rospy.init_node("test_goal_id_generator")
+    rostest.rosrun(PKG, 'test_goal_id_generator', TestGoalIDGenerator)
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_server_goal_handle_destruction.launch
@@ -0,0 +1,3 @@
+<launch>
+  <test pkg="actionlib" type="actionlib-server_goal_handle_destruction" test-name="server_goal_handle_destruction_test" />
+</launch>
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_simple_action_server_deadlock.py
@@ -0,0 +1,125 @@
+#! /usr/bin/env python
+#
+# Copyright (c) 2013, Miguel Sarabia
+# Imperial College London
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in the
+#       documentation and/or other materials provided with the distribution.
+#     * Neither the name of Imperial College London nor the names of its
+#       contributors may be used to endorse or promote products derived from
+#       this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+import random
+import threading
+import unittest
+
+import actionlib
+from actionlib.msg import TestAction
+import rosnode
+import rospy
+
+
+class Constants:
+    pkg = "actionlib"
+    node = "test_simple_action_server_deadlock"
+    topic = "deadlock"
+    deadlock_timeout = 45  # in seconds
+    shutdown_timeout = 2  # in seconds
+    max_action_duration = 3
+
+
+class DeadlockTest(unittest.TestCase):
+
+    def test_deadlock(self):
+        # Prepare condition (for safe preemption)
+        self.condition = threading.Condition()
+        self.last_execution_time = None
+
+        # Prepare Simple Action Server
+        self.action_server = actionlib.SimpleActionServer(
+            Constants.topic,
+            TestAction,
+            execute_cb=self.execute_callback,
+            auto_start=False)
+
+        self.action_server.register_preempt_callback(self.preempt_callback)
+        self.action_server.start()
+
+        # Sleep for the amount specified
+        rospy.sleep(Constants.deadlock_timeout)
+
+        # Start actual tests
+        running_nodes = set(rosnode.get_node_names())
+        required_nodes = {
+            "/deadlock_companion_1",
+            "/deadlock_companion_2",
+            "/deadlock_companion_3",
+            "/deadlock_companion_4",
+            "/deadlock_companion_5"}
+
+        self.assertTrue(
+            required_nodes.issubset(running_nodes),
+            "Required companion nodes are not currently running")
+
+        # Shutdown companions so that we can exit nicely
+        termination_time = rospy.Time.now()
+        rosnode.kill_nodes(required_nodes)
+
+        rospy.sleep(Constants.shutdown_timeout)
+
+        # Check last execution wasn't too long ago...
+        self.assertIsNotNone(
+            self.last_execution_time is None,
+            "Execute Callback was never executed")
+
+        time_since_last_execution = (
+            termination_time - self.last_execution_time).to_sec()
+
+        self.assertTrue(
+            time_since_last_execution < 2 * Constants.max_action_duration,
+            "Too long since last goal was executed; likely due to a deadlock")
+
+    def execute_callback(self, goal):
+        # Note down last_execution time
+        self.last_execution_time = rospy.Time.now()
+
+        # Determine duration of this action
+        action_duration = random.uniform(0, Constants.max_action_duration)
+
+        with self.condition:
+            if not self.action_server.is_preempt_requested():
+                self.condition.wait(action_duration)
+
+        if self.action_server.is_preempt_requested():
+            self.action_server.set_preempted()
+        else:
+            self.action_server.set_succeeded()
+
+    def preempt_callback(self):
+        with self.condition:
+            self.condition.notify()
+
+
+if __name__ == '__main__':
+    import rostest
+    rospy.init_node(Constants.node)
+    rostest.rosrun(Constants.pkg, Constants.node, DeadlockTest)
--- /dev/null
+++ ros-noetic-actionlib-1.14.0/test/test_simple_action_server_deadlock_python.launch
@@ -0,0 +1,11 @@
+<launch>
+    <!-- Companion nodes -->
+    <node pkg="actionlib" type="simple_action_server_deadlock_companion.py" name="deadlock_companion_1" required="false"/>
+    <node pkg="actionlib" type="simple_action_server_deadlock_companion.py" name="deadlock_companion_2" required="false"/>
+    <node pkg="actionlib" type="simple_action_server_deadlock_companion.py" name="deadlock_companion_3" required="false"/>
+    <node pkg="actionlib" type="simple_action_server_deadlock_companion.py" name="deadlock_companion_4" required="false"/>
+    <node pkg="actionlib" type="simple_action_server_deadlock_companion.py" name="deadlock_companion_5" required="false"/>
+
+    <!-- Actual testing node -->
+    <test pkg="actionlib" type="test_simple_action_server_deadlock.py" test-name="test_simple_action_server_deadlock" />
+</launch>
