Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ros-noetic-turtle-actionlib (0.2.0-0jammy) jammy; urgency=high
 .
   * Autogenerated, no changelog for this version found in CHANGELOG.rst.
Author: Daniel Stonier <d.stonier@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2024-08-18

--- /dev/null
+++ ros-noetic-turtle-actionlib-0.2.0/CHANGELOG.rst
@@ -0,0 +1,10 @@
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Changelog for package turtle_actionlib
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+0.1.8 (2014-11-05)
+------------------
+* update package maintainer.
+* Use _EXPORTED_TARGETS target suffix instead of _generate_messages_cpp
+* changed shape_server code to run with the hydro mversion of turtlesim ("geometry_msgs/Twist" nad cmd_vel)
+* Contributors: Benjamin Brieber, Daniel Stonier, Esteve Fernandez
--- /dev/null
+++ ros-noetic-turtle-actionlib-0.2.0/CMakeLists.txt
@@ -0,0 +1,47 @@
+cmake_minimum_required(VERSION 3.0.2)
+project(turtle_actionlib)
+
+## Find catkin dependencies
+find_package(catkin REQUIRED
+  COMPONENTS
+    actionlib
+    actionlib_msgs
+    angles
+    message_generation
+    rosconsole
+    roscpp
+    std_msgs
+    turtlesim
+    geometry_msgs
+)
+
+## Add message definitions
+add_message_files(DIRECTORY msg FILES Velocity.msg)
+
+## Add action definitions
+add_action_files(DIRECTORY action FILES Shape.action)
+
+## Generate messages and actions
+generate_messages(DEPENDENCIES std_msgs actionlib_msgs)
+
+## Setup catkin exports
+catkin_package()
+
+## Set include dirs
+include_directories(${catkin_INCLUDE_DIRS})
+
+## shape_server executable
+add_executable(shape_server src/shape_server.cpp)
+target_link_libraries(shape_server ${catkin_LIBRARIES})
+add_dependencies(shape_server ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
+
+## shape_client executable
+add_executable(shape_client src/shape_client.cpp)
+target_link_libraries(shape_client ${catkin_LIBRARIES})
+add_dependencies(shape_client ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
+
+## Mark executables for installation
+install(TARGETS shape_server shape_client
+  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
+  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
+  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})
--- /dev/null
+++ ros-noetic-turtle-actionlib-0.2.0/action/Shape.action
@@ -0,0 +1,10 @@
+#goal definition
+int32 edges
+float32 radius
+---
+#result definition
+float32 interior_angle
+float32 apothem
+---
+#feedback
+
--- /dev/null
+++ ros-noetic-turtle-actionlib-0.2.0/msg/Velocity.msg
@@ -0,0 +1,4 @@
+# Copied from turtlesim https://github.com/ros/ros_tutorials/blob/f7da7779e82dcc3977b2c220a843cd86dd269832/turtlesim/msg/Velocity.msg. We had to copy this into this package since it has been replaced with geometry_msgs/Twist there and comforming to Twist requires to change code, which I doubt worth time it takes. So if you think it is, please go ahead make a patch.
+
+float32 linear
+float32 angular
--- /dev/null
+++ ros-noetic-turtle-actionlib-0.2.0/package.xml
@@ -0,0 +1,40 @@
+<package>
+  <name>turtle_actionlib</name>
+  <version>0.2.0</version>
+  <description>turtle_actionlib demonstrates how to write an action server and client with the turtlesim. The shape_server provides and action interface for drawing regular polygons with the turtlesim. </description>
+  <maintainer email="d.stonier@gmail.com">Daniel Stonier</maintainer>
+
+  <license>BSD</license>
+
+  <url type="website">http://ros.org/wiki/turtle_actionlib</url>
+  <url type="repository">https://github.com/ros/common_tutorials</url>
+  <url type="bugtracker">https://github.com/ros/common_tutorials/issues</url>
+
+  <author>Melonee Wise</author>
+
+  <buildtool_depend>catkin</buildtool_depend>
+
+  <build_depend>actionlib</build_depend>
+  <build_depend>actionlib_msgs</build_depend>
+  <build_depend>angles</build_depend>
+  <build_depend>message_generation</build_depend>
+  <build_depend>rosconsole</build_depend>
+  <build_depend>roscpp</build_depend>
+  <build_depend>std_msgs</build_depend>
+  <build_depend>turtlesim</build_depend>
+  <build_depend>geometry_msgs</build_depend>
+
+  <run_depend>actionlib</run_depend>
+  <run_depend>actionlib_msgs</run_depend>
+  <run_depend>angles</run_depend>
+  <run_depend>message_runtime</run_depend>
+  <run_depend>rosconsole</run_depend>
+  <run_depend>roscpp</run_depend>
+  <run_depend>std_msgs</run_depend>
+  <run_depend>turtlesim</run_depend>
+  <run_depend>geometry_msgs</run_depend>
+
+</package>
+
+
+
--- /dev/null
+++ ros-noetic-turtle-actionlib-0.2.0/src/shape_client.cpp
@@ -0,0 +1,38 @@
+#include <ros/ros.h>
+#include <actionlib/client/simple_action_client.h>
+#include <actionlib/client/terminal_state.h>
+#include <turtle_actionlib/ShapeAction.h>
+
+int main (int argc, char **argv)
+{
+  ros::init(argc, argv, "test_shape"); 
+
+  // create the action client
+  // true causes the client to spin it's own thread
+  actionlib::SimpleActionClient<turtle_actionlib::ShapeAction> ac("turtle_shape", true); 
+
+  ROS_INFO("Waiting for action server to start.");
+  // wait for the action server to start
+  ac.waitForServer(); //will wait for infinite time
+ 
+  ROS_INFO("Action server started, sending goal.");
+  // send a goal to the action 
+  turtle_actionlib::ShapeGoal goal;
+  goal.edges = 5;
+  goal.radius = 1.3;
+  ac.sendGoal(goal);
+  
+  //wait for the action to return
+  bool finished_before_timeout = ac.waitForResult(ros::Duration(40.0));
+
+  if (finished_before_timeout)
+    {
+      actionlib::SimpleClientGoalState state = ac.getState();
+      ROS_INFO("Action finished: %s",state.toString().c_str());
+    }
+  else  
+    ROS_INFO("Action did not finish before the time out.");
+
+  //exit
+  return 0;
+}
--- /dev/null
+++ ros-noetic-turtle-actionlib-0.2.0/src/shape_server.cpp
@@ -0,0 +1,143 @@
+#include <ros/ros.h>
+#include <turtlesim/Pose.h>
+#include <actionlib/server/simple_action_server.h>
+#include <cmath>
+#include <math.h>
+#include <angles/angles.h>
+
+#include <geometry_msgs/Twist.h>
+#include <turtle_actionlib/ShapeAction.h>
+
+// This class computes the command_velocities of the turtle to draw regular polygons 
+class ShapeAction
+{
+public:
+  ShapeAction(std::string name) : 
+    as_(nh_, name, false),
+    action_name_(name)
+  {
+    //register the goal and feeback callbacks
+    as_.registerGoalCallback(boost::bind(&ShapeAction::goalCB, this));
+    as_.registerPreemptCallback(boost::bind(&ShapeAction::preemptCB, this));
+
+    //subscribe to the data topic of interest
+    sub_ = nh_.subscribe("/turtle1/pose", 1, &ShapeAction::controlCB, this);
+    pub_ = nh_.advertise<geometry_msgs::Twist>("/turtle1/cmd_vel", 1);
+
+    as_.start();
+  }
+
+  ~ShapeAction(void)
+  {
+  }
+
+  void goalCB()
+  {
+    // accept the new goal
+    turtle_actionlib::ShapeGoal goal = *as_.acceptNewGoal();
+    //save the goal as private variables
+    edges_ = goal.edges;
+    radius_ = goal.radius;
+
+    // reset helper variables
+    interior_angle_ = ((edges_-2)*M_PI)/edges_;
+    apothem_ = radius_*cos(M_PI/edges_);
+    //compute the side length of the polygon
+    side_len_ = apothem_ * 2* tan( M_PI/edges_);
+    //store the result values
+    result_.apothem = apothem_;
+    result_.interior_angle = interior_angle_;
+    edge_progress_ =0;
+    start_edge_ = true;
+  }
+
+  void preemptCB()
+  {
+    ROS_INFO("%s: Preempted", action_name_.c_str());
+    // set the action state to preempted
+    as_.setPreempted();
+  }
+
+  void controlCB(const turtlesim::Pose::ConstPtr& msg)
+  {
+    // make sure that the action hasn't been canceled
+    if (!as_.isActive())
+      return;
+  
+    if (edge_progress_ < edges_)
+    {
+      // scalar values for drive the turtle faster and straighter
+      double l_scale = 6.0;
+      double a_scale = 6.0;
+      double error_tol = 0.00001;
+
+      if (start_edge_)
+      {
+        start_x_ = msg->x;
+        start_y_ = msg->y;
+        start_theta_ = msg->theta;
+        start_edge_ = false;
+      }
+
+      // compute the distance and theta error for the shape
+      dis_error_ = side_len_ - fabs(sqrt((start_x_- msg->x)*(start_x_-msg->x) + (start_y_-msg->y)*(start_y_-msg->y)));
+      theta_error_ = angles::normalize_angle_positive(M_PI - interior_angle_ - (msg->theta - start_theta_));
+     
+      if (dis_error_ > error_tol)
+      {
+        command_.linear.x = l_scale*dis_error_;
+        command_.angular.z = 0;
+      }
+      else if (dis_error_ < error_tol && fabs(theta_error_)> error_tol)
+      { 
+        command_.linear.x = 0;
+        command_.angular.z = a_scale*theta_error_;
+      }
+      else if (dis_error_ < error_tol && fabs(theta_error_)< error_tol)
+      {
+        command_.linear.x = 0;
+        command_.angular.z = 0;
+        start_edge_ = true;
+        edge_progress_++;
+      }  
+      else
+      {
+        command_.linear.x = l_scale*dis_error_;
+        command_.angular.z = a_scale*theta_error_;
+      } 
+      // publish the velocity command
+      pub_.publish(command_);
+      
+    } 
+    else
+    {          
+      ROS_INFO("%s: Succeeded", action_name_.c_str());
+      // set the action state to succeeded
+      as_.setSucceeded(result_);
+    }   
+  }
+
+protected:
+  ros::NodeHandle nh_;
+  actionlib::SimpleActionServer<turtle_actionlib::ShapeAction> as_;
+  std::string action_name_;
+  double radius_, apothem_, interior_angle_, side_len_;
+  double start_x_, start_y_, start_theta_;
+  double dis_error_, theta_error_;
+  int edges_ , edge_progress_;
+  bool start_edge_;
+  geometry_msgs::Twist command_;
+  turtle_actionlib::ShapeResult result_;
+  ros::Subscriber sub_;
+  ros::Publisher pub_;
+};
+
+int main(int argc, char** argv)
+{
+  ros::init(argc, argv, "turtle_shape");
+
+  ShapeAction shape(ros::this_node::getName());
+  ros::spin();
+
+  return 0;
+}
