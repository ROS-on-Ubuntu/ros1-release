Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ros-noetic-image-rotate (1.17.0-0jammy) jammy; urgency=high
 .
   * Switch to hpp headers of pluginlib
   * Fix tf2 dependency for image_rotate
   * Switch to new boost/bind/bind.hpp
   * Contributors: Jochen Sprickerhof, Timo Röhling
Author: Vincent Rabaud <vincent.rabaud@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2024-08-18

--- /dev/null
+++ ros-noetic-image-rotate-1.17.0/CHANGELOG.rst
@@ -0,0 +1,139 @@
+1.17.0 (2022-10-17)
+-------------------
+* Switch to hpp headers of pluginlib
+* Fix tf2 dependency for image_rotate
+* Switch to new boost/bind/bind.hpp
+* Contributors: Jochen Sprickerhof, Timo Röhling
+
+1.16.0 (2021-11-12)
+-------------------
+
+1.15.3 (2020-12-11)
+-------------------
+* remove email blasts from steve macenski (`#595 <https://github.com/ros-perception/image_pipeline/issues/595>`_)
+* Contributors: Steve Macenski
+
+1.15.2 (2020-05-19)
+-------------------
+
+1.15.1 (2020-05-18)
+-------------------
+
+1.15.0 (2020-05-14)
+-------------------
+* Python 3 compatibility (`#530 <https://github.com/ros-perception/image_pipeline/issues/530>`_)
+* cmake_minimum_required to 3.0.2
+* Adapted to OpenCV4
+* import setup from setuptools instead of distutils-core
+* updated install locations for better portability. (`#500 <https://github.com/ros-perception/image_pipeline/issues/500>`_)
+* Contributors: Joshua Whitley, Sean Yen
+
+1.14.0 (2020-01-12)
+-------------------
+
+1.13.0 (2019-06-12)
+-------------------
+* Merge pull request `#382 <https://github.com/ros-perception/image_pipeline/issues/382>`_ from garaemon/intiialzie-prev-stamp
+  Fix tf timeout of image_rotate
+* Initialize prev_stamp\_ as ros::Timw::now()
+  * If prev_stamp\_ is initialized as 0.0, tf may wait transformation for
+  long duration at the first time. In order to give up the wait in
+  reasonable duration, initialize prev_stamp\_ as current time.
+* Merge pull request `#395 <https://github.com/ros-perception/image_pipeline/issues/395>`_ from ros-perception/steve_maintain
+* adding autonomoustuff mainainer
+* adding stevemacenski as maintainer to get emails
+* Contributors: Joshua Whitley, Ryohei Ueda, Yoshito Okada, stevemacenski
+
+1.12.23 (2018-05-10)
+--------------------
+
+1.12.22 (2017-12-08)
+--------------------
+
+1.12.21 (2017-11-05)
+--------------------
+* [image_rotate] Added TF timeout so that transforms only need to be newer than last frame. (`#293 <https://github.com/ros-perception/image_pipeline/issues/293>`_)
+* Contributors: mhosmar-cpr
+
+1.12.20 (2017-04-30)
+--------------------
+* Fix CMake warnings about Eigen.
+* address gcc6 build error
+  With gcc6, compiling fails with `stdlib.h: No such file or directory`,
+  as including '-isystem /usr/include' breaks with gcc6, cf.,
+  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=70129.
+  This commit addresses this issue for this package in the same way
+  it was addressed in various other ROS packages. A list of related
+  commits and pull requests is at:
+  https://github.com/ros/rosdistro/issues/12783
+  Signed-off-by: Lukas Bulwahn <lukas.bulwahn@oss.bmw-carit.de>
+* Contributors: Lukas Bulwahn, Vincent Rabaud
+
+1.12.19 (2016-07-24)
+--------------------
+* Fix frames if it is empty to rotate image
+* Contributors: Kentaro Wada
+
+1.12.18 (2016-07-12)
+--------------------
+
+1.12.17 (2016-07-11)
+--------------------
+
+1.12.16 (2016-03-19)
+--------------------
+* clean OpenCV dependency in package.xml
+* Contributors: Vincent Rabaud
+
+1.12.15 (2016-01-17)
+--------------------
+
+1.12.14 (2015-07-22)
+--------------------
+
+1.12.13 (2015-04-06)
+--------------------
+
+1.12.12 (2014-12-31)
+--------------------
+
+1.12.11 (2014-10-26)
+--------------------
+
+1.12.10 (2014-09-28)
+--------------------
+
+1.12.9 (2014-09-21)
+-------------------
+
+1.12.8 (2014-08-19)
+-------------------
+
+1.12.6 (2014-07-27)
+-------------------
+
+1.12.4 (2014-04-28)
+-------------------
+
+1.12.3 (2014-04-12)
+-------------------
+
+1.12.2 (2014-04-08)
+-------------------
+* use NODELET_** macros instead of ROS_** macros
+* use getNodeHandle rather than getPrivateNodeHandle
+* add executable to load image_rotate/image_rotate nodelet.
+  add xml file to export nodelet definition.
+  Conflicts:
+  image_rotate/package.xml
+* make image_rotate nodelet class
+  Conflicts:
+  image_rotate/CMakeLists.txt
+  image_rotate/package.xml
+  image_rotate/src/nodelet/image_rotate_nodelet.cpp
+* move image_rotate.cpp to nodelet directory according to the directory convenstion of image_pipeline
+* Contributors: Ryohei Ueda
+
+1.12.1 (2014-04-06)
+-------------------
+* replace tf usage by tf2 usage
--- /dev/null
+++ ros-noetic-image-rotate-1.17.0/CMakeLists.txt
@@ -0,0 +1,34 @@
+cmake_minimum_required(VERSION 3.0.2)
+project(image_rotate)
+
+find_package(catkin REQUIRED COMPONENTS cmake_modules cv_bridge dynamic_reconfigure image_transport nodelet roscpp tf2_ros tf2_geometry_msgs)
+
+# generate the dynamic_reconfigure config file
+generate_dynamic_reconfigure_options(cfg/ImageRotate.cfg)
+
+catkin_package()
+
+find_package(OpenCV REQUIRED core imgproc)
+
+# add the executable
+include_directories(${catkin_INCLUDE_DIRS} ${OpenCV_INCLUDE_DIRS})
+
+add_library(${PROJECT_NAME} SHARED src/nodelet/image_rotate_nodelet.cpp)
+target_link_libraries(${PROJECT_NAME} ${catkin_LIBRARIES} ${OpenCV_LIBRARIES})
+add_dependencies(${PROJECT_NAME} ${PROJECT_NAME}_gencfg)
+install(TARGETS image_rotate
+        ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
+        LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
+        RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
+)
+
+add_executable(image_rotate_exe src/node/image_rotate.cpp)
+SET_TARGET_PROPERTIES(image_rotate_exe PROPERTIES OUTPUT_NAME image_rotate)
+target_link_libraries(image_rotate_exe ${catkin_LIBRARIES} ${OpenCV_LIBRARIES})
+
+install(TARGETS image_rotate_exe
+        DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
+)
+install(FILES nodelet_plugins.xml
+        DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
+)
--- /dev/null
+++ ros-noetic-image-rotate-1.17.0/cfg/ImageRotate.cfg
@@ -0,0 +1,59 @@
+#! /usr/bin/env python
+# Software License Agreement (BSD License)
+#
+# Copyright (c) 2010, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+#
+#  * Redistributions of source code must retain the above copyright
+#    notice, this list of conditions and the following disclaimer.
+#  * Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials provided
+#    with the distribution.
+#  * Neither the name of Willow Garage, Inc. nor the names of its
+#    contributors may be used to endorse or promote products derived
+#    from this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+
+PACKAGE='image_rotate'
+
+from dynamic_reconfigure.parameter_generator_catkin import *
+
+gen = ParameterGenerator()
+gen.add("target_frame_id", str_t, 0, "Frame in which the target vector is specified. Empty means the input frame.", "base_link")
+gen.add("target_x",     double_t, 0, "X coordinate of the target vector", 0, -10, 10)
+gen.add("target_y",     double_t, 0, "Y coordinate of the target vector", 0, -10, 10)
+gen.add("target_z",     double_t, 0, "Z coordinate of the target vector", 1, -10, 10)
+
+gen.add("source_frame_id", str_t, 0, "Frame in which the source vector is specified. Empty means the input frame.", "")
+gen.add("source_x",   double_t, 0, "X coordinate of the direction the target should be aligned with.", 0, -10, 10)
+gen.add("source_y",   double_t, 0, "Y coordinate of the direction the target should be aligned with.", -1, -10, 10)
+gen.add("source_z",   double_t, 0, "Z coordinate of the direction the target should be aligned with.", 0, -10, 10)
+
+gen.add("output_frame_id", str_t, 0, "Frame to publish for the image's new orientation. Empty means add '_rotated' suffix to the image frame.", "")
+gen.add("input_frame_id", str_t, 0, "Frame to use for the original camera image. Empty means that the frame in the image or camera_info should be used depending on use_camera_info.", "")
+
+gen.add("use_camera_info", bool_t, 0, "Indicates that the camera_info topic should be subscribed to to get the default input_frame_id. Otherwise the frame from the image message will be used.", True)
+
+gen.add("max_angular_rate", double_t, 0, "Limits the rate at which the image can rotate (rad/s). Zero means no limit.", 10, 0, 100)
+
+gen.add("output_image_size", double_t, 0, "Size of the output image as a function of the input image size. Can be varied continuously between the following special settings: 0 ensures no black ever appears, 1 is small image dimension, 2 is large image dimension, 3 is image diagonal.", 2, 0, 3)
+
+exit(gen.generate(PACKAGE, "image_rotate", "ImageRotate"))
--- /dev/null
+++ ros-noetic-image-rotate-1.17.0/mainpage.dox
@@ -0,0 +1,26 @@
+/**
+\mainpage
+\htmlinclude manifest.html
+
+\b image_rotate is ... 
+
+<!-- 
+Provide an overview of your package.
+-->
+
+
+\section codeapi Code API
+
+<!--
+Provide links to specific auto-generated API documentation within your
+package that is of particular interest to a reader. Doxygen will
+document pretty much every part of your code, so do your best here to
+point the reader to the actual API.
+
+If your codebase is fairly large or has different sets of APIs, you
+should use the doxygen 'group' tag to keep these APIs together. For
+example, the roscpp documentation has 'libros' group.
+-->
+
+
+*/
--- /dev/null
+++ ros-noetic-image-rotate-1.17.0/nodelet_plugins.xml
@@ -0,0 +1,7 @@
+<library path="lib/libimage_rotate">
+
+  <class name="image_rotate/image_rotate" type="image_rotate::ImageRotateNodelet" base_class_type="nodelet::Nodelet">
+    <description>Nodelet to rotate sensor_msgs/Image</description>
+  </class>
+
+</library>
--- /dev/null
+++ ros-noetic-image-rotate-1.17.0/package.xml
@@ -0,0 +1,56 @@
+<package>
+  <name>image_rotate</name>
+  <version>1.17.0</version>
+  <description>
+    <p>
+      Contains a node that rotates an image stream in a way that minimizes
+      the angle between a vector in some arbitrary frame and a vector in the
+      camera frame. The frame of the outgoing image is published by the node.
+    </p>
+    <p>
+      This node is intended to allow camera images to be visualized in an
+      orientation that is more intuitive than the hardware-constrained
+      orientation of the physical camera. This is particularly helpful, for
+      example, to show images from the PR2's forearm cameras with a
+      consistent up direction, despite the fact that the forearms need to
+      rotate in arbitrary ways during manipulation.
+    </p>
+    <p>
+      It is not recommended to use the output from this node for further
+      computation, as it interpolates the source image, introduces black
+      borders, and does not output a camera_info.
+    </p>
+  </description>
+  <author>Blaise Gassend</author>
+  <maintainer email="vincent.rabaud@gmail.com">Vincent Rabaud</maintainer>
+  <maintainer email="software@autonomoustuff.com">Autonomoustuff team</maintainer>
+  <license>BSD</license>
+  <url>http://ros.org/wiki/image_rotate</url>
+
+  <buildtool_depend>catkin</buildtool_depend>
+
+  <test_depend>rostest</test_depend>
+  
+  <build_depend>cmake_modules</build_depend>
+  <build_depend>cv_bridge</build_depend>
+  <build_depend>dynamic_reconfigure</build_depend>
+  <build_depend>geometry_msgs</build_depend>
+  <build_depend>image_transport</build_depend>
+  <build_depend>nodelet</build_depend>
+  <build_depend>roscpp</build_depend>
+  <build_depend>tf2</build_depend>
+  <build_depend>tf2_geometry_msgs</build_depend>
+  <build_depend>tf2_ros</build_depend>
+
+  <run_depend>cv_bridge</run_depend>
+  <run_depend>dynamic_reconfigure</run_depend>
+  <run_depend>image_transport</run_depend>
+  <run_depend>nodelet</run_depend>
+  <run_depend>roscpp</run_depend>
+  <run_depend>tf2</run_depend>
+  <run_depend>tf2_geometry_msgs</run_depend>
+  <run_depend>tf2_ros</run_depend>
+  <export>
+    <nodelet plugin="${prefix}/nodelet_plugins.xml"/>
+  </export>
+</package>
--- /dev/null
+++ ros-noetic-image-rotate-1.17.0/src/node/image_rotate.cpp
@@ -0,0 +1,54 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+* 
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+* 
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+* 
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+* 
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+#include <ros/ros.h>
+#include <nodelet/loader.h>
+
+int main(int argc, char **argv)
+{
+  ros::init(argc, argv, "image_rotate", ros::init_options::AnonymousName);
+  if (ros::names::remap("image") == "image") {
+    ROS_WARN("Topic 'image' has not been remapped! Typical command-line usage:\n"
+             "\t$ rosrun image_rotate image_rotate image:=<image topic> [transport]");
+  }
+
+  nodelet::Loader manager(false);
+  nodelet::M_string remappings;
+  nodelet::V_string my_argv(argv + 1, argv + argc);
+  my_argv.push_back("--shutdown-on-close"); // Internal
+
+  manager.load(ros::this_node::getName(), "image_rotate/image_rotate", remappings, my_argv);
+
+  ros::spin();
+  return 0;
+}
--- /dev/null
+++ ros-noetic-image-rotate-1.17.0/src/nodelet/image_rotate_nodelet.cpp
@@ -0,0 +1,281 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2014, JSK Lab.
+*                2008, Willow Garage, Inc.
+*  All rights reserved.
+* 
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+* 
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+* 
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+/********************************************************************
+* image_rotate_nodelet.cpp
+* this is a forked version of image_rotate.
+* this image_rotate_nodelet supports:
+*  1) nodelet
+*  2) tf and tf2
+*********************************************************************/
+
+#include <ros/ros.h>
+#include <nodelet/nodelet.h>
+#include <tf2_ros/transform_listener.h>
+#include <tf2_ros/transform_broadcaster.h>
+#include <image_rotate/ImageRotateConfig.h>
+#include <geometry_msgs/Vector3Stamped.h>
+#include <image_transport/image_transport.h>
+#include <cv_bridge/cv_bridge.h>
+#include <opencv2/imgproc/imgproc.hpp>
+#include <dynamic_reconfigure/server.h>
+#include <math.h>
+#include <tf2_geometry_msgs/tf2_geometry_msgs.h>
+
+namespace image_rotate {
+class ImageRotateNodelet : public nodelet::Nodelet
+{
+  tf2_ros::Buffer tf_buffer_;
+  boost::shared_ptr<tf2_ros::TransformListener> tf_sub_;
+  tf2_ros::TransformBroadcaster tf_pub_;
+
+  image_rotate::ImageRotateConfig config_;
+  dynamic_reconfigure::Server<image_rotate::ImageRotateConfig> srv;
+
+  image_transport::Publisher img_pub_;
+  image_transport::Subscriber img_sub_;
+  image_transport::CameraSubscriber cam_sub_;
+
+  geometry_msgs::Vector3Stamped target_vector_;
+  geometry_msgs::Vector3Stamped source_vector_;
+
+  boost::shared_ptr<image_transport::ImageTransport> it_;
+  ros::NodeHandle nh_;
+
+  int subscriber_count_;
+  double angle_;
+  ros::Time prev_stamp_;
+
+  void reconfigureCallback(image_rotate::ImageRotateConfig &new_config, uint32_t level)
+  {
+    config_ = new_config;
+    target_vector_.vector.x = config_.target_x;
+    target_vector_.vector.y = config_.target_y;
+    target_vector_.vector.z = config_.target_z;
+
+    source_vector_.vector.x = config_.source_x;
+    source_vector_.vector.y = config_.source_y;
+    source_vector_.vector.z = config_.source_z;
+    if (subscriber_count_)
+    { // @todo Could do this without an interruption at some point.
+      unsubscribe();
+      subscribe();
+    }
+  }
+
+  const std::string &frameWithDefault(const std::string &frame, const std::string &image_frame)
+  {
+    if (frame.empty())
+      return image_frame;
+    return frame;
+  }
+
+  void imageCallbackWithInfo(const sensor_msgs::ImageConstPtr& msg, const sensor_msgs::CameraInfoConstPtr& cam_info)
+  {
+    do_work(msg, cam_info->header.frame_id);
+  }
+  
+  void imageCallback(const sensor_msgs::ImageConstPtr& msg)
+  {
+    do_work(msg, msg->header.frame_id);
+  }
+
+  void do_work(const sensor_msgs::ImageConstPtr& msg, const std::string input_frame_from_msg)
+  {
+    try
+    {
+      std::string input_frame_id = frameWithDefault(config_.input_frame_id, input_frame_from_msg);
+      std::string target_frame_id = frameWithDefault(config_.target_frame_id, input_frame_from_msg);
+      std::string source_frame_id = frameWithDefault(config_.source_frame_id, input_frame_from_msg);
+
+      // Transform the target vector into the image frame.
+      target_vector_.header.stamp = msg->header.stamp;
+      target_vector_.header.frame_id = target_frame_id;
+      geometry_msgs::Vector3Stamped target_vector_transformed;
+      geometry_msgs::TransformStamped transform = tf_buffer_.lookupTransform(target_frame_id, input_frame_id, msg->header.stamp, msg->header.stamp-prev_stamp_);
+      tf2::doTransform(target_vector_, target_vector_transformed, transform);
+
+      // Transform the source vector into the image frame.
+      source_vector_.header.stamp = msg->header.stamp;
+      source_vector_.header.frame_id = source_frame_id;
+      geometry_msgs::Vector3Stamped source_vector_transformed;
+      transform = tf_buffer_.lookupTransform(source_frame_id, input_frame_id, msg->header.stamp, msg->header.stamp-prev_stamp_);
+      tf2::doTransform(source_vector_, source_vector_transformed, transform);
+
+      //NODELET_INFO("target: %f %f %f", target_vector_.x(), target_vector_.y(), target_vector_.z());
+      //NODELET_INFO("target_transformed: %f %f %f", target_vector_transformed.x(), target_vector_transformed.y(), target_vector_transformed.z());
+      //NODELET_INFO("source: %f %f %f", source_vector_.x(), source_vector_.y(), source_vector_.z());
+      //NODELET_INFO("source_transformed: %f %f %f", source_vector_transformed.x(), source_vector_transformed.y(), source_vector_transformed.z());
+
+      // Calculate the angle of the rotation.
+      double angle = angle_;
+      if ((target_vector_transformed.vector.x    != 0 || target_vector_transformed.vector.y    != 0) &&
+          (source_vector_transformed.vector.x != 0 || source_vector_transformed.vector.y != 0))
+      {
+        angle = atan2(target_vector_transformed.vector.y, target_vector_transformed.vector.x);
+        angle -= atan2(source_vector_transformed.vector.y, source_vector_transformed.vector.x);
+      }
+
+      // Rate limit the rotation.
+      if (config_.max_angular_rate == 0)
+        angle_ = angle;
+      else
+      {
+        double delta = fmod(angle - angle_, 2.0 * M_PI);
+        if (delta > M_PI)
+          delta -= 2.0 * M_PI;
+        else if (delta < - M_PI)
+          delta += 2.0 * M_PI;
+
+        double max_delta = config_.max_angular_rate * (msg->header.stamp - prev_stamp_).toSec();
+        if (delta > max_delta)
+          delta = max_delta;
+        else if (delta < -max_delta)
+          delta = - max_delta;
+
+        angle_ += delta;
+      }
+      angle_ = fmod(angle_, 2.0 * M_PI);
+    }
+    catch (tf2::TransformException &e)
+    {
+      NODELET_ERROR("Transform error: %s", e.what());
+    }
+
+    //NODELET_INFO("angle: %f", 180 * angle_ / M_PI);
+
+    // Publish the transform.
+    geometry_msgs::TransformStamped transform;
+    transform.transform.translation.x = 0;
+    transform.transform.translation.y = 0;
+    transform.transform.translation.z = 0;
+    tf2::convert(tf2::Quaternion(tf2::Vector3(0.0, 0.0, 1.0), angle_), transform.transform.rotation);
+    transform.header.frame_id = msg->header.frame_id;
+    transform.child_frame_id = frameWithDefault(config_.output_frame_id, msg->header.frame_id + "_rotated");
+    transform.header.stamp = msg->header.stamp;
+    tf_pub_.sendTransform(transform);
+
+    // Transform the image.
+    try
+    {
+      // Convert the image into something opencv can handle.
+      cv::Mat in_image = cv_bridge::toCvShare(msg, msg->encoding)->image;
+
+      // Compute the output image size.
+      int max_dim = in_image.cols > in_image.rows ? in_image.cols : in_image.rows;
+      int min_dim = in_image.cols < in_image.rows ? in_image.cols : in_image.rows;
+      int noblack_dim = min_dim / sqrt(2);
+      int diag_dim = sqrt(in_image.cols*in_image.cols + in_image.rows*in_image.rows);
+      int out_size;
+      int candidates[] = { noblack_dim, min_dim, max_dim, diag_dim, diag_dim }; // diag_dim repeated to simplify limit case.
+      int step = config_.output_image_size;
+      out_size = candidates[step] + (candidates[step + 1] - candidates[step]) * (config_.output_image_size - step);
+      //NODELET_INFO("out_size: %d", out_size);
+
+      // Compute the rotation matrix.
+      cv::Mat rot_matrix = cv::getRotationMatrix2D(cv::Point2f(in_image.cols / 2.0, in_image.rows / 2.0), 180 * angle_ / M_PI, 1);
+      cv::Mat translation = rot_matrix.col(2);
+      rot_matrix.at<double>(0, 2) += (out_size - in_image.cols) / 2.0;
+      rot_matrix.at<double>(1, 2) += (out_size - in_image.rows) / 2.0;
+
+      // Do the rotation
+      cv::Mat out_image;
+      cv::warpAffine(in_image, out_image, rot_matrix, cv::Size(out_size, out_size));
+
+      // Publish the image.
+      sensor_msgs::Image::Ptr out_img = cv_bridge::CvImage(msg->header, msg->encoding, out_image).toImageMsg();
+      out_img->header.frame_id = transform.child_frame_id;
+      img_pub_.publish(out_img);
+    }
+    catch (cv::Exception &e)
+    {
+      NODELET_ERROR("Image processing error: %s %s %s %i", e.err.c_str(), e.func.c_str(), e.file.c_str(), e.line);
+    }
+
+    prev_stamp_ = msg->header.stamp;
+  }
+
+  void subscribe()
+  {
+    NODELET_DEBUG("Subscribing to image topic.");
+    if (config_.use_camera_info && config_.input_frame_id.empty())
+      cam_sub_ = it_->subscribeCamera("image", 3, &ImageRotateNodelet::imageCallbackWithInfo, this);
+    else
+      img_sub_ = it_->subscribe("image", 3, &ImageRotateNodelet::imageCallback, this);
+  }
+
+  void unsubscribe()
+  {
+      NODELET_DEBUG("Unsubscribing from image topic.");
+      img_sub_.shutdown();
+      cam_sub_.shutdown();
+  }
+
+  void connectCb(const image_transport::SingleSubscriberPublisher& ssp)
+  {
+    if (subscriber_count_++ == 0) {
+      subscribe();
+    }
+  }
+
+  void disconnectCb(const image_transport::SingleSubscriberPublisher&)
+  {
+    subscriber_count_--;
+    if (subscriber_count_ == 0) {
+      unsubscribe();
+    }
+  }
+
+public:
+  virtual void onInit()
+  {
+    nh_ = getNodeHandle();
+    it_ = boost::shared_ptr<image_transport::ImageTransport>(new image_transport::ImageTransport(nh_));
+    subscriber_count_ = 0;
+    angle_ = 0;
+    prev_stamp_ = ros::Time::now();
+    tf_sub_.reset(new tf2_ros::TransformListener(tf_buffer_));
+    image_transport::SubscriberStatusCallback connect_cb    = boost::bind(&ImageRotateNodelet::connectCb, this, boost::placeholders::_1);
+    image_transport::SubscriberStatusCallback disconnect_cb = boost::bind(&ImageRotateNodelet::disconnectCb, this, boost::placeholders::_1);
+    img_pub_ = image_transport::ImageTransport(ros::NodeHandle(nh_, "rotated")).advertise("image", 1, connect_cb, disconnect_cb);
+
+    dynamic_reconfigure::Server<image_rotate::ImageRotateConfig>::CallbackType f =
+      boost::bind(&ImageRotateNodelet::reconfigureCallback, this, boost::placeholders::_1, boost::placeholders::_2);
+    srv.setCallback(f);
+  }
+};
+}
+#include <pluginlib/class_list_macros.hpp>
+PLUGINLIB_EXPORT_CLASS(image_rotate::ImageRotateNodelet, nodelet::Nodelet);
