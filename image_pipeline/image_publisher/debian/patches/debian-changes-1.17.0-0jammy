Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ros-noetic-image-publisher (1.17.0-0jammy) jammy; urgency=high
 .
   * Switch to hpp headers of pluginlib
   * Switch to new boost/bind/bind.hpp
   * Contributors: Jochen Sprickerhof
Author: Vincent Rabaud <vincent.rabaud@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2024-08-18

--- /dev/null
+++ ros-noetic-image-publisher-1.17.0/CHANGELOG.rst
@@ -0,0 +1,103 @@
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Changelog for package image_publisher
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+1.17.0 (2022-10-17)
+-------------------
+* Switch to hpp headers of pluginlib
+* Switch to new boost/bind/bind.hpp
+* Contributors: Jochen Sprickerhof
+
+1.16.0 (2021-11-12)
+-------------------
+
+1.15.3 (2020-12-11)
+-------------------
+* remove email blasts from steve macenski (`#595 <https://github.com/ros-perception/image_pipeline/issues/595>`_)
+* Contributors: Steve Macenski
+
+1.15.2 (2020-05-19)
+-------------------
+
+1.15.1 (2020-05-18)
+-------------------
+
+1.15.0 (2020-05-14)
+-------------------
+* Python 3 compatibility (`#530 <https://github.com/ros-perception/image_pipeline/issues/530>`_)
+* cmake_minimum_required to 3.0.2
+* Adapted to OpenCV4
+* import setup from setuptools instead of distutils-core
+* updated install locations for better portability. (`#500 <https://github.com/ros-perception/image_pipeline/issues/500>`_)
+* Contributors: Joshua Whitley, Sean Yen
+
+1.14.0 (2020-01-12)
+-------------------
+
+1.13.0 (2019-06-12)
+-------------------
+* Merge pull request `#358 <https://github.com/ros-perception/image_pipeline/issues/358>`_ from lucasw/image_pub_dr_private_namespace
+* Use a shared_ptr for the dynamic reconfigure pointer, and create it with the private node handle so that the parameters for the dynamic reconfigure server are in the private namespace and two image publishers can coexist in the same manager `#357 <https://github.com/ros-perception/image_pipeline/issues/357>`_
+* Merge pull request `#395 <https://github.com/ros-perception/image_pipeline/issues/395>`_ from ros-perception/steve_maintain
+* adding autonomoustuff mainainer
+* adding stevemacenski as maintainer to get emails
+* Contributors: Joshua Whitley, Lucas Walter, Yoshito Okada, stevemacenski
+
+1.12.23 (2018-05-10)
+--------------------
+* fix 'VideoCapture' undefined symbol error (`#318 <https://github.com/ros-perception/image_pipeline/issues/318>`_)
+  * fix 'VideoCapture' undefined symbol error
+  The following error occured when trying to run image_publisher:
+  [...]/devel/lib/image_publisher/image_publisher: symbol lookup error: [...]/devel/lib//libimage_publisher.so: undefined symbol: _ZN2cv12VideoCaptureC1Ev
+  Probably, changes in cv_bridge reducing the OpenCV component dependencies led to the error. See
+  https://github.com/ros-perception/vision_opencv/commit/8b5bbcbc1ce65734dc600695487909e0c67c1033
+  This is fixed by manually finding OpenCV with the required components and adding the dependencies to the library, not just the node.
+  * add image_publisher opencv 2 compatibility
+* Contributors: hannometer
+
+1.12.22 (2017-12-08)
+--------------------
+
+1.12.21 (2017-11-05)
+--------------------
+
+1.12.20 (2017-04-30)
+--------------------
+* explicitly cast to std::vector<double> to make gcc6 happy
+  With gcc6, compiling image_publisher fails with this error:
+  ```
+  /[...]/image_publisher/src/nodelet/image_publisher_nodelet.cpp: In member function 'virtual void image_publisher::ImagePublisherNodelet::onInit()':
+  /[...]/image_publisher/src/nodelet/image_publisher_nodelet.cpp:180:43: error: ambiguous overload for 'operator=' (operand types are 'sensor_msgs::CameraInfo\_<std::allocator<void> >::_D_type {aka std::vector<double>}' and 'boost::assign_detail::generic_list<int>')
+  camera_info\_.D = list_of(0)(0)(0)(0)(0);
+  ```
+  After adding an initial explicit type cast for the assignment,
+  compiling fails further with:
+  ```
+  | /[...]/image_publisher/src/nodelet/image_publisher_nodelet.cpp: In member function 'virtual void image_publisher::ImagePublisherNodelet::onInit()':
+  | /[...]/image_publisher/src/nodelet/image_publisher_nodelet.cpp:180:65: error: call of overloaded 'vector(boost::assign_detail::generic_list<int>&)' is ambiguous
+  |      camera_info\_.D = std::vector<double> (list_of(0)(0)(0)(0)(0));
+  ```
+  Various sources on the internet [1, 2, 3] point to use the
+  `convert_to_container` method; hence, this commit follows those
+  suggestions and with that image_publisher compiles with gcc6.
+  [1] http://stackoverflow.com/questions/16211410/ambiguity-when-using-boostassignlist-of-to-construct-a-stdvector
+  [2] http://stackoverflow.com/questions/12352692/`ambiguous-call-with-list-of-in-vs2010/12362548#12362548 <https://github.com/ambiguous-call-with-list-of-in-vs2010/12362548/issues/12362548>`_
+  [3] http://stackoverflow.com/questions/13285272/using-boostassignlist-of?rq=1
+  Signed-off-by: Lukas Bulwahn <lukas.bulwahn@oss.bmw-carit.de>
+* address gcc6 build error
+  With gcc6, compiling fails with `stdlib.h: No such file or directory`,
+  as including '-isystem /usr/include' breaks with gcc6, cf.,
+  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=70129.
+  This commit addresses this issue for this package in the same way
+  it was addressed in various other ROS packages. A list of related
+  commits and pull requests is at:
+  https://github.com/ros/rosdistro/issues/12783
+  Signed-off-by: Lukas Bulwahn <lukas.bulwahn@oss.bmw-carit.de>
+* Contributors: Lukas Bulwahn
+
+1.12.19 (2016-07-24)
+--------------------
+* add image_publisher
+* Contributors: Kei Okada
+
+* add image_publisher
+* Contributors: Kei Okada
--- /dev/null
+++ ros-noetic-image-publisher-1.17.0/CMakeLists.txt
@@ -0,0 +1,39 @@
+cmake_minimum_required(VERSION 3.0.2)
+project(image_publisher)
+
+find_package(catkin REQUIRED COMPONENTS cv_bridge dynamic_reconfigure camera_info_manager sensor_msgs image_transport nodelet roscpp)
+
+find_package(OpenCV REQUIRED COMPONENTS core)
+message(STATUS "opencv version ${OpenCV_VERSION}")
+if(OpenCV_VERSION VERSION_LESS "4.0.0")
+  find_package(OpenCV 3 REQUIRED COMPONENTS core imgcodecs videoio)
+else()
+  find_package(OpenCV 4 REQUIRED COMPONENTS core imgcodecs videoio)
+endif()
+
+# generate the dynamic_reconfigure config file
+generate_dynamic_reconfigure_options(cfg/ImagePublisher.cfg)
+
+catkin_package()
+
+include_directories(${catkin_INCLUDE_DIRS})
+
+add_library(${PROJECT_NAME} SHARED src/nodelet/image_publisher_nodelet.cpp)
+target_link_libraries(${PROJECT_NAME} ${catkin_LIBRARIES} ${OpenCV_LIBRARIES})
+add_dependencies(${PROJECT_NAME} ${PROJECT_NAME}_gencfg)
+install(TARGETS image_publisher
+        ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
+        LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
+        RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
+)
+
+add_executable(image_publisher_exe src/node/image_publisher.cpp)
+SET_TARGET_PROPERTIES(image_publisher_exe PROPERTIES OUTPUT_NAME image_publisher)
+target_link_libraries(image_publisher_exe ${catkin_LIBRARIES})
+
+install(TARGETS image_publisher_exe
+        DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
+)
+install(FILES nodelet_plugins.xml
+        DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
+)
--- /dev/null
+++ ros-noetic-image-publisher-1.17.0/cfg/ImagePublisher.cfg
@@ -0,0 +1,44 @@
+#! /usr/bin/env python
+# Software License Agreement (BSD License)
+#
+# Copyright (c) 2010, Willow Garage, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+#
+#  * Redistributions of source code must retain the above copyright
+#    notice, this list of conditions and the following disclaimer.
+#  * Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials provided
+#    with the distribution.
+#  * Neither the name of Willow Garage, Inc. nor the names of its
+#    contributors may be used to endorse or promote products derived
+#    from this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+
+PACKAGE='image_publisher'
+
+from dynamic_reconfigure.parameter_generator_catkin import *
+
+gen = ParameterGenerator()
+gen.add("frame_id", str_t, 0, "Frame to use for camera image", "camera")
+gen.add("publish_rate", double_t, 0, "Rate to publish image", 10, 0.1, 30)
+gen.add("camera_info_url", str_t, 0, "Path to camera_info", "")
+
+exit(gen.generate(PACKAGE, "image_publisher", "ImagePublisher"))
--- /dev/null
+++ ros-noetic-image-publisher-1.17.0/nodelet_plugins.xml
@@ -0,0 +1,7 @@
+<library path="lib/libimage_publisher">
+
+  <class name="image_publisher/image_publisher" type="image_publisher::ImagePublisherNodelet" base_class_type="nodelet::Nodelet">
+    <description>Nodelet to publish sensor_msgs/Image</description>
+  </class>
+
+</library>
--- /dev/null
+++ ros-noetic-image-publisher-1.17.0/package.xml
@@ -0,0 +1,36 @@
+<package>
+  <name>image_publisher</name>
+  <version>1.17.0</version>
+  <description>
+    <p>
+      Contains a node publish an image stream from single image file
+      or avi motion file.
+    </p>
+  </description>
+  <author>Kei Okada</author>
+  <maintainer email="vincent.rabaud@gmail.com">Vincent Rabaud</maintainer>
+  <maintainer email="software@autonomoustuff.com">Autonomoustuff team</maintainer>
+  <license>BSD</license>
+  <url>http://ros.org/wiki/image_publisher</url>
+
+  <buildtool_depend>catkin</buildtool_depend>
+
+  <build_depend>cv_bridge</build_depend>
+  <build_depend>dynamic_reconfigure</build_depend>
+  <build_depend>camera_info_manager</build_depend>
+  <build_depend>image_transport</build_depend>
+  <build_depend>nodelet</build_depend>
+  <build_depend>roscpp</build_depend>
+  <build_depend>sensor_msgs</build_depend>
+
+  <run_depend>cv_bridge</run_depend>
+  <run_depend>dynamic_reconfigure</run_depend>
+  <run_depend>camera_info_manager</run_depend>
+  <run_depend>image_transport</run_depend>
+  <run_depend>nodelet</run_depend>
+  <run_depend>roscpp</run_depend>
+  <run_depend>sensor_msgs</run_depend>
+  <export>
+    <nodelet plugin="${prefix}/nodelet_plugins.xml"/>
+  </export>
+</package>
--- /dev/null
+++ ros-noetic-image-publisher-1.17.0/src/node/image_publisher.cpp
@@ -0,0 +1,57 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+* 
+*  Copyright (c) 2008, Willow Garage, Inc.
+*  All rights reserved.
+* 
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+* 
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+* 
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+#include <ros/ros.h>
+#include <nodelet/loader.h>
+
+int main(int argc, char **argv)
+{
+  ros::init(argc, argv, "image_publisher", ros::init_options::AnonymousName);
+
+  if (argc <= 1) {
+    ROS_ERROR("image_publisher requires filename. Typical command-line usage:\n"
+              "\t$ rosrun image_publisher image_publisher <filename>");
+    return 1;
+  }
+
+  ros::param::set("~filename", argv[1]);
+  nodelet::Loader manager(false);
+  nodelet::M_string remappings;
+  nodelet::V_string my_argv(argv + 1, argv + argc);
+  my_argv.push_back("--shutdown-on-close"); // Internal
+
+  manager.load(ros::this_node::getName(), "image_publisher/image_publisher", remappings, my_argv);
+
+  ros::spin();
+  return 0;
+}
--- /dev/null
+++ ros-noetic-image-publisher-1.17.0/src/nodelet/image_publisher_nodelet.cpp
@@ -0,0 +1,196 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2014, JSK Lab.
+*                2008, Willow Garage, Inc.
+*  All rights reserved.
+* 
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+* 
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of the Willow Garage nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+* 
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+#include <ros/ros.h>
+#include <nodelet/nodelet.h>
+#include <cv_bridge/cv_bridge.h>
+#include <image_publisher/ImagePublisherConfig.h>
+#include <image_transport/image_transport.h>
+#include <sensor_msgs/CameraInfo.h>
+#include <camera_info_manager/camera_info_manager.h>
+#include <opencv2/highgui/highgui.hpp>
+#include <dynamic_reconfigure/server.h>
+#include <boost/assign.hpp>
+using namespace boost::assign;
+
+namespace image_publisher {
+class ImagePublisherNodelet : public nodelet::Nodelet
+{
+  typedef dynamic_reconfigure::Server<image_publisher::ImagePublisherConfig> ReconfigureServer;
+  boost::shared_ptr<ReconfigureServer> srv;
+
+  image_transport::CameraPublisher pub_;
+
+  boost::shared_ptr<image_transport::ImageTransport> it_;
+  ros::NodeHandle nh_;
+
+  cv::VideoCapture cap_;
+  cv::Mat image_;
+  int subscriber_count_;
+  ros::Timer timer_;
+
+  std::string frame_id_;
+  std::string filename_;
+  bool flip_image_;
+  int flip_value_;
+  sensor_msgs::CameraInfo camera_info_;
+  
+
+  void reconfigureCallback(image_publisher::ImagePublisherConfig &new_config, uint32_t level)
+  {
+    frame_id_ = new_config.frame_id;
+
+    timer_ = nh_.createTimer(ros::Duration(1.0/new_config.publish_rate), &ImagePublisherNodelet::do_work, this);
+
+    camera_info_manager::CameraInfoManager c(nh_);
+    if ( !new_config.camera_info_url.empty() ) {
+      try {
+        c.validateURL(new_config.camera_info_url);
+        c.loadCameraInfo(new_config.camera_info_url);
+        camera_info_ = c.getCameraInfo();
+      } catch(cv::Exception &e) {
+        NODELET_ERROR("camera calibration failed to load: %s %s %s %i", e.err.c_str(), e.func.c_str(), e.file.c_str(), e.line);
+      }
+    }
+    
+
+  }
+
+  void do_work(const ros::TimerEvent& event)
+  {
+    // Transform the image.
+    try
+    {
+      if ( cap_.isOpened() ) {
+        if ( ! cap_.read(image_) ) {
+          cap_.set(cv::CAP_PROP_POS_FRAMES, 0);
+        }
+      }
+      if (flip_image_)
+        cv::flip(image_, image_, flip_value_);
+
+      sensor_msgs::ImagePtr out_img = cv_bridge::CvImage(std_msgs::Header(), "bgr8", image_).toImageMsg();
+      out_img->header.frame_id = frame_id_;
+      out_img->header.stamp = ros::Time::now();
+      camera_info_.header.frame_id = out_img->header.frame_id;
+      camera_info_.header.stamp = out_img->header.stamp;
+
+      pub_.publish(*out_img, camera_info_);
+    }
+    catch (cv::Exception &e)
+    {
+      NODELET_ERROR("Image processing error: %s %s %s %i", e.err.c_str(), e.func.c_str(), e.file.c_str(), e.line);
+    }
+  }
+
+  void connectCb(const image_transport::SingleSubscriberPublisher& ssp)
+  {
+    subscriber_count_++;
+  }
+
+  void disconnectCb(const image_transport::SingleSubscriberPublisher&)
+  {
+    subscriber_count_--;
+  }
+
+public:
+  virtual void onInit()
+  {
+    subscriber_count_ = 0;
+    nh_ = getPrivateNodeHandle();
+    it_ = boost::shared_ptr<image_transport::ImageTransport>(new image_transport::ImageTransport(nh_));
+    pub_ = image_transport::ImageTransport(nh_).advertiseCamera("image_raw", 1);
+
+    nh_.param("filename", filename_, std::string(""));
+    NODELET_INFO("File name for publishing image is : %s", filename_.c_str());
+    try {
+      image_ = cv::imread(filename_, cv::IMREAD_COLOR);
+      if ( image_.empty() ) { // if filename is motion file or device file
+        try {  // if filename is number
+          int num = boost::lexical_cast<int>(filename_);//num is 1234798797
+          cap_.open(num);
+        } catch(boost::bad_lexical_cast &) { // if file name is string
+          cap_.open(filename_);
+        }
+        CV_Assert(cap_.isOpened());
+        cap_.read(image_);
+        cap_.set(cv::CAP_PROP_POS_FRAMES, 0);
+      }
+      CV_Assert(!image_.empty());
+    }
+    catch (cv::Exception &e)
+    {
+      NODELET_ERROR("Failed to load image (%s): %s %s %s %i", filename_.c_str(), e.err.c_str(), e.func.c_str(), e.file.c_str(), e.line);
+    }
+
+    bool flip_horizontal;
+    nh_.param("flip_horizontal", flip_horizontal, false);
+    NODELET_INFO("Flip horizontal image is : %s",  ((flip_horizontal)?"true":"false"));
+
+    bool flip_vertical;
+    nh_.param("flip_vertical", flip_vertical, false);
+    NODELET_INFO("Flip flip_vertical image is : %s", ((flip_vertical)?"true":"false"));
+
+    // From http://docs.opencv.org/modules/core/doc/operations_on_arrays.html#void flip(InputArray src, OutputArray dst, int flipCode)
+    // FLIP_HORIZONTAL == 1, FLIP_VERTICAL == 0 or FLIP_BOTH == -1
+    flip_image_ = true;
+    if (flip_horizontal && flip_vertical)
+      flip_value_ = 0; // flip both, horizontal and vertical
+    else if (flip_horizontal)
+      flip_value_ = 1;
+    else if (flip_vertical)
+      flip_value_ = -1;
+    else
+      flip_image_ = false;
+
+    camera_info_.width = image_.cols;
+    camera_info_.height = image_.rows;
+    camera_info_.distortion_model = "plumb_bob";
+    camera_info_.D = list_of(0)(0)(0)(0)(0).convert_to_container<std::vector<double> >();
+    camera_info_.K = list_of(1)(0)(camera_info_.width/2)(0)(1)(camera_info_.height/2)(0)(0)(1);
+    camera_info_.R = list_of(1)(0)(0)(0)(1)(0)(0)(0)(1);
+    camera_info_.P = list_of(1)(0)(camera_info_.width/2)(0)(0)(1)(camera_info_.height/2)(0)(0)(0)(1)(0);
+
+    timer_ = nh_.createTimer(ros::Duration(1), &ImagePublisherNodelet::do_work, this);
+
+    srv.reset(new ReconfigureServer(getPrivateNodeHandle()));
+    ReconfigureServer::CallbackType f =
+      boost::bind(&ImagePublisherNodelet::reconfigureCallback, this, boost::placeholders::_1, boost::placeholders::_2);
+    srv->setCallback(f);
+  }
+};
+}
+#include <pluginlib/class_list_macros.hpp>
+PLUGINLIB_EXPORT_CLASS(image_publisher::ImagePublisherNodelet, nodelet::Nodelet);
