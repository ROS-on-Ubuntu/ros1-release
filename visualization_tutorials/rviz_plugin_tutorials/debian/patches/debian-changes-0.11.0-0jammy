Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ros-noetic-rviz-plugin-tutorials (0.11.0-0jammy) jammy; urgency=high
Author: William Woodall <william@osrfoundation.org>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2024-08-18

--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/CHANGELOG.rst
@@ -0,0 +1,46 @@
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Changelog for package rviz_plugin_tutorials
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+0.11.0 (2020-05-13)
+-------------------
+
+0.10.4 (2020-05-13)
+-------------------
+* Updated to use ``catkin_install_python()`` (`#59 <https://github.com/ros-visualization/visualization_tutorials/issues/59>`_)
+* Updated required CMake version to avoid CMP0048 warning (`#57 <https://github.com/ros-visualization/visualization_tutorials/issues/57>`_)
+* Contributors: Alejandro Hern√°ndez Cordero, Shane Loretz
+
+0.10.3 (2018-05-09)
+-------------------
+* Fixed a warning due to a publisher which did not use the keyword argument 'queue_size' (`#43 <https://github.com/ros-visualization/visualization_tutorials/issues/43>`_)
+* Changed manifest.xml to package.xml in documentation (`#42 <https://github.com/ros-visualization/visualization_tutorials/issues/42>`_)
+* Contributors: Zihan Chen
+
+0.10.2 (2018-01-05)
+-------------------
+* Unified find_package for Qt4 and Qt5. (`#33 <https://github.com/ros-visualization/visualization_tutorials//issues/33>`_)
+* Contributors: Robert Haschke, William Woodall
+
+0.10.1 (2016-04-21)
+-------------------
+* Added qt5 dependencies to the package.xml.
+* Contributors: William Woodall
+
+0.10.0 (2016-04-21)
+-------------------
+* Added support Qt5 in Kinetic.
+* Contributors: William Woodall
+
+0.9.2 (2015-09-21)
+------------------
+
+0.9.1 (2015-01-26)
+------------------
+* Added ``#ifndef Q_MOC_RUN`` guard for compatibility with newer boost versions.
+* Contributors: Ryohei Ueda, William Woodall
+
+0.9.0 (2014-03-24)
+------------------
+* set myself (william) as maintainer
+* Contributors: William Woodall
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/CMakeLists.txt
@@ -0,0 +1,84 @@
+## BEGIN_TUTORIAL
+## This CMakeLists.txt file for rviz_plugin_tutorials builds both the
+## TeleopPanel tutorial and the ImuDisplay tutorial.
+##
+## First start with some standard catkin stuff.
+cmake_minimum_required(VERSION 3.0.2)
+project(rviz_plugin_tutorials)
+find_package(catkin REQUIRED COMPONENTS rviz)
+catkin_package()
+include_directories(${catkin_INCLUDE_DIRS})
+link_directories(${catkin_LIBRARY_DIRS})
+
+## This setting causes Qt's "MOC" generation to happen automatically.
+set(CMAKE_AUTOMOC ON)
+
+## This plugin includes Qt widgets, so we must include Qt.
+## We'll use the version that rviz used so they are compatible.
+if(rviz_QT_VERSION VERSION_LESS "5")
+  message(STATUS "Using Qt4 based on the rviz_QT_VERSION: ${rviz_QT_VERSION}")
+  find_package(Qt4 ${rviz_QT_VERSION} EXACT REQUIRED QtCore QtGui)
+  ## pull in all required include dirs, define QT_LIBRARIES, etc.
+  include(${QT_USE_FILE})
+else()
+  message(STATUS "Using Qt5 based on the rviz_QT_VERSION: ${rviz_QT_VERSION}")
+  find_package(Qt5 ${rviz_QT_VERSION} EXACT REQUIRED Core Widgets)
+  ## make target_link_libraries(${QT_LIBRARIES}) pull in all required dependencies
+  set(QT_LIBRARIES Qt5::Widgets)
+endif()
+
+## I prefer the Qt signals and slots to avoid defining "emit", "slots",
+## etc because they can conflict with boost signals, so define QT_NO_KEYWORDS here.
+add_definitions(-DQT_NO_KEYWORDS)
+
+## Here we specify the list of source files.
+## The generated MOC files are included automatically as headers.
+set(SRC_FILES
+  src/drive_widget.cpp
+  src/imu_display.cpp
+  src/imu_visual.cpp
+  src/plant_flag_tool.cpp
+  src/teleop_panel.cpp
+)
+
+## An rviz plugin is just a shared library, so here we declare the
+## library to be called ``${PROJECT_NAME}`` (which is
+## "rviz_plugin_tutorials", or whatever your version of this project
+## is called) and specify the list of source files we collected above
+## in ``${SRC_FILES}``.
+add_library(${PROJECT_NAME} ${SRC_FILES})
+
+## Link the myviz executable with whatever Qt libraries have been defined by
+## the ``find_package(Qt4 ...)`` line above, or by the
+## ``set(QT_LIBRARIES Qt5::Widgets)``, and with whatever libraries
+## catkin has included.
+##
+## Although this puts "rviz_plugin_tutorials" (or whatever you have
+## called the project) as the name of the library, cmake knows it is a
+## library and names the actual file something like
+## "librviz_plugin_tutorials.so", or whatever is appropriate for your
+## particular OS.
+target_link_libraries(${PROJECT_NAME} ${QT_LIBRARIES} ${catkin_LIBRARIES})
+## END_TUTORIAL
+
+## Install rules
+
+install(TARGETS
+  ${PROJECT_NAME}
+  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
+  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
+  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
+)
+
+install(FILES
+  plugin_description.xml
+  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})
+
+install(DIRECTORY media/
+  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}/media)
+
+install(DIRECTORY icons/
+  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}/icons)
+
+catkin_install_python(PROGRAMS scripts/send_test_msgs.py
+  DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/media/flag.dae
@@ -0,0 +1,323 @@
+<?xml version="1.0" encoding="utf-8"?>
+<COLLADA version="1.4.0" xmlns="http://www.collada.org/2005/11/COLLADASchema">
+	<asset>
+		<contributor>
+			<author>Illusoft Collada 1.4.0 plugin for Blender - http://colladablender.illusoft.com</author>
+			<authoring_tool>Blender v:249 - Illusoft Collada Exporter v:0.3.162</authoring_tool>
+			<comments></comments>
+			<copyright></copyright>
+			<source_data>file:///u/hersh/flag.blend</source_data>
+		</contributor>
+		<created>2011-03-16T15:32:31.374173</created>
+		<modified>2011-03-16T15:32:31.374204</modified>
+		<up_axis>Z_UP</up_axis>
+	</asset>
+	<library_effects>
+		<effect id="blue_alpha-fx" name="blue_alpha-fx">
+			<profile_COMMON>
+				<technique sid="blender">
+					<phong>
+						<emission>
+							<color>0.00000 0.00000 0.00000 1</color>
+						</emission>
+						<ambient>
+							<color>0.04706 0.37059 0.44706 1</color>
+						</ambient>
+						<diffuse>
+							<color>0.09412 0.74118 0.89412 1</color>
+						</diffuse>
+						<specular>
+							<color>0.50000 0.50000 0.50000 1</color>
+						</specular>
+						<shininess>
+							<float>12.5</float>
+						</shininess>
+						<reflective>
+							<color>1.00000 1.00000 1.00000 1</color>
+						</reflective>
+						<reflectivity>
+							<float>0.0</float>
+						</reflectivity>
+						<transparent>
+							<color>1 1 1 1</color>
+						</transparent>
+						<transparency>
+							<float>0.5</float>
+						</transparency>
+					</phong>
+				</technique>
+			</profile_COMMON>
+		</effect>
+		<effect id="red-fx" name="red-fx">
+			<profile_COMMON>
+				<technique sid="blender">
+					<phong>
+						<emission>
+							<color>0.00000 0.00000 0.00000 1</color>
+						</emission>
+						<ambient>
+							<color>0.50000 0.00000 0.00000 1</color>
+						</ambient>
+						<diffuse>
+							<color>1.00000 0.00000 0.00000 1</color>
+						</diffuse>
+						<specular>
+							<color>0.50000 0.50000 0.50000 1</color>
+						</specular>
+						<shininess>
+							<float>12.5</float>
+						</shininess>
+						<reflective>
+							<color>1.00000 1.00000 1.00000 1</color>
+						</reflective>
+						<reflectivity>
+							<float>0.0</float>
+						</reflectivity>
+						<transparent>
+							<color>1 1 1 1</color>
+						</transparent>
+						<transparency>
+							<float>0.0</float>
+						</transparency>
+					</phong>
+				</technique>
+			</profile_COMMON>
+		</effect>
+		<effect id="white-fx" name="white-fx">
+			<profile_COMMON>
+				<technique sid="blender">
+					<phong>
+						<emission>
+							<color>0.00000 0.00000 0.00000 1</color>
+						</emission>
+						<ambient>
+							<color>0.50000 0.50000 0.50000 1</color>
+						</ambient>
+						<diffuse>
+							<color>1.00000 1.00000 1.00000 1</color>
+						</diffuse>
+						<specular>
+							<color>0.50000 0.50000 0.50000 1</color>
+						</specular>
+						<shininess>
+							<float>12.5</float>
+						</shininess>
+						<reflective>
+							<color>1.00000 1.00000 1.00000 1</color>
+						</reflective>
+						<reflectivity>
+							<float>0.0</float>
+						</reflectivity>
+						<transparent>
+							<color>1 1 1 1</color>
+						</transparent>
+						<transparency>
+							<float>0.0</float>
+						</transparency>
+					</phong>
+				</technique>
+			</profile_COMMON>
+		</effect>
+	</library_effects>
+	<library_lights>
+		<light id="Lamp_001" name="Lamp_001">
+			<technique_common>
+				<directional>
+					<color>1.00000 1.00000 1.00000</color>
+				</directional>
+			</technique_common>
+		</light>
+	</library_lights>
+	<library_materials>
+		<material id="blue_alpha" name="blue_alpha">
+			<instance_effect url="#blue_alpha-fx"/>
+		</material>
+		<material id="red" name="red">
+			<instance_effect url="#red-fx"/>
+		</material>
+		<material id="white" name="white">
+			<instance_effect url="#white-fx"/>
+		</material>
+	</library_materials>
+	<library_geometries>
+		<geometry id="Cylinder_001-Geometry" name="Cylinder_001-Geometry">
+			<mesh>
+				<source id="Cylinder_001-Geometry-Position">
+					<float_array count="198" id="Cylinder_001-Geometry-Position-array">0.70711 0.70711 -0.01000 0.83147 0.55557 -0.01000 0.92388 0.38268 -0.01000 0.98079 0.19509 -0.01000 1.00000 0.00000 -0.01000 0.98079 -0.19509 -0.01000 0.92388 -0.38268 -0.01000 0.83147 -0.55557 -0.01000 0.70711 -0.70711 -0.01000 0.55557 -0.83147 -0.01000 0.38268 -0.92388 -0.01000 0.19509 -0.98079 -0.01000 -0.00000 -1.00000 -0.01000 -0.19509 -0.98079 -0.01000 -0.38268 -0.92388 -0.01000 -0.55557 -0.83147 -0.01000 -0.70711 -0.70711 -0.01000 -0.83147 -0.55557 -0.01000 -0.92388 -0.38268 -0.01000 -0.98079 -0.19509 -0.01000 -1.00000 0.00000 -0.01000 -0.98079 0.19509 -0.01000 -0.92388 0.38268 -0.01000 -0.83147 0.55557 -0.01000 -0.70711 0.70711 -0.01000 -0.55557 0.83147 -0.01000 -0.38268 0.92388 -0.01000 -0.19509 0.98079 -0.01000 0.00000 1.00000 -0.01000 0.19509 0.98078 -0.01000 0.38269 0.92388 -0.01000 0.55557 0.83147 -0.01000 0.70711 0.70711 0.01000 0.83147 0.55557 0.01000 0.92388 0.38268 0.01000 0.98079 0.19509 0.01000 1.00000 -0.00000 0.01000 0.98078 -0.19509 0.01000 0.92388 -0.38268 0.01000 0.83147 -0.55557 0.01000 0.70711 -0.70711 0.01000 0.55557 -0.83147 0.01000 0.38268 -0.92388 0.01000 0.19509 -0.98079 0.01000 0.00000 -1.00000 0.01000 -0.19509 -0.98079 0.01000 -0.38268 -0.92388 0.01000 -0.55557 -0.83147 0.01000 -0.70710 -0.70711 0.01000 -0.83147 -0.55557 0.01000 -0.92388 -0.38269 0.01000 -0.98078 -0.19509 0.01000 -1.00000 -0.00000 0.01000 -0.98079 0.19509 0.01000 -0.92388 0.38268 0.01000 -0.83147 0.55557 0.01000 -0.70711 0.70710 0.01000 -0.55558 0.83147 0.01000 -0.38269 0.92388 0.01000 -0.19510 0.98078 0.01000 -0.00001 1.00000 0.01000 0.19508 0.98079 0.01000 0.38268 0.92388 0.01000 0.55556 0.83147 0.01000 0.00000 0.00000 -0.01000 0.00000 0.00000 0.01000</float_array>
+					<technique_common>
+						<accessor count="66" source="#Cylinder_001-Geometry-Position-array" stride="3">
+							<param type="float" name="X"></param>
+							<param type="float" name="Y"></param>
+							<param type="float" name="Z"></param>
+						</accessor>
+					</technique_common>
+				</source>
+				<source id="Cylinder_001-Geometry-Normals">
+					<float_array count="288" id="Cylinder_001-Geometry-Normals-array">-0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 -0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 -0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 -0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 -0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 -0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 -0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 -0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 -0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 -0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 -0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 -0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 -0.00000 1.00000 0.00000 -0.00000 -1.00000 -0.00000 0.00000 1.00000 0.00000 -0.00000 -1.00000 -0.00000 0.00000 1.00000 0.00000 -0.00000 -1.00000 -0.00000 0.00000 1.00000 0.00000 -0.00000 -1.00000 -0.00000 0.00000 1.00000 0.00000 -0.00000 -1.00000 -0.00000 0.00000 1.00000 0.00000 -0.00000 -1.00000 -0.00000 0.00000 1.00000 0.00000 -0.00000 -1.00000 -0.00000 0.00000 1.00000 0.00000 -0.00000 -1.00000 -0.00000 0.00000 1.00000 -0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 -0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 -0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.77301 0.63439 0.00000 0.88192 0.47140 -0.00000 0.95694 0.29028 -0.00000 0.99518 0.09802 -0.00000 0.99518 -0.09802 -0.00000 0.95694 -0.29029 -0.00000 0.88192 -0.47140 -0.00000 0.77301 -0.63439 -0.00000 0.63439 -0.77301 -0.00000 0.47140 -0.88192 -0.00000 0.29028 -0.95694 -0.00000 0.09802 -0.99518 -0.00000 -0.09802 -0.99518 -0.00000 -0.29028 -0.95694 -0.00000 -0.47140 -0.88192 -0.00000 -0.63439 -0.77301 0.00000 -0.77301 -0.63439 0.00000 -0.88192 -0.47140 0.00000 -0.95694 -0.29029 -0.00000 -0.99518 -0.09802 -0.00000 -0.99518 0.09802 -0.00000 -0.95694 0.29028 -0.00000 -0.88192 0.47139 -0.00000 -0.77301 0.63439 -0.00000 -0.63440 0.77301 -0.00000 -0.47140 0.88192 -0.00000 -0.29029 0.95694 -0.00000 -0.09802 0.99518 -0.00000 0.09801 0.99519 -0.00000 0.29028 0.95694 -0.00000 0.47139 0.88192 -0.00000 0.63439 0.77301 0.00003</float_array>
+					<technique_common>
+						<accessor count="96" source="#Cylinder_001-Geometry-Normals-array" stride="3">
+							<param type="float" name="X"></param>
+							<param type="float" name="Y"></param>
+							<param type="float" name="Z"></param>
+						</accessor>
+					</technique_common>
+				</source>
+				<source id="Cylinder_001-Geometry-UV">
+					<float_array count="768" id="Cylinder_001-Geometry-UV-arrayfloat_array>
+					<technique_common>
+						<accessor count="384" source="#Cylinder_001-Geometry-UV-array" stride="2">
+							<param type="float" name="S"></param>
+							<param type="float" name="T"></param>
+						</accessor>
+					</technique_common>
+				</source>
+				<vertices id="Cylinder_001-Geometry-Vertex">
+					<input semantic="POSITION" source="#Cylinder_001-Geometry-Position"/>
+				</vertices>
+				<triangles count="128" material="blue_alpha">
+					<input offset="0" semantic="VERTEX" source="#Cylinder_001-Geometry-Vertex"/>
+					<input offset="1" semantic="NORMAL" source="#Cylinder_001-Geometry-Normals"/>
+					<input offset="2" semantic="TEXCOORD" source="#Cylinder_001-Geometry-UV"/>
+					<p>64 0 0 0 0 1 1 0 2 65 1 3 33 1 4 32 1 5 64 2 6 1 2 7 2 2 8 65 3 9 34 3 10 33 3 11 64 4 12 2 4 13 3 4 14 65 5 15 35 5 16 34 5 17 64 6 18 3 6 19 4 6 20 65 7 21 36 7 22 35 7 23 64 8 24 4 8 25 5 8 26 65 9 27 37 9 28 36 9 29 64 10 30 5 10 31 6 10 32 65 11 33 38 11 34 37 11 35 64 12 36 6 12 37 7 12 38 65 13 39 39 13 40 38 13 41 64 14 42 7 14 43 8 14 44 65 15 45 40 15 46 39 15 47 64 16 48 8 16 49 9 16 50 65 17 51 41 17 52 40 17 53 64 18 54 9 18 55 10 18 56 65 19 57 42 19 58 41 19 59 64 20 60 10 20 61 11 20 62 65 21 63 43 21 64 42 21 65 64 22 66 11 22 67 12 22 68 65 23 69 44 23 70 43 23 71 64 24 72 12 24 73 13 24 74 65 25 75 45 25 76 44 25 77 64 26 78 13 26 79 14 26 80 65 27 81 46 27 82 45 27 83 64 28 84 14 28 85 15 28 86 65 29 87 47 29 88 46 29 89 64 30 90 15 30 91 16 30 92 65 31 93 48 31 94 47 31 95 64 32 96 16 32 97 17 32 98 65 33 99 49 33 100 48 33 101 64 34 102 17 34 103 18 34 104 65 35 105 50 35 106 49 35 107 64 36 108 18 36 109 19 36 110 65 37 111 51 37 112 50 37 113 64 38 114 19 38 115 20 38 116 65 39 117 52 39 118 51 39 119 64 40 120 20 40 121 21 40 122 65 41 123 53 41 124 52 41 125 64 42 126 21 42 127 22 42 128 65 43 129 54 43 130 53 43 131 64 44 132 22 44 133 23 44 134 65 45 135 55 45 136 54 45 137 64 46 138 23 46 139 24 46 140 65 47 141 56 47 142 55 47 143 64 48 144 24 48 145 25 48 146 65 49 147 57 49 148 56 49 149 64 50 150 25 50 151 26 50 152 65 51 153 58 51 154 57 51 155 64 52 156 26 52 157 27 52 158 65 53 159 59 53 160 58 53 161 64 54 162 27 54 163 28 54 164 65 55 165 60 55 166 59 55 167 64 56 168 28 56 169 29 56 170 65 57 171 61 57 172 60 57 173 64 58 174 29 58 175 30 58 176 65 59 177 62 59 178 61 59 179 64 60 180 30 60 181 31 60 182 65 61 183 63 61 184 62 61 185 31 62 186 0 62 187 64 62 188 65 63 189 32 63 190 63 63 191 0 64 192 32 64 193 33 64 194 33 64 195 1 64 196 0 64 197 1 65 198 33 65 199 34 65 200 34 65 201 2 65 202 1 65 203 2 66 204 34 66 205 35 66 206 35 66 207 3 66 208 2 66 209 3 67 210 35 67 211 36 67 212 36 67 213 4 67 214 3 67 215 4 68 216 36 68 217 37 68 218 37 68 219 5 68 220 4 68 221 5 69 222 37 69 223 38 69 224 38 69 225 6 69 226 5 69 227 6 70 228 38 70 229 39 70 230 39 70 231 7 70 232 6 70 233 7 71 234 39 71 235 40 71 236 40 71 237 8 71 238 7 71 239 8 72 240 40 72 241 41 72 242 41 72 243 9 72 244 8 72 245 9 73 246 41 73 247 42 73 248 42 73 249 10 73 250 9 73 251 10 74 252 42 74 253 43 74 254 43 74 255 11 74 256 10 74 257 11 75 258 43 75 259 44 75 260 44 75 261 12 75 262 11 75 263 12 76 264 44 76 265 45 76 266 45 76 267 13 76 268 12 76 269 13 77 270 45 77 271 46 77 272 46 77 273 14 77 274 13 77 275 14 78 276 46 78 277 47 78 278 47 78 279 15 78 280 14 78 281 15 79 282 47 79 283 48 79 284 48 79 285 16 79 286 15 79 287 16 80 288 48 80 289 49 80 290 49 80 291 17 80 292 16 80 293 17 81 294 49 81 295 50 81 296 50 81 297 18 81 298 17 81 299 18 82 300 50 82 301 51 82 302 51 82 303 19 82 304 18 82 305 19 83 306 51 83 307 52 83 308 52 83 309 20 83 310 19 83 311 20 84 312 52 84 313 53 84 314 53 84 315 21 84 316 20 84 317 21 85 318 53 85 319 54 85 320 54 85 321 22 85 322 21 85 323 22 86 324 54 86 325 55 86 326 55 86 327 23 86 328 22 86 329 23 87 330 55 87 331 56 87 332 56 87 333 24 87 334 23 87 335 24 88 336 56 88 337 57 88 338 57 88 339 25 88 340 24 88 341 25 89 342 57 89 343 58 89 344 58 89 345 26 89 346 25 89 347 26 90 348 58 90 349 59 90 350 59 90 351 27 90 352 26 90 353 27 91 354 59 91 355 60 91 356 60 91 357 28 91 358 27 91 359 28 92 360 60 92 361 61 92 362 61 92 363 29 92 364 28 92 365 29 93 366 61 93 367 62 93 368 62 93 369 30 93 370 29 93 371 30 94 372 62 94 373 63 94 374 63 94 375 31 94 376 30 94 377 32 95 378 0 95 379 31 95 380 31 95 381 63 95 382 32 95 383</p>
+				</triangles>
+			</mesh>
+		</geometry>
+		<geometry id="flag_001" name="flag_001">
+			<mesh>
+				<source id="flag_001-Position">
+					<float_array count="18" id="flag_001-Position-array">1.00000 0.00000 0.00621 -1.00000 -0.00000 -0.99379 -1.00000 0.00000 1.00621 -1.00000 0.05590 1.00621 -1.00000 0.05590 -0.99379 1.00000 0.05590 0.00621</float_array>
+					<technique_common>
+						<accessor count="6" source="#flag_001-Position-array" stride="3">
+							<param type="float" name="X"></param>
+							<param type="float" name="Y"></param>
+							<param type="float" name="Z"></param>
+						</accessor>
+					</technique_common>
+				</source>
+				<source id="flag_001-Normals">
+					<float_array count="15" id="flag_001-Normals-array">0.00000 -1.00000 0.00000 0.44721 0.00000 -0.89443 -1.00000 0.00000 0.00000 0.44721 0.00000 0.89443 -0.00000 1.00000 -0.00000</float_array>
+					<technique_common>
+						<accessor count="5" source="#flag_001-Normals-array" stride="3">
+							<param type="float" name="X"></param>
+							<param type="float" name="Y"></param>
+							<param type="float" name="Z"></param>
+						</accessor>
+					</technique_common>
+				</source>
+				<vertices id="flag_001-Vertex">
+					<input semantic="POSITION" source="#flag_001-Position"/>
+				</vertices>
+				<triangles count="8" material="red">
+					<input offset="0" semantic="VERTEX" source="#flag_001-Vertex"/>
+					<input offset="1" semantic="NORMAL" source="#flag_001-Normals"/>
+					<p>1 0 0 0 2 0 0 1 1 1 4 1 4 1 5 1 0 1 1 2 2 2 3 2 3 2 4 2 1 2 2 3 0 3 5 3 5 3 3 3 2 3 3 4 5 4 4 4</p>
+				</triangles>
+			</mesh>
+		</geometry>
+		<geometry id="Cylinder-Geometry" name="Cylinder-Geometry">
+			<mesh>
+				<source id="Cylinder-Geometry-Position">
+					<float_array count="198" id="Cylinder-Geometry-Position-array">0.03536 0.03536 -1.00000 0.04157 0.02778 -1.00000 0.04619 0.01913 -1.00000 0.04904 0.00975 -1.00000 0.05000 0.00000 -1.00000 0.04904 -0.00975 -1.00000 0.04619 -0.01913 -1.00000 0.04157 -0.02778 -1.00000 0.03536 -0.03536 -1.00000 0.02778 -0.04157 -1.00000 0.01913 -0.04619 -1.00000 0.00975 -0.04904 -1.00000 -0.00000 -0.05000 -1.00000 -0.00975 -0.04904 -1.00000 -0.01913 -0.04619 -1.00000 -0.02778 -0.04157 -1.00000 -0.03536 -0.03536 -1.00000 -0.04157 -0.02778 -1.00000 -0.04619 -0.01913 -1.00000 -0.04904 -0.00975 -1.00000 -0.05000 0.00000 -1.00000 -0.04904 0.00975 -1.00000 -0.04619 0.01913 -1.00000 -0.04157 0.02778 -1.00000 -0.03536 0.03536 -1.00000 -0.02778 0.04157 -1.00000 -0.01913 0.04619 -1.00000 -0.00975 0.04904 -1.00000 0.00000 0.05000 -1.00000 0.00975 0.04904 -1.00000 0.01913 0.04619 -1.00000 0.02778 0.04157 -1.00000 0.03536 0.03536 1.00000 0.04157 0.02778 1.00000 0.04619 0.01913 1.00000 0.04904 0.00975 1.00000 0.05000 -0.00000 1.00000 0.04904 -0.00975 1.00000 0.04619 -0.01913 1.00000 0.04157 -0.02778 1.00000 0.03536 -0.03536 1.00000 0.02778 -0.04157 1.00000 0.01913 -0.04619 1.00000 0.00975 -0.04904 1.00000 0.00000 -0.05000 1.00000 -0.00975 -0.04904 1.00000 -0.01913 -0.04619 1.00000 -0.02778 -0.04157 1.00000 -0.03536 -0.03536 1.00000 -0.04157 -0.02778 1.00000 -0.04619 -0.01913 1.00000 -0.04904 -0.00975 1.00000 -0.05000 -0.00000 1.00000 -0.04904 0.00975 1.00000 -0.04619 0.01913 1.00000 -0.04157 0.02778 1.00000 -0.03536 0.03536 1.00000 -0.02778 0.04157 1.00000 -0.01913 0.04619 1.00000 -0.00975 0.04904 1.00000 -0.00000 0.05000 1.00000 0.00975 0.04904 1.00000 0.01913 0.04619 1.00000 0.02778 0.04157 1.00000 0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000</float_array>
+					<technique_common>
+						<accessor count="66" source="#Cylinder-Geometry-Position-array" stride="3">
+							<param type="float" name="X"></param>
+							<param type="float" name="Y"></param>
+							<param type="float" name="Z"></param>
+						</accessor>
+					</technique_common>
+				</source>
+				<source id="Cylinder-Geometry-Normals">
+					<float_array count="288" id="Cylinder-Geometry-Normals-array">-0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 -0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 -0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 -0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 -0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 -0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 -0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 -0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 -0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 -0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 -0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 -0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 -0.00000 1.00000 0.00000 -0.00000 -1.00000 -0.00000 0.00000 1.00000 0.00000 -0.00000 -1.00000 -0.00000 0.00000 1.00000 0.00000 -0.00000 -1.00000 -0.00000 0.00000 1.00000 0.00000 -0.00000 -1.00000 -0.00000 0.00000 1.00000 0.00000 -0.00000 -1.00000 -0.00000 0.00000 1.00000 0.00000 -0.00000 -1.00000 -0.00000 0.00000 1.00000 0.00000 -0.00000 -1.00000 -0.00000 0.00000 1.00000 0.00000 -0.00000 -1.00000 -0.00000 0.00000 1.00000 -0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 -0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 -0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 -1.00000 0.00000 0.00000 1.00000 0.77301 0.63439 0.00000 0.88192 0.47140 0.00000 0.95694 0.29028 -0.00000 0.99518 0.09802 -0.00000 0.99518 -0.09802 -0.00000 0.95694 -0.29029 -0.00000 0.88192 -0.47140 -0.00000 0.77301 -0.63439 -0.00000 0.63439 -0.77301 0.00000 0.47140 -0.88192 -0.00000 0.29028 -0.95694 -0.00000 0.09802 -0.99518 -0.00000 -0.09802 -0.99518 -0.00000 -0.29028 -0.95694 -0.00000 -0.47140 -0.88192 -0.00000 -0.63439 -0.77301 -0.00000 -0.77301 -0.63439 -0.00000 -0.88192 -0.47140 0.00000 -0.95694 -0.29029 0.00000 -0.99518 -0.09802 -0.00000 -0.99518 0.09802 -0.00000 -0.95694 0.29028 -0.00000 -0.88192 0.47140 -0.00000 -0.77301 0.63439 -0.00000 -0.63440 0.77301 -0.00000 -0.47140 0.88192 0.00000 -0.29029 0.95694 -0.00000 -0.09802 0.99518 -0.00000 0.09801 0.99519 -0.00000 0.29028 0.95694 -0.00000 0.47139 0.88192 -0.00000 0.63439 0.77301 0.00000</float_array>
+					<technique_common>
+						<accessor count="96" source="#Cylinder-Geometry-Normals-array" stride="3">
+							<param type="float" name="X"></param>
+							<param type="float" name="Y"></param>
+							<param type="float" name="Z"></param>
+						</accessor>
+					</technique_common>
+				</source>
+				<source id="Cylinder-Geometry-UV">
+					<float_array count="768" id="Cylinder-Geometry-UV-array">0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 1.00000 1.00000 1.00000 1.00000 0.00000 1.00000 0.00000 0.00000</float_array>
+					<technique_common>
+						<accessor count="384" source="#Cylinder-Geometry-UV-array" stride="2">
+							<param type="float" name="S"></param>
+							<param type="float" name="T"></param>
+						</accessor>
+					</technique_common>
+				</source>
+				<vertices id="Cylinder-Geometry-Vertex">
+					<input semantic="POSITION" source="#Cylinder-Geometry-Position"/>
+				</vertices>
+				<triangles count="128" material="white">
+					<input offset="0" semantic="VERTEX" source="#Cylinder-Geometry-Vertex"/>
+					<input offset="1" semantic="NORMAL" source="#Cylinder-Geometry-Normals"/>
+					<input offset="2" semantic="TEXCOORD" source="#Cylinder-Geometry-UV"/>
+					<p>64 0 0 0 0 1 1 0 2 65 1 3 33 1 4 32 1 5 64 2 6 1 2 7 2 2 8 65 3 9 34 3 10 33 3 11 64 4 12 2 4 13 3 4 14 65 5 15 35 5 16 34 5 17 64 6 18 3 6 19 4 6 20 65 7 21 36 7 22 35 7 23 64 8 24 4 8 25 5 8 26 65 9 27 37 9 28 36 9 29 64 10 30 5 10 31 6 10 32 65 11 33 38 11 34 37 11 35 64 12 36 6 12 37 7 12 38 65 13 39 39 13 40 38 13 41 64 14 42 7 14 43 8 14 44 65 15 45 40 15 46 39 15 47 64 16 48 8 16 49 9 16 50 65 17 51 41 17 52 40 17 53 64 18 54 9 18 55 10 18 56 65 19 57 42 19 58 41 19 59 64 20 60 10 20 61 11 20 62 65 21 63 43 21 64 42 21 65 64 22 66 11 22 67 12 22 68 65 23 69 44 23 70 43 23 71 64 24 72 12 24 73 13 24 74 65 25 75 45 25 76 44 25 77 64 26 78 13 26 79 14 26 80 65 27 81 46 27 82 45 27 83 64 28 84 14 28 85 15 28 86 65 29 87 47 29 88 46 29 89 64 30 90 15 30 91 16 30 92 65 31 93 48 31 94 47 31 95 64 32 96 16 32 97 17 32 98 65 33 99 49 33 100 48 33 101 64 34 102 17 34 103 18 34 104 65 35 105 50 35 106 49 35 107 64 36 108 18 36 109 19 36 110 65 37 111 51 37 112 50 37 113 64 38 114 19 38 115 20 38 116 65 39 117 52 39 118 51 39 119 64 40 120 20 40 121 21 40 122 65 41 123 53 41 124 52 41 125 64 42 126 21 42 127 22 42 128 65 43 129 54 43 130 53 43 131 64 44 132 22 44 133 23 44 134 65 45 135 55 45 136 54 45 137 64 46 138 23 46 139 24 46 140 65 47 141 56 47 142 55 47 143 64 48 144 24 48 145 25 48 146 65 49 147 57 49 148 56 49 149 64 50 150 25 50 151 26 50 152 65 51 153 58 51 154 57 51 155 64 52 156 26 52 157 27 52 158 65 53 159 59 53 160 58 53 161 64 54 162 27 54 163 28 54 164 65 55 165 60 55 166 59 55 167 64 56 168 28 56 169 29 56 170 65 57 171 61 57 172 60 57 173 64 58 174 29 58 175 30 58 176 65 59 177 62 59 178 61 59 179 64 60 180 30 60 181 31 60 182 65 61 183 63 61 184 62 61 185 31 62 186 0 62 187 64 62 188 65 63 189 32 63 190 63 63 191 0 64 192 32 64 193 33 64 194 33 64 195 1 64 196 0 64 197 1 65 198 33 65 199 34 65 200 34 65 201 2 65 202 1 65 203 2 66 204 34 66 205 35 66 206 35 66 207 3 66 208 2 66 209 3 67 210 35 67 211 36 67 212 36 67 213 4 67 214 3 67 215 4 68 216 36 68 217 37 68 218 37 68 219 5 68 220 4 68 221 5 69 222 37 69 223 38 69 224 38 69 225 6 69 226 5 69 227 6 70 228 38 70 229 39 70 230 39 70 231 7 70 232 6 70 233 7 71 234 39 71 235 40 71 236 40 71 237 8 71 238 7 71 239 8 72 240 40 72 241 41 72 242 41 72 243 9 72 244 8 72 245 9 73 246 41 73 247 42 73 248 42 73 249 10 73 250 9 73 251 10 74 252 42 74 253 43 74 254 43 74 255 11 74 256 10 74 257 11 75 258 43 75 259 44 75 260 44 75 261 12 75 262 11 75 263 12 76 264 44 76 265 45 76 266 45 76 267 13 76 268 12 76 269 13 77 270 45 77 271 46 77 272 46 77 273 14 77 274 13 77 275 14 78 276 46 78 277 47 78 278 47 78 279 15 78 280 14 78 281 15 79 282 47 79 283 48 79 284 48 79 285 16 79 286 15 79 287 16 80 288 48 80 289 49 80 290 49 80 291 17 80 292 16 80 293 17 81 294 49 81 295 50 81 296 50 81 297 18 81 298 17 81 299 18 82 300 50 82 301 51 82 302 51 82 303 19 82 304 18 82 305 19 83 306 51 83 307 52 83 308 52 83 309 20 83 310 19 83 311 20 84 312 52 84 313 53 84 314 53 84 315 21 84 316 20 84 317 21 85 318 53 85 319 54 85 320 54 85 321 22 85 322 21 85 323 22 86 324 54 86 325 55 86 326 55 86 327 23 86 328 22 86 329 23 87 330 55 87 331 56 87 332 56 87 333 24 87 334 23 87 335 24 88 336 56 88 337 57 88 338 57 88 339 25 88 340 24 88 341 25 89 342 57 89 343 58 89 344 58 89 345 26 89 346 25 89 347 26 90 348 58 90 349 59 90 350 59 90 351 27 90 352 26 90 353 27 91 354 59 91 355 60 91 356 60 91 357 28 91 358 27 91 359 28 92 360 60 92 361 61 92 362 61 92 363 29 92 364 28 92 365 29 93 366 61 93 367 62 93 368 62 93 369 30 93 370 29 93 371 30 94 372 62 94 373 63 94 374 63 94 375 31 94 376 30 94 377 32 95 378 0 95 379 31 95 380 31 95 381 63 95 382 32 95 383</p>
+				</triangles>
+			</mesh>
+		</geometry>
+	</library_geometries>
+	<library_visual_scenes>
+		<visual_scene id="Scene" name="Scene">
+			<node layer="L1" id="Lamp" name="Lamp">
+				<translate sid="translate">-0.29478 -1.99835 2.70248</translate>
+				<rotate sid="rotateZ">0 0 1 0.00000</rotate>
+				<rotate sid="rotateY">0 1 0 -0.00000</rotate>
+				<rotate sid="rotateX">1 0 0 0.00000</rotate>
+				<scale sid="scale">1.00000 1.00000 1.00000</scale>
+				<instance_light url="#Lamp_001"/>
+			</node>
+			<node layer="L1" id="Cylinder_001" name="Cylinder_001">
+				<translate sid="translate">0.00334 -0.00071 0.00118</translate>
+				<rotate sid="rotateZ">0 0 1 0.00000</rotate>
+				<rotate sid="rotateY">0 1 0 -0.00000</rotate>
+				<rotate sid="rotateX">1 0 0 0.00000</rotate>
+				<scale sid="scale">1.00000 1.00000 1.00000</scale>
+				<instance_geometry url="#Cylinder_001-Geometry">
+					<bind_material>
+						<technique_common>
+							<instance_material symbol="blue_alpha" target="#blue_alpha">
+								<bind_vertex_input input_semantic="TEXCOORD" input_set="1" semantic="CHANNEL1"/>
+							</instance_material>
+						</technique_common>
+					</bind_material>
+				</instance_geometry>
+			</node>
+			<node layer="L1" id="flag" name="flag">
+				<translate sid="translate">0.22856 0.00372 1.80362</translate>
+				<rotate sid="rotateZ">0 0 1 0.00000</rotate>
+				<rotate sid="rotateY">0 1 0 -0.00000</rotate>
+				<rotate sid="rotateX">1 0 0 0.00000</rotate>
+				<scale sid="scale">0.18803 0.18803 0.18803</scale>
+				<instance_geometry url="#flag_001">
+					<bind_material>
+						<technique_common>
+							<instance_material symbol="red" target="#red">
+								<bind_vertex_input input_semantic="TEXCOORD" input_set="1" semantic="CHANNEL1"/>
+							</instance_material>
+						</technique_common>
+					</bind_material>
+				</instance_geometry>
+			</node>
+			<node layer="L1" id="Cylinder" name="Cylinder">
+				<translate sid="translate">0.00580 0.01041 0.99794</translate>
+				<rotate sid="rotateZ">0 0 1 0.00000</rotate>
+				<rotate sid="rotateY">0 1 0 -0.00000</rotate>
+				<rotate sid="rotateX">1 0 0 0.00000</rotate>
+				<scale sid="scale">1.00000 1.00000 1.00000</scale>
+				<instance_geometry url="#Cylinder-Geometry">
+					<bind_material>
+						<technique_common>
+							<instance_material symbol="white" target="#white">
+								<bind_vertex_input input_semantic="TEXCOORD" input_set="1" semantic="CHANNEL1"/>
+							</instance_material>
+						</technique_common>
+					</bind_material>
+				</instance_geometry>
+			</node>
+		</visual_scene>
+	</library_visual_scenes>
+	<scene>
+		<instance_visual_scene url="#Scene"/>
+	</scene>
+</COLLADA>
\ No newline at end of file
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/package.xml
@@ -0,0 +1,27 @@
+<package>
+  <name>rviz_plugin_tutorials</name>
+  <version>0.11.0</version>
+  <description>
+     Tutorials showing how to write plugins for RViz.
+  </description>
+  <maintainer email="william@osrfoundation.org">William Woodall</maintainer>
+  <license>BSD</license>
+
+  <url>http://ros.org/wiki/rviz_plugin_tutorials</url>
+  <author>Dave Hershberger</author>
+
+  <buildtool_depend>catkin</buildtool_depend>
+
+  <build_depend>qtbase5-dev</build_depend>
+  <build_depend>rviz</build_depend>
+
+  <run_depend>libqt5-core</run_depend>
+  <run_depend>libqt5-gui</run_depend>
+  <run_depend>libqt5-widgets</run_depend>
+  <run_depend>rviz</run_depend>
+
+  <export>
+      <rosdoc config="${prefix}/rosdoc.yaml"/>
+      <rviz plugin="${prefix}/plugin_description.xml"/>
+  </export>
+</package>
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/plugin_description.xml
@@ -0,0 +1,24 @@
+<library path="lib/librviz_plugin_tutorials">
+  <class name="rviz_plugin_tutorials/Teleop"
+         type="rviz_plugin_tutorials::TeleopPanel"
+         base_class_type="rviz::Panel">
+    <description>
+      A panel widget allowing simple diff-drive style robot base control.
+    </description>
+  </class>
+  <class name="rviz_plugin_tutorials/Imu"
+         type="rviz_plugin_tutorials::ImuDisplay"
+         base_class_type="rviz::Display">
+    <description>
+      Displays direction and scale of accelerations from sensor_msgs/Imu messages.
+    </description>
+    <message_type>sensor_msgs/Imu</message_type>
+  </class>
+  <class name="rviz_plugin_tutorials/PlantFlag"
+         type="rviz_plugin_tutorials::PlantFlagTool"
+         base_class_type="rviz::Tool">
+    <description>
+      Tool for planting flags on the ground plane in rviz.
+    </description>
+  </class>
+</library>
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/rosdoc.yaml
@@ -0,0 +1,2 @@
+- builder: sphinx
+  sphinx_root_dir: src/doc
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/scripts/send_test_msgs.py
@@ -0,0 +1,39 @@
+#!/usr/bin/env python
+
+import roslib; roslib.load_manifest( 'rviz_plugin_tutorials' )
+from sensor_msgs.msg import Imu
+import rospy
+from math import cos, sin
+import tf
+
+topic = 'test_imu'
+publisher = rospy.Publisher( topic, Imu, queue_size=5 )
+
+rospy.init_node( 'test_imu' )
+
+br = tf.TransformBroadcaster()
+rate = rospy.Rate(10)
+radius = 5
+angle = 0
+
+dist = 3
+while not rospy.is_shutdown():
+
+    imu = Imu()
+    imu.header.frame_id = "/base_link"
+    imu.header.stamp = rospy.Time.now()
+   
+    imu.linear_acceleration.x = sin( 10 * angle )
+    imu.linear_acceleration.y = sin( 20 * angle )
+    imu.linear_acceleration.z = sin( 40 * angle )
+
+    publisher.publish( imu )
+
+    br.sendTransform((radius * cos(angle), radius * sin(angle), 0),
+                     tf.transformations.quaternion_from_euler(0, 0, angle),
+                     rospy.Time.now(),
+                     "base_link",
+                     "map")
+    angle += .01
+    rate.sleep()
+
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/doc/building_and_exporting.rst
@@ -0,0 +1,96 @@
+Building the Plugin
+-------------------
+
+.. tutorial-formatter:: ../../CMakeLists.txt
+
+To build the plugin, just do the normal "rosmake" thing::
+
+    rosmake rviz_plugin_tutorials
+
+Exporting the Plugin
+--------------------
+
+For the plugin to be found and understood by other ROS packages (in
+this case, rviz), it needs a "plugin_description.xml" file.  This file
+can be named anything you like, as it is specified in the plugin
+package's "package.xml" file like so:
+
+.. code-block:: xml
+
+  <export>
+      <rviz plugin="${prefix}/plugin_description.xml"/>
+  </export>
+
+The contents of plugin_description.xml then look like this:
+
+.. code-block:: xml
+
+  <library path="lib/librviz_plugin_tutorials">
+    <class name="rviz_plugin_tutorials/Teleop"
+           type="rviz_plugin_tutorials::TeleopPanel"
+           base_class_type="rviz::Panel">
+      <description>
+        A panel widget allowing simple diff-drive style robot base control.
+      </description>
+    </class>
+    <class name="rviz_plugin_tutorials/Imu"
+           type="rviz_plugin_tutorials::ImuDisplay"
+           base_class_type="rviz::Display">
+      <description>
+        Displays direction and scale of accelerations from sensor_msgs/Imu messages.
+      </description>
+      <message_type>sensor_msgs/Imu</message_type>
+    </class>
+    <class name="rviz_plugin_tutorials/PlantFlag"
+           type="rviz_plugin_tutorials::PlantFlagTool"
+           base_class_type="rviz::Tool">
+      <description>
+        Tool for planting flags on the ground plane in rviz.
+      </description>
+    </class>
+  </library>
+
+The first line says that the compiled library lives in
+lib/librviz_plugin_tutorials (the ".so" ending is appended by
+pluginlib according to the OS).  This path is relative to the top
+directory of the package:
+
+.. code-block:: xml
+
+  <library path="lib/librviz_plugin_tutorials">
+
+The next section is a ``class`` entry describing the TeleopPanel:
+
+.. code-block:: xml
+
+    <class name="rviz_plugin_tutorials/Teleop"
+           type="rviz_plugin_tutorials::TeleopPanel"
+           base_class_type="rviz::Panel">
+      <description>
+        A panel widget allowing simple diff-drive style robot base control.
+      </description>
+    </class>
+
+This specifies the name, type, base class, and description of the
+class.  The *name* field must be a combination of the first two
+strings given to the ``PLUGINLIB_DECLARE_CLASS()`` macro in the source
+file.  It must be the "package" name, a "/" slash, then the "display
+name" for the class.  The "display name" is the name used for the
+class in the user interface.
+
+The *type* entry must be the fully-qualified class name, including any
+namespace(s) it is inside.
+
+The *base_class_type* is usually one of ``rviz::Panel``,
+``rviz::Display``, ``rviz::Tool``, or ``rviz::ViewController``.
+
+The *description* subsection is a simple text description of the
+class, which is shown in the class-chooser dialog and in the Displays
+panel help area.  This section can contain HTML, including hyperlinks,
+but the markup must be escaped to avoid being interpreted as XML
+markup.  For example a link tag might look like: ``&lt;a
+href="my-web-page.html"&gt;``.
+
+Display plugins can have multiple *message_type* tags, which are used
+by RViz when you add a Display by selecting it's topic first.
+
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/doc/conf.py
@@ -0,0 +1,25 @@
+import sys, os
+
+sys.path += [ os.path.abspath( '.' )]
+
+extensions = [ 'sphinx.ext.extlinks',
+               'tutorialformatter' ]
+
+# The master toctree document.
+master_doc = 'index'
+
+# The suffix of source filenames.
+source_suffix = '.rst'
+
+project = u'rviz_plugin_tutorials'
+
+copyright = u'2012,  Willow Garage, Inc'
+
+# If true, sectionauthor and moduleauthor directives will be shown in the
+# output. They are ignored by default.
+show_authors = True
+
+# The name of the Pygments (syntax highlighting) style to use.
+pygments_style = 'sphinx'
+
+extlinks = {'srcdir': ('https://github.com/ros-visualization/visualization_tutorials/tree/groovy-devel/rviz_plugin_tutorials/%s', '')}
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/doc/display_plugin_tutorial.rst
@@ -0,0 +1,141 @@
+ImuDisplay
+==========
+
+Overview
+--------
+
+This tutorial shows how to write a simple Display plugin for RViz.
+
+RViz does not currently have a way to display sensor_msgs/Imu messages
+directly. The code in this tutorial implements a subclass of
+rviz::Display to do so.
+
+The source code for this tutorial is in the rviz_plugin_tutorials
+package. You can check out the source directly or (if you use Ubuntu)
+you can just apt-get install the pre-compiled Debian package like so::
+
+    sudo apt-get install ros-hydro-visualization-tutorials
+
+Here is what the new ImuDisplay output looks like, showing a sequence of
+sensor_msgs/Imu messages from the test script:
+
+.. image:: imu_arrows.png
+
+The Plugin Code
+---------------
+
+The code for ImuDisplay is in these files: 
+:srcdir:`src/imu_display.h`,
+:srcdir:`src/imu_display.cpp`,
+:srcdir:`src/imu_visual.h`, and
+:srcdir:`src/imu_visual.cpp`.
+
+imu_display.h
+^^^^^^^^^^^^^
+
+The full text of imu_display.h is here: :srcdir:`src/imu_display.h`
+
+.. tutorial-formatter:: ../imu_display.h
+
+imu_display.cpp
+^^^^^^^^^^^^^^^
+
+The full text of imu_display.cpp is here: :srcdir:`src/imu_display.cpp`
+
+.. tutorial-formatter:: ../imu_display.cpp
+
+imu_visual.h
+^^^^^^^^^^^^
+
+The full text of imu_visual.h is here: :srcdir:`src/imu_visual.h`
+
+.. tutorial-formatter:: ../imu_visual.h
+
+imu_visual.cpp
+^^^^^^^^^^^^^^
+
+The full text of imu_visual.cpp is here: :srcdir:`src/imu_visual.cpp`
+
+.. tutorial-formatter:: ../imu_visual.cpp
+
+.. include:: building_and_exporting.rst
+
+Trying It Out
+-------------
+
+Once your RViz plugin is compiled and exported, simply run rviz normally::
+
+    rosrun rviz rviz
+
+and rviz will use pluginlib to find all the plugins exported to it.
+
+Add an ImuDisplay by clicking the "Add" button at the bottom of the
+"Displays" panel (or by typing Control-N), then scrolling down through
+the available displays until you see "Imu" under your plugin package
+name (here it is "rviz_plugin_tutorials").
+
+.. image:: imu_plugin.png
+
+If "Imu" is not in your list of Display Types, look through RViz's
+console output for error messages relating to plugin loading.  Some common
+problems are:
+
+- not having a plugin_description.xml file,
+- not exporting it in the package.xml file, or
+- not properly referencing the library file (like
+  librviz_plugin_tutorials.so) from plugin_description.xml.
+
+Once you've added the Imu display to RViz, you just need to set the
+topic name of the display to a source of sensor_msgs/Imu messages.
+
+If you don't happen to have an IMU or other source of sensor_msgs/Imu
+messages, you can test the plugin with a Python script like this:
+:srcdir:`scripts/send_test_msgs.py`.
+
+The script publishes on the "/test_imu" topic, so enter that.
+
+The script publishes both Imu messages and a moving TF frame
+("/base_link" relative to "/map"), so make sure your "Fixed Frame" is
+set to "/map".
+
+Finally, adjust the "History Length" parameter of the Imu display to
+10 and you should see something like the picture at the top of this
+page.
+
+Note: If you use this to visualize messages from an *actual* IMU, the
+arrows are going to be huge compared to most robots:
+
+.. image:: real_imu.png
+
+(Note the PR2 robot at the base of the purple arrow.) This is because
+the Imu acceleration units are meters per second squared, and gravity
+is 9.8 m/s^2, and we haven't applied any scaling or gravity
+compensation to the acceleration vectors.
+
+Next Steps
+----------
+
+This ImuDisplay is not yet a terribly useful Display class.  Extensions to make it more useful might be:
+
+- Add a gravity-compensation option to the acceleration vector.
+- Visualize more of the data in the Imu messages.
+
+To add a gravity compensation option, you might take steps like these:
+
+- Add a new ``rviz::BoolProperty`` to ImuDisplay to store whether the option is on or off.
+- Compute the direction of gravity relative to the Imu frame
+  orientation (as set in ImuVisual::setFrameOrientation()) and
+  subtract it from the acceleration vector each time in
+  ImuVisual::setMessage().
+
+Since ImuVisual takes complete Imu messages as input, adding
+visualizations of more of the Imu data only needs modifications to
+ImuVisual.  Imu data displays might look like:
+
+- orientation: An rviz::Axes object at the Imu reference frame, turned to show the orientation.
+- angular_velocity: Maybe a line to show the axis of rotation and a 3D arrow curving around it to show the speed of rotation?
+- orientation_covariance: Maybe this is an ellipse at the end of each of the X, Y, and Z axes showing the orientation?
+- linear_acceleration_covariance: Maybe this is an ellipsoid at the end of the acceleration arrow?
+
+As all this might be visually cluttered, it may make sense to include
+boolean options to enable or disable some of them.
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/doc/index.rst
@@ -0,0 +1,15 @@
+RViz Plugin Tutorials
+=====================
+
+The rviz_plugin_tutorials package builds a plugin library for rviz
+containing two main classes: ImuDisplay and TeleopPanel.
+
+- :doc:`display_plugin_tutorial` is an example of an rviz::Display
+  subclass allowing rviz to show data from sensor_msgs::Imu messages.
+
+- :doc:`panel_plugin_tutorial` is an example of an rviz::Panel
+  subclass which shows a simple control input for sending velocities
+  to a mobile base.
+
+- :doc:`tool_plugin_tutorial` is an example of an rviz::Tool
+  subclass which lets you plant flag markers on the Z=0 plane.
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/doc/panel_plugin_tutorial.rst
@@ -0,0 +1,116 @@
+TeleopPanel
+===========
+
+Overview
+--------
+
+This tutorial shows how to write a simple Panel plugin for RViz.
+
+A *panel* in RViz is a GUI widget which can be docked in the main
+window or floating.  It does not show properties in the "Displays"
+panel like a *Display*, but it could show things in the 3D scene.
+
+A panel can be a useful place to put a bunch of application-specific
+GUI elements.  You could put start and stop buttons for your robot, or
+other command or control inputs.
+
+RViz has a built-in tool to send a goal pose to a path planner, but it
+does not have a native way to send velocity commands directly to a
+robot base controller.  That is what this tutorial shows, a subclass
+of rviz::Panel which lets you send velocity commands right to your
+robot.
+
+The source code for this tutorial is in the rviz_plugin_tutorials
+package. You can check out the source directly or (if you use Ubuntu)
+you can just apt-get install the pre-compiled Debian package like so::
+
+    sudo apt-get install ros-hydro-visualization-tutorials
+
+Here is what RViz looks like with the new "Teleop" panel showing on
+the left:
+
+.. image:: teleop_in_rviz.png
+
+The Plugin Code
+---------------
+
+The code for TeleopPanel is in these files: 
+:srcdir:`src/teleop_panel.h`,
+:srcdir:`src/teleop_panel.cpp`,
+:srcdir:`src/drive_widget.h`, and
+:srcdir:`src/drive_widget.cpp`.
+
+teleop_panel.h
+^^^^^^^^^^^^^^
+
+The full text of teleop_panel.h is here: :srcdir:`src/teleop_panel.h`
+
+.. tutorial-formatter:: ../teleop_panel.h
+
+teleop_panel.cpp
+^^^^^^^^^^^^^^^^
+
+The full text of teleop_panel.cpp is here: :srcdir:`src/teleop_panel.cpp`
+
+.. tutorial-formatter:: ../teleop_panel.cpp
+
+drive_widget.h
+^^^^^^^^^^^^^^
+
+The full text of drive_widget.h is here: :srcdir:`src/drive_widget.h`
+
+.. tutorial-formatter:: ../drive_widget.h
+
+drive_widget.cpp
+^^^^^^^^^^^^^^^^
+
+The full text of drive_widget.cpp is here: :srcdir:`src/drive_widget.cpp`
+
+.. tutorial-formatter:: ../drive_widget.cpp
+
+.. include:: building_and_exporting.rst
+
+Trying It Out
+-------------
+
+Once your RViz plugin is compiled and exported, simply run rviz normally::
+
+    rosrun rviz rviz
+
+and rviz will use pluginlib to find all the plugins exported to it.
+
+Add a Teleop panel by opening the "Panels" menu and then "Add New
+Panel" within that.  This should bring up a Panel class chooser dialog
+with "Teleop" in it (here it is "rviz_plugin_tutorials"):
+
+.. image:: teleop_plugin.png
+
+If "Teleop" is not in your list of Panel types, look through RViz's
+console output for error messages relating to plugin loading.  Some common
+problems are:
+
+- not having a plugin_description.xml file,
+- not exporting it in the manifest.xml file, or
+- not properly referencing the library file (like
+  librviz_plugin_tutorials.so) from plugin_description.xml.
+
+Once you've added the Teleop panel to RViz, you just need to enter a
+topic name to publish the geometry_msgs/Twist command velocities on.
+Once a non-empty string has been entered in the "Output Topic" field,
+the control square area should light up and accept mouse events.
+Holding the mouse button down in the control area sends a linear
+velocity based on the Y position of the mouse relative to the center
+and an angular velocity based on the X position of the mouse relative
+to the center.
+
+Next Steps
+----------
+
+This Teleop panel might be useful as it is, since it already sends out
+command velocities appropriate for a diff-drive robot.  However, there
+are a few things which might make it more useful:
+
+- Adjustable scaling of the linear and angular velocities.
+- Enforced maxima for the velocities.
+- An adjustable robot width parameter, so that the curved arrows accurately show the arc a robot would traverse.
+- A "strafe" mode (maybe when holding down the Shift key) for robots like the PR2 with (more) holonomic drive ability.
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/doc/tool_plugin_tutorial.rst
@@ -0,0 +1,88 @@
+PlantFlagTool
+=============
+
+Overview
+--------
+
+This tutorial shows how to write a new tool for RViz.
+
+In RViz, a tool is a class that determines how mouse events interact
+with the visualizer.  In this example we describe PlantFlagTool which
+lets you place "flag" markers in the 3D scene.
+
+The source code for this tutorial is in the rviz_plugin_tutorials
+package. You can check out the source directly or (if you use Ubuntu)
+you can just apt-get install the pre-compiled Debian package like so::
+
+    sudo apt-get install ros-hydro-visualization-tutorials
+
+Here is an example of what the new PlantFlagTool can do:
+
+.. image:: flags.png
+
+The Plugin Code
+---------------
+
+The code for PlantFlagTool is in these files: 
+:srcdir:`src/plant_flag_tool.h`, and
+:srcdir:`src/plant_flag_tool.cpp`.
+
+plant_flag_tool.h
+^^^^^^^^^^^^^^^^^
+
+The full text of plant_flag_tool.h is here: :srcdir:`src/plant_flag_tool.h`
+
+.. tutorial-formatter:: ../plant_flag_tool.h
+
+plant_flag_tool.cpp
+^^^^^^^^^^^^^^^^^^^
+
+The full text of plant_flag_tool.cpp is here: :srcdir:`src/plant_flag_tool.cpp`
+
+.. tutorial-formatter:: ../plant_flag_tool.cpp
+
+.. include:: building_and_exporting.rst
+
+Trying It Out
+-------------
+
+Once your RViz plugin is compiled and exported, simply run rviz normally::
+
+    rosrun rviz rviz
+
+and rviz will use pluginlib to find all the plugins exported to it.
+
+Add a PlantFlag tool by clicking on the "+" button in the toolbar and
+selecting "PlantFlag" from the list under your plugin package name
+(here it is "rviz_plugin_tutorials").
+
+Once "PlantFlag" is in your toolbar, click it or press "l" (the
+shortcut key) to start planting flags.  Open the "Tool Properties"
+panel to see the positions of the flags you have planted.
+
+Currently the only way to remove the flags is to delete the PlantFlag
+tool, which you do by pressing the "-" (minus sign) button in the
+toolbar and selecting "PlantFlag".
+
+Next Steps
+----------
+
+PlantFlag as shown here is not terribly useful yet.  Some extensions to make it more useful might be:
+
+- Add the ability to delete, re-position, and re-name existing flags.
+- Publish ROS messages with the names and locations of the flags.
+
+To modify existing flags, you might:
+
+- Change processMouseEvent() to notice when the mouse is pointing near an existing flag.
+- When it is:
+
+  - make the flag highlight.
+  - If the right button is pressed, show a context menu with delete and rename options.
+  - If the left button is pressed, begin dragging the existing flag around.
+
+Conclusion
+----------
+
+There are many possibilities for new types of interaction with RViz.
+We look forward to seeing what you make.
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/doc/tutorialformatter.py
@@ -0,0 +1,132 @@
+"""
+    tutorialformatter
+    ===========================
+
+    This extension provides a directive to include a source code file
+    in a document, but with certain comments from the file formatted
+    as regular document text.  This allows code for a tutorial to look like:
+
+        /// BEGIN_TUTORIAL
+        /// This next line adds one.
+        i = i + 1;
+        /// Then we need to double it.
+        i = i * 2;
+        /// END_TUTORIAL
+
+    And have it formatted as
+
+    This next line adds one.::
+        i = i + 1;
+
+    Then we need to double it.::
+        i = i * 2;
+
+    The special-looking comment character sequence at the start of
+    each text line can be anything not starting or ending with
+    whitespace.  tutorialformatter starts by scanning the file for the
+    string BEGIN_TUTORIAL.  When it finds it, it takes all the
+    characters before BEGIN_TUTORIAL on that line, strips whitespace
+    from the left, and uses that as the text marker.  So this would
+    also be fine:
+
+        #My Tutorial# BEGIN_TUTORIAL
+        #My Tutorial# This next line adds one.
+        i = i + 1
+        #My Tutorial# Then we need to double it.
+        i = i * 2
+        #My Tutorial# END_TUTORIAL
+
+    .. moduleauthor::  Dave Hershberger <hersh@willowgarage.com>
+"""
+
+__version__ = '0.1.0'
+
+import os
+from docutils.parsers import rst
+from docutils.parsers.rst.directives import flag, unchanged
+from docutils.statemachine import string2lines
+from pygments.lexers import get_lexer_for_filename
+
+class TutorialFormatterDirective(rst.Directive):
+    has_content = False
+    final_argument_whitespace = True
+    required_arguments = 1
+
+    option_spec = dict(shell=flag, prompt=flag, nostderr=flag,
+                       in_srcdir=flag, extraargs=unchanged,
+                       until=unchanged)
+
+    def run(self):
+        filename = self.arguments[0]
+        text_tag = None
+        tag_len = 0
+
+        filepath = self.state.document.settings.env.srcdir
+        absfilename = os.path.join( filepath, filename )
+        if absfilename.endswith('.h'):
+            language = 'c++'
+        elif absfilename.endswith('CMakeLists.txt'):
+            language = 'cmake'
+        else:
+            try:
+                language = get_lexer_for_filename( absfilename ).name.lower()
+                if language == 'text only':
+                    language = 'none'
+            except:
+                language = 'none'
+        code_prefix = '\n.. code-block:: ' + language + '\n\n'
+        code_suffix = '\n'
+
+        print "tutorial-formatter running on", absfilename
+        file_ = open( absfilename, 'r' )
+        text_to_process = ""
+        current_block = ""
+        in_code = False
+        in_text = False
+        in_tutorial = False
+        for line in file_:
+            if not in_tutorial:
+                begin_pos = line.find( 'BEGIN_TUTORIAL' )
+                if begin_pos != -1:
+                    text_tag = line[:begin_pos].lstrip()
+                    tag_len = len( text_tag )
+                    in_tutorial = True
+                continue
+            if line.find( 'END_TUTORIAL' ) != -1:
+                break
+            stripped = line.lstrip()
+            if stripped.startswith( text_tag.strip() ):
+                if in_code:
+                    text_to_process += code_prefix + current_block + code_suffix
+                    current_block = ""
+                    in_code = False
+                in_text = True
+                addition = stripped[tag_len:]
+                if addition == '' or addition[-1] != '\n':
+                    addition += '\n'
+                current_block += addition
+            else:
+                if in_text:
+                    text_to_process += current_block
+                    current_block = ""
+                    in_text = False
+                    in_code = True # Code to show begins right after tagged text
+                if in_code:
+                    current_block += ' ' + line
+        if in_code:
+            text_to_process += code_prefix + current_block + code_suffix
+        elif in_text:
+            text_to_process += current_block
+
+        # Debug writes...
+        #print 'text_to_process ='
+        #print text_to_process
+        #print '= text_to_process'
+
+        lines = string2lines( text_to_process )
+        self.state_machine.insert_input( lines, absfilename )
+
+        return []
+
+def setup(app):
+    app.add_directive('tutorial-formatter', TutorialFormatterDirective)
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/drive_widget.cpp
@@ -0,0 +1,250 @@
+/*
+ * Copyright (c) 2011, Willow Garage, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Willow Garage, Inc. nor the names of its
+ *       contributors may be used to endorse or promote products derived from
+ *       this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <stdio.h>
+#include <math.h>
+
+#include <QPainter>
+#include <QMouseEvent>
+
+#include "drive_widget.h"
+
+namespace rviz_plugin_tutorials
+{
+
+// BEGIN_TUTORIAL
+// The DriveWidget constructor does the normal Qt thing of
+// passing the parent widget to the superclass constructor, then
+// initializing the member variables.
+DriveWidget::DriveWidget( QWidget* parent )
+  : QWidget( parent )
+  , linear_velocity_( 0 )
+  , angular_velocity_( 0 )
+  , linear_scale_( 10 )
+  , angular_scale_( 2 )
+{
+}
+
+// This paintEvent() is complex because of the drawing of the two
+// arc-arrows representing wheel motion.  It is not particularly
+// relevant to learning how to make an RViz plugin, so I will kind of
+// skim it.
+void DriveWidget::paintEvent( QPaintEvent* event )
+{
+  // The background color and crosshair lines are drawn differently
+  // depending on whether this widget is enabled or not.  This gives a
+  // nice visual indication of whether the control is "live".
+  QColor background;
+  QColor crosshair;
+  if( isEnabled() )
+  {
+    background = Qt::white;
+    crosshair = Qt::black;
+  }
+  else
+  {
+    background = Qt::lightGray;
+    crosshair = Qt::darkGray;
+  }
+
+  // The main visual is a square, centered in the widget's area.  Here
+  // we compute the size of the square and the horizontal and vertical
+  // offsets of it.
+  int w = width();
+  int h = height();
+  int size = (( w > h ) ? h : w) - 1;
+  int hpad = ( w - size ) / 2;
+  int vpad = ( h - size ) / 2;
+
+  QPainter painter( this );
+  painter.setBrush( background );
+  painter.setPen( crosshair );
+
+  // Draw the background square.
+  painter.drawRect( QRect( hpad, vpad, size, size ));
+
+  // Draw a cross-hair inside the square.
+  painter.drawLine( hpad, height() / 2, hpad + size, height() / 2 );
+  painter.drawLine( width() / 2, vpad, width() / 2, vpad + size );
+
+  // If the widget is enabled and the velocities are not zero, draw
+  // some sweet green arrows showing possible paths that the wheels of
+  // a diff-drive robot would take if it stayed at these velocities.
+  if( isEnabled() && (angular_velocity_ != 0 || linear_velocity_ != 0 ))
+  {
+    QPen arrow;
+    arrow.setWidth( size/20 );
+    arrow.setColor( Qt::green );
+    arrow.setCapStyle( Qt::RoundCap );
+    arrow.setJoinStyle( Qt::RoundJoin );
+    painter.setPen( arrow );
+
+    // This code steps along a central arc defined by the linear and
+    // angular velocites.  At each step, it computes where the left
+    // and right wheels would be and collects the resulting points
+    // in the left_track and right_track arrays.
+    const int step_count = 100;
+    QPointF left_track[ step_count ];
+    QPointF right_track[ step_count ];
+
+    float half_track_width = size/4.0;
+
+    float cx = w/2;
+    float cy = h/2;
+    left_track[ 0 ].setX( cx - half_track_width );
+    left_track[ 0 ].setY( cy );
+    right_track[ 0 ].setX( cx + half_track_width );
+    right_track[ 0 ].setY( cy );
+    float angle = M_PI/2;
+    float delta_angle = angular_velocity_ / step_count;
+    float step_dist = linear_velocity_ * size/2 / linear_scale_ / step_count;
+    for( int step = 1; step < step_count; step++ )
+    {
+      angle += delta_angle / 2;
+      float next_cx = cx + step_dist * cosf( angle );
+      float next_cy = cy - step_dist * sinf( angle );
+      angle += delta_angle / 2;
+
+      left_track[ step ].setX( next_cx + half_track_width * cosf( angle + M_PI/2 ));
+      left_track[ step ].setY( next_cy - half_track_width * sinf( angle + M_PI/2 ));
+      right_track[ step ].setX( next_cx + half_track_width * cosf( angle - M_PI/2 ));
+      right_track[ step ].setY( next_cy - half_track_width * sinf( angle - M_PI/2 ));
+
+      cx = next_cx;
+      cy = next_cy;
+    }
+    // Now the track arrays are filled, so stroke each with a fat green line.
+    painter.drawPolyline( left_track, step_count );
+    painter.drawPolyline( right_track, step_count );
+
+    // Here we decide which direction each arrowhead will point
+    // (forward or backward).  This works by comparing the arc length
+    // travelled by the center in one step (step_dist) with the arc
+    // length travelled by the wheel (half_track_width * delta_angle).
+    int left_arrow_dir = (-step_dist + half_track_width * delta_angle > 0);
+    int right_arrow_dir = (-step_dist - half_track_width * delta_angle > 0);
+
+    // Use MiterJoin for the arrowheads so we get a nice sharp point.
+    arrow.setJoinStyle( Qt::MiterJoin );
+    painter.setPen( arrow );
+
+    // Compute and draw polylines for each arrowhead.  This code could
+    // probably be more elegant.
+    float head_len = size / 8.0;
+    QPointF arrow_head[ 3 ];
+    float x, y;
+    if( fabsf( -step_dist + half_track_width * delta_angle ) > .01 )
+    {
+      x = left_track[ step_count - 1 ].x();
+      y = left_track[ step_count - 1 ].y();
+      arrow_head[ 0 ].setX( x + head_len * cosf( angle + 3*M_PI/4 + left_arrow_dir * M_PI ));
+      arrow_head[ 0 ].setY( y - head_len * sinf( angle + 3*M_PI/4 + left_arrow_dir * M_PI ));
+      arrow_head[ 1 ].setX( x );
+      arrow_head[ 1 ].setY( y );
+      arrow_head[ 2 ].setX( x + head_len * cosf( angle - 3*M_PI/4 + left_arrow_dir * M_PI ));
+      arrow_head[ 2 ].setY( y - head_len * sinf( angle - 3*M_PI/4 + left_arrow_dir * M_PI ));
+      painter.drawPolyline( arrow_head, 3 );
+    }
+    if( fabsf( -step_dist - half_track_width * delta_angle ) > .01 )
+    {
+      x = right_track[ step_count - 1 ].x();
+      y = right_track[ step_count - 1 ].y();
+      arrow_head[ 0 ].setX( x + head_len * cosf( angle + 3*M_PI/4 + right_arrow_dir * M_PI ));
+      arrow_head[ 0 ].setY( y - head_len * sinf( angle + 3*M_PI/4 + right_arrow_dir * M_PI ));
+      arrow_head[ 1 ].setX( x );
+      arrow_head[ 1 ].setY( y );
+      arrow_head[ 2 ].setX( x + head_len * cosf( angle - 3*M_PI/4 + right_arrow_dir * M_PI ));
+      arrow_head[ 2 ].setY( y - head_len * sinf( angle - 3*M_PI/4 + right_arrow_dir * M_PI ));
+      painter.drawPolyline( arrow_head, 3 );
+    }
+  }
+}
+
+// Every mouse move event received here sends a velocity because Qt
+// only sends us mouse move events if there was previously a
+// mouse-press event while in the widget.
+void DriveWidget::mouseMoveEvent( QMouseEvent* event )
+{
+  sendVelocitiesFromMouse( event->x(), event->y(), width(), height() );
+}
+
+// Mouse-press events should send the velocities too, of course.
+void DriveWidget::mousePressEvent( QMouseEvent* event )
+{
+  sendVelocitiesFromMouse( event->x(), event->y(), width(), height() );
+}
+
+// When the mouse leaves the widget but the button is still held down,
+// we don't get the leaveEvent() because the mouse is "grabbed" (by
+// default from Qt).  However, when the mouse drags out of the widget
+// and then other buttons are pressed (or possibly other
+// window-manager things happen), we will get a leaveEvent() but not a
+// mouseReleaseEvent().  Without catching this event you can have a
+// robot stuck "on" without the user controlling it.
+void DriveWidget::leaveEvent( QEvent* event )
+{
+  stop();
+}
+
+// The ordinary way to stop: let go of the mouse button.
+void DriveWidget::mouseReleaseEvent( QMouseEvent* event )
+{
+  stop();
+}
+
+// Compute and emit linear and angular velocities based on Y and X
+// mouse positions relative to the central square.
+void DriveWidget::sendVelocitiesFromMouse( int x, int y, int width, int height )
+{  
+  int size = (( width > height ) ? height : width );
+  int hpad = ( width - size ) / 2;
+  int vpad = ( height - size ) / 2;
+
+  linear_velocity_ = (1.0 - float( y - vpad ) / float( size / 2 )) * linear_scale_;
+  angular_velocity_ = (1.0 - float( x - hpad ) / float( size / 2 )) * angular_scale_;
+  Q_EMIT outputVelocity( linear_velocity_, angular_velocity_ );
+
+  // update() is a QWidget function which schedules this widget to be
+  // repainted the next time through the main event loop.  We need
+  // this because the velocities have just changed, so the arrows need
+  // to be redrawn to match.
+  update();
+}
+
+// How to stop: emit velocities of 0!
+void DriveWidget::stop()
+{
+  linear_velocity_ = 0;
+  angular_velocity_ = 0;
+  Q_EMIT outputVelocity( linear_velocity_, angular_velocity_ );
+  update();
+}
+// END_TUTORIAL
+
+} // end namespace rviz_plugin_tutorials
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/drive_widget.h
@@ -0,0 +1,90 @@
+/*
+ * Copyright (c) 2011, Willow Garage, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Willow Garage, Inc. nor the names of its
+ *       contributors may be used to endorse or promote products derived from
+ *       this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+#ifndef DRIVE_WIDGET_H
+#define DRIVE_WIDGET_H
+
+#include <QWidget>
+
+namespace rviz_plugin_tutorials
+{
+
+// BEGIN_TUTORIAL
+// DriveWidget implements a control which translates mouse Y values
+// into linear velocities and mouse X values into angular velocities.
+//
+// For maximum reusability, this class is only responsible for user
+// interaction and display inside its widget.  It does not make any
+// ROS or RViz calls.  It communicates its data to the outside just
+// via Qt signals.
+class DriveWidget: public QWidget
+{
+Q_OBJECT
+public:
+  // This class is not instantiated by pluginlib::ClassLoader, so the
+  // constructor has no restrictions.
+  DriveWidget( QWidget* parent = 0 );
+
+  // We override QWidget::paintEvent() to do custom painting.
+  virtual void paintEvent( QPaintEvent* event );
+
+  // We override the mouse events and leaveEvent() to keep track of
+  // what the mouse is doing.
+  virtual void mouseMoveEvent( QMouseEvent* event );
+  virtual void mousePressEvent( QMouseEvent* event );
+  virtual void mouseReleaseEvent( QMouseEvent* event );
+  virtual void leaveEvent( QEvent* event );
+
+  // Override sizeHint() to give the layout managers some idea of a
+  // good size for this.
+  virtual QSize sizeHint() const { return QSize( 150, 150 ); }
+
+  // We emit outputVelocity() whenever it changes.
+Q_SIGNALS:
+  void outputVelocity( float linear, float angular );
+
+  // mouseMoveEvent() and mousePressEvent() need the same math to
+  // figure the velocities, so I put that in here.
+protected:
+  void sendVelocitiesFromMouse( int x, int y, int width, int height );
+
+  // A function to emit zero velocity.
+  void stop();
+
+  // Finally the member variables:
+  float linear_velocity_; // In m/s
+  float angular_velocity_; // In radians/s
+  float linear_scale_; // In m/s
+  float angular_scale_; // In radians/s
+};
+// END_TUTORIAL
+
+} // end namespace rviz_plugin_tutorials
+
+
+#endif // DRIVE_WIDGET_H
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/flag.h
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2012, Willow Garage, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Willow Garage, Inc. nor the names of its
+ *       contributors may be used to endorse or promote products derived from
+ *       this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+#ifndef FLAG_H
+#define FLAG_H
+
+namespace rviz_plugin_tutorials
+{
+
+class Flag: public rviz::Property
+{
+Q_OBJECT
+public:
+  Flag();
+};
+
+}
+
+#endif // FLAG_H
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/imu_display.cpp
@@ -0,0 +1,161 @@
+/*
+ * Copyright (c) 2012, Willow Garage, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Willow Garage, Inc. nor the names of its
+ *       contributors may be used to endorse or promote products derived from
+ *       this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <OGRE/OgreSceneNode.h>
+#include <OGRE/OgreSceneManager.h>
+
+#include <tf/transform_listener.h>
+
+#include <rviz/visualization_manager.h>
+#include <rviz/properties/color_property.h>
+#include <rviz/properties/float_property.h>
+#include <rviz/properties/int_property.h>
+#include <rviz/frame_manager.h>
+
+#include "imu_visual.h"
+
+#include "imu_display.h"
+
+namespace rviz_plugin_tutorials
+{
+
+// BEGIN_TUTORIAL
+// The constructor must have no arguments, so we can't give the
+// constructor the parameters it needs to fully initialize.
+ImuDisplay::ImuDisplay()
+{
+  color_property_ = new rviz::ColorProperty( "Color", QColor( 204, 51, 204 ),
+                                             "Color to draw the acceleration arrows.",
+                                             this, SLOT( updateColorAndAlpha() ));
+
+  alpha_property_ = new rviz::FloatProperty( "Alpha", 1.0,
+                                             "0 is fully transparent, 1.0 is fully opaque.",
+                                             this, SLOT( updateColorAndAlpha() ));
+
+  history_length_property_ = new rviz::IntProperty( "History Length", 1,
+                                                    "Number of prior measurements to display.",
+                                                    this, SLOT( updateHistoryLength() ));
+  history_length_property_->setMin( 1 );
+  history_length_property_->setMax( 100000 );
+}
+
+// After the top-level rviz::Display::initialize() does its own setup,
+// it calls the subclass's onInitialize() function.  This is where we
+// instantiate all the workings of the class.  We make sure to also
+// call our immediate super-class's onInitialize() function, since it
+// does important stuff setting up the message filter.
+//
+//  Note that "MFDClass" is a typedef of
+// ``MessageFilterDisplay<message type>``, to save typing that long
+// templated class name every time you need to refer to the
+// superclass.
+void ImuDisplay::onInitialize()
+{
+  MFDClass::onInitialize();
+  updateHistoryLength();
+}
+
+ImuDisplay::~ImuDisplay()
+{
+}
+
+// Clear the visuals by deleting their objects.
+void ImuDisplay::reset()
+{
+  MFDClass::reset();
+  visuals_.clear();
+}
+
+// Set the current color and alpha values for each visual.
+void ImuDisplay::updateColorAndAlpha()
+{
+  float alpha = alpha_property_->getFloat();
+  Ogre::ColourValue color = color_property_->getOgreColor();
+
+  for( size_t i = 0; i < visuals_.size(); i++ )
+  {
+    visuals_[ i ]->setColor( color.r, color.g, color.b, alpha );
+  }
+}
+
+// Set the number of past visuals to show.
+void ImuDisplay::updateHistoryLength()
+{
+  visuals_.rset_capacity(history_length_property_->getInt());
+}
+
+// This is our callback to handle an incoming message.
+void ImuDisplay::processMessage( const sensor_msgs::Imu::ConstPtr& msg )
+{
+  // Here we call the rviz::FrameManager to get the transform from the
+  // fixed frame to the frame in the header of this Imu message.  If
+  // it fails, we can't do anything else so we return.
+  Ogre::Quaternion orientation;
+  Ogre::Vector3 position;
+  if( !context_->getFrameManager()->getTransform( msg->header.frame_id,
+                                                  msg->header.stamp,
+                                                  position, orientation ))
+  {
+    ROS_DEBUG( "Error transforming from frame '%s' to frame '%s'",
+               msg->header.frame_id.c_str(), qPrintable( fixed_frame_ ));
+    return;
+  }
+
+  // We are keeping a circular buffer of visual pointers.  This gets
+  // the next one, or creates and stores it if the buffer is not full
+  boost::shared_ptr<ImuVisual> visual;
+  if( visuals_.full() )
+  {
+    visual = visuals_.front();
+  }
+  else
+  {
+    visual.reset(new ImuVisual( context_->getSceneManager(), scene_node_ ));
+  }
+
+  // Now set or update the contents of the chosen visual.
+  visual->setMessage( msg );
+  visual->setFramePosition( position );
+  visual->setFrameOrientation( orientation );
+
+  float alpha = alpha_property_->getFloat();
+  Ogre::ColourValue color = color_property_->getOgreColor();
+  visual->setColor( color.r, color.g, color.b, alpha );
+
+  // And send it to the end of the circular buffer
+  visuals_.push_back(visual);
+}
+
+} // end namespace rviz_plugin_tutorials
+
+// Tell pluginlib about this class.  It is important to do this in
+// global scope, outside our package's namespace.
+#include <pluginlib/class_list_macros.h>
+PLUGINLIB_EXPORT_CLASS(rviz_plugin_tutorials::ImuDisplay,rviz::Display )
+// END_TUTORIAL
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/imu_display.h
@@ -0,0 +1,119 @@
+/*
+ * Copyright (c) 2012, Willow Garage, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Willow Garage, Inc. nor the names of its
+ *       contributors may be used to endorse or promote products derived from
+ *       this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef IMU_DISPLAY_H
+#define IMU_DISPLAY_H
+
+#ifndef Q_MOC_RUN
+#include <boost/circular_buffer.hpp>
+
+#include <rviz/message_filter_display.h>
+#include <sensor_msgs/Imu.h>
+#endif
+
+namespace Ogre
+{
+class SceneNode;
+}
+
+namespace rviz
+{
+class ColorProperty;
+class FloatProperty;
+class IntProperty;
+}
+
+// All the source in this plugin is in its own namespace.  This is not
+// required but is good practice.
+namespace rviz_plugin_tutorials
+{
+
+class ImuVisual;
+
+// BEGIN_TUTORIAL
+// Here we declare our new subclass of rviz::Display.  Every display
+// which can be listed in the "Displays" panel is a subclass of
+// rviz::Display.
+//
+// ImuDisplay will show a 3D arrow showing the direction and magnitude
+// of the IMU acceleration vector.  The base of the arrow will be at
+// the frame listed in the header of the Imu message, and the
+// direction of the arrow will be relative to the orientation of that
+// frame.  It will also optionally show a history of recent
+// acceleration vectors, which will be stored in a circular buffer.
+//
+// The ImuDisplay class itself just implements the circular buffer,
+// editable parameters, and Display subclass machinery.  The visuals
+// themselves are represented by a separate class, ImuVisual.  The
+// idiom for the visuals is that when the objects exist, they appear
+// in the scene, and when they are deleted, they disappear.
+class ImuDisplay: public rviz::MessageFilterDisplay<sensor_msgs::Imu>
+{
+Q_OBJECT
+public:
+  // Constructor.  pluginlib::ClassLoader creates instances by calling
+  // the default constructor, so make sure you have one.
+  ImuDisplay();
+  virtual ~ImuDisplay();
+
+  // Overrides of protected virtual functions from Display.  As much
+  // as possible, when Displays are not enabled, they should not be
+  // subscribed to incoming data and should not show anything in the
+  // 3D view.  These functions are where these connections are made
+  // and broken.
+protected:
+  virtual void onInitialize();
+
+  // A helper to clear this display back to the initial state.
+  virtual void reset();
+
+  // These Qt slots get connected to signals indicating changes in the user-editable properties.
+private Q_SLOTS:
+  void updateColorAndAlpha();
+  void updateHistoryLength();
+
+  // Function to handle an incoming ROS message.
+private:
+  void processMessage( const sensor_msgs::Imu::ConstPtr& msg );
+
+  // Storage for the list of visuals.  It is a circular buffer where
+  // data gets popped from the front (oldest) and pushed to the back (newest)
+  boost::circular_buffer<boost::shared_ptr<ImuVisual> > visuals_;
+
+  // User-editable property variables.
+  rviz::ColorProperty* color_property_;
+  rviz::FloatProperty* alpha_property_;
+  rviz::IntProperty* history_length_property_;
+};
+// END_TUTORIAL
+
+} // end namespace rviz_plugin_tutorials
+
+#endif // IMU_DISPLAY_H
+// %EndTag(FULL_SOURCE)%
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/imu_visual.cpp
@@ -0,0 +1,104 @@
+/*
+ * Copyright (c) 2012, Willow Garage, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Willow Garage, Inc. nor the names of its
+ *       contributors may be used to endorse or promote products derived from
+ *       this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <OGRE/OgreVector3.h>
+#include <OGRE/OgreSceneNode.h>
+#include <OGRE/OgreSceneManager.h>
+
+#include <rviz/ogre_helpers/arrow.h>
+
+#include "imu_visual.h"
+
+namespace rviz_plugin_tutorials
+{
+
+// BEGIN_TUTORIAL
+ImuVisual::ImuVisual( Ogre::SceneManager* scene_manager, Ogre::SceneNode* parent_node )
+{
+  scene_manager_ = scene_manager;
+
+  // Ogre::SceneNode s form a tree, with each node storing the
+  // transform (position and orientation) of itself relative to its
+  // parent.  Ogre does the math of combining those transforms when it
+  // is time to render.
+  //
+  // Here we create a node to store the pose of the Imu's header frame
+  // relative to the RViz fixed frame.
+  frame_node_ = parent_node->createChildSceneNode();
+
+  // We create the arrow object within the frame node so that we can
+  // set its position and direction relative to its header frame.
+  acceleration_arrow_.reset(new rviz::Arrow( scene_manager_, frame_node_ ));
+}
+
+ImuVisual::~ImuVisual()
+{
+  // Destroy the frame node since we don't need it anymore.
+  scene_manager_->destroySceneNode( frame_node_ );
+}
+
+void ImuVisual::setMessage( const sensor_msgs::Imu::ConstPtr& msg )
+{
+  const geometry_msgs::Vector3& a = msg->linear_acceleration;
+
+  // Convert the geometry_msgs::Vector3 to an Ogre::Vector3.
+  Ogre::Vector3 acc( a.x, a.y, a.z );
+
+  // Find the magnitude of the acceleration vector.
+  float length = acc.length();
+
+  // Scale the arrow's thickness in each dimension along with its length.
+  Ogre::Vector3 scale( length, length, length );
+  acceleration_arrow_->setScale( scale );
+
+  // Set the orientation of the arrow to match the direction of the
+  // acceleration vector.
+  acceleration_arrow_->setDirection( acc );
+}
+
+// Position and orientation are passed through to the SceneNode.
+void ImuVisual::setFramePosition( const Ogre::Vector3& position )
+{
+  frame_node_->setPosition( position );
+}
+
+void ImuVisual::setFrameOrientation( const Ogre::Quaternion& orientation )
+{
+  frame_node_->setOrientation( orientation );
+}
+
+// Color is passed through to the Arrow object.
+void ImuVisual::setColor( float r, float g, float b, float a )
+{
+  acceleration_arrow_->setColor( r, g, b, a );
+}
+// END_TUTORIAL
+
+} // end namespace rviz_plugin_tutorials
+
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/imu_visual.h
@@ -0,0 +1,97 @@
+/*
+ * Copyright (c) 2012, Willow Garage, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Willow Garage, Inc. nor the names of its
+ *       contributors may be used to endorse or promote products derived from
+ *       this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef IMU_VISUAL_H
+#define IMU_VISUAL_H
+
+#include <sensor_msgs/Imu.h>
+
+namespace Ogre
+{
+class Vector3;
+class Quaternion;
+}
+
+namespace rviz
+{
+class Arrow;
+}
+
+namespace rviz_plugin_tutorials
+{
+
+// BEGIN_TUTORIAL
+// Declare the visual class for this display.
+//
+// Each instance of ImuVisual represents the visualization of a single
+// sensor_msgs::Imu message.  Currently it just shows an arrow with
+// the direction and magnitude of the acceleration vector, but could
+// easily be expanded to include more of the message data.
+class ImuVisual
+{
+public:
+  // Constructor.  Creates the visual stuff and puts it into the
+  // scene, but in an unconfigured state.
+  ImuVisual( Ogre::SceneManager* scene_manager, Ogre::SceneNode* parent_node );
+
+  // Destructor.  Removes the visual stuff from the scene.
+  virtual ~ImuVisual();
+
+  // Configure the visual to show the data in the message.
+  void setMessage( const sensor_msgs::Imu::ConstPtr& msg );
+
+  // Set the pose of the coordinate frame the message refers to.
+  // These could be done inside setMessage(), but that would require
+  // calls to FrameManager and error handling inside setMessage(),
+  // which doesn't seem as clean.  This way ImuVisual is only
+  // responsible for visualization.
+  void setFramePosition( const Ogre::Vector3& position );
+  void setFrameOrientation( const Ogre::Quaternion& orientation );
+
+  // Set the color and alpha of the visual, which are user-editable
+  // parameters and therefore don't come from the Imu message.
+  void setColor( float r, float g, float b, float a );
+
+private:
+  // The object implementing the actual arrow shape
+  boost::shared_ptr<rviz::Arrow> acceleration_arrow_;
+
+  // A SceneNode whose pose is set to match the coordinate frame of
+  // the Imu message header.
+  Ogre::SceneNode* frame_node_;
+
+  // The SceneManager, kept here only so the destructor can ask it to
+  // destroy the ``frame_node_``.
+  Ogre::SceneManager* scene_manager_;
+};
+// END_TUTORIAL
+
+} // end namespace rviz_plugin_tutorials
+
+#endif // IMU_VISUAL_H
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/plant_flag_tool.cpp
@@ -0,0 +1,293 @@
+/*
+ * Copyright (c) 2011, Willow Garage, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Willow Garage, Inc. nor the names of its
+ *       contributors may be used to endorse or promote products derived from
+ *       this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <OGRE/OgreSceneNode.h>
+#include <OGRE/OgreSceneManager.h>
+#include <OGRE/OgreEntity.h>
+
+#include <ros/console.h>
+
+#include <rviz/viewport_mouse_event.h>
+#include <rviz/visualization_manager.h>
+#include <rviz/mesh_loader.h>
+#include <rviz/geometry.h>
+#include <rviz/properties/vector_property.h>
+
+#include "plant_flag_tool.h"
+
+namespace rviz_plugin_tutorials
+{
+
+// BEGIN_TUTORIAL
+// Construction and destruction
+// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+//
+// The constructor must have no arguments, so we can't give the
+// constructor the parameters it needs to fully initialize.
+//
+// Here we set the "shortcut_key_" member variable defined in the
+// superclass to declare which key will activate the tool.
+PlantFlagTool::PlantFlagTool()
+  : moving_flag_node_( NULL )
+  , current_flag_property_( NULL )
+{
+  shortcut_key_ = 'l';
+}
+
+// The destructor destroys the Ogre scene nodes for the flags so they
+// disappear from the 3D scene.  The destructor for a Tool subclass is
+// only called when the tool is removed from the toolbar with the "-"
+// button.
+PlantFlagTool::~PlantFlagTool()
+{
+  for( unsigned i = 0; i < flag_nodes_.size(); i++ )
+  {
+    scene_manager_->destroySceneNode( flag_nodes_[ i ]);
+  }
+}
+
+// onInitialize() is called by the superclass after scene_manager_ and
+// context_ are set.  It should be called only once per instantiation.
+// This is where most one-time initialization work should be done.
+// onInitialize() is called during initial instantiation of the tool
+// object.  At this point the tool has not been activated yet, so any
+// scene objects created should be invisible or disconnected from the
+// scene at this point.
+//
+// In this case we load a mesh object with the shape and appearance of
+// the flag, create an Ogre::SceneNode for the moving flag, and then
+// set it invisible.
+void PlantFlagTool::onInitialize()
+{
+  flag_resource_ = "package://rviz_plugin_tutorials/media/flag.dae";
+
+  if( rviz::loadMeshFromResource( flag_resource_ ).isNull() )
+  {
+    ROS_ERROR( "PlantFlagTool: failed to load model resource '%s'.", flag_resource_.c_str() );
+    return;
+  }
+
+  moving_flag_node_ = scene_manager_->getRootSceneNode()->createChildSceneNode();
+  Ogre::Entity* entity = scene_manager_->createEntity( flag_resource_ );
+  moving_flag_node_->attachObject( entity );
+  moving_flag_node_->setVisible( false );
+}
+
+// Activation and deactivation
+// ^^^^^^^^^^^^^^^^^^^^^^^^^^^
+//
+// activate() is called when the tool is started by the user, either
+// by clicking on its button in the toolbar or by pressing its hotkey.
+//
+// First we set the moving flag node to be visible, then we create an
+// rviz::VectorProperty to show the user the position of the flag.
+// Unlike rviz::Display, rviz::Tool is not a subclass of
+// rviz::Property, so when we want to add a tool property we need to
+// get the parent container with getPropertyContainer() and add it to
+// that.
+//
+// We wouldn't have to set current_flag_property_ to be read-only, but
+// if it were writable the flag should really change position when the
+// user edits the property.  This is a fine idea, and is possible, but
+// is left as an exercise for the reader.
+void PlantFlagTool::activate()
+{
+  if( moving_flag_node_ )
+  {
+    moving_flag_node_->setVisible( true );
+
+    current_flag_property_ = new rviz::VectorProperty( "Flag " + QString::number( flag_nodes_.size() ));
+    current_flag_property_->setReadOnly( true );
+    getPropertyContainer()->addChild( current_flag_property_ );
+  }
+}
+
+// deactivate() is called when the tool is being turned off because
+// another tool has been chosen.
+//
+// We make the moving flag invisible, then delete the current flag
+// property.  Deleting a property also removes it from its parent
+// property, so that doesn't need to be done in a separate step.  If
+// we didn't delete it here, it would stay in the list of flags when
+// we switch to another tool.
+void PlantFlagTool::deactivate()
+{
+  if( moving_flag_node_ )
+  {
+    moving_flag_node_->setVisible( false );
+    delete current_flag_property_;
+    current_flag_property_ = NULL;
+  }
+}
+
+// Handling mouse events
+// ^^^^^^^^^^^^^^^^^^^^^
+//
+// processMouseEvent() is sort of the main function of a Tool, because
+// mouse interactions are the point of Tools.
+//
+// We use the utility function rviz::getPointOnPlaneFromWindowXY() to
+// see where on the ground plane the user's mouse is pointing, then
+// move the moving flag to that point and update the VectorProperty.
+//
+// If this mouse event was a left button press, we want to save the
+// current flag location.  Therefore we make a new flag at the same
+// place and drop the pointer to the VectorProperty.  Dropping the
+// pointer means when the tool is deactivated the VectorProperty won't
+// be deleted, which is what we want.
+int PlantFlagTool::processMouseEvent( rviz::ViewportMouseEvent& event )
+{
+  if( !moving_flag_node_ )
+  {
+    return Render;
+  }
+  Ogre::Vector3 intersection;
+  Ogre::Plane ground_plane( Ogre::Vector3::UNIT_Z, 0.0f );
+  if( rviz::getPointOnPlaneFromWindowXY( event.viewport,
+                                         ground_plane,
+                                         event.x, event.y, intersection ))
+  {
+    moving_flag_node_->setVisible( true );
+    moving_flag_node_->setPosition( intersection );
+    current_flag_property_->setVector( intersection );
+
+    if( event.leftDown() )
+    {
+      makeFlag( intersection );
+      current_flag_property_ = NULL; // Drop the reference so that deactivate() won't remove it.
+      return Render | Finished;
+    }
+  }
+  else
+  {
+    moving_flag_node_->setVisible( false ); // If the mouse is not pointing at the ground plane, don't show the flag.
+  }
+  return Render;
+}
+
+// This is a helper function to create a new flag in the Ogre scene and save its scene node in a list.
+void PlantFlagTool::makeFlag( const Ogre::Vector3& position )
+{
+  Ogre::SceneNode* node = scene_manager_->getRootSceneNode()->createChildSceneNode();
+  Ogre::Entity* entity = scene_manager_->createEntity( flag_resource_ );
+  node->attachObject( entity );
+  node->setVisible( true );
+  node->setPosition( position );
+  flag_nodes_.push_back( node );
+}
+
+// Loading and saving the flags
+// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+//
+// Tools with a fixed set of Property objects representing adjustable
+// parameters are typically just created in the tool's constructor and
+// added to the Property container (getPropertyContainer()).  In that
+// case, the Tool subclass does not need to override load() and save()
+// because the default behavior is to read all the Properties in the
+// container from the Config object.
+//
+// Here however, we have a list of named flag positions of unknown
+// length, so we need to implement save() and load() ourselves.
+//
+// We first save the class ID to the config object so the
+// rviz::ToolManager will know what to instantiate when the config
+// file is read back in.
+void PlantFlagTool::save( rviz::Config config ) const
+{
+  config.mapSetValue( "Class", getClassId() );
+
+  // The top level of this tool's Config is a map, but our flags
+  // should go in a list, since they may or may not have unique keys.
+  // Therefore we make a child of the map (``flags_config``) to store
+  // the list.
+  rviz::Config flags_config = config.mapMakeChild( "Flags" );
+
+  // To read the positions and names of the flags, we loop over the
+  // the children of our Property container:
+  rviz::Property* container = getPropertyContainer();
+  int num_children = container->numChildren();
+  for( int i = 0; i < num_children; i++ )
+  {
+    rviz::Property* position_prop = container->childAt( i );
+    // For each Property, we create a new Config object representing a
+    // single flag and append it to the Config list.
+    rviz::Config flag_config = flags_config.listAppendNew();
+    // Into the flag's config we store its name:
+    flag_config.mapSetValue( "Name", position_prop->getName() );
+    // ... and its position.
+    position_prop->save( flag_config );
+  }
+}
+
+// In a tool's load() function, we don't need to read its class
+// because that has already been read and used to instantiate the
+// object before this can have been called.
+void PlantFlagTool::load( const rviz::Config& config )
+{
+  // Here we get the "Flags" sub-config from the tool config and loop over its entries:
+  rviz::Config flags_config = config.mapGetChild( "Flags" );
+  int num_flags = flags_config.listLength();
+  for( int i = 0; i < num_flags; i++ )
+  {
+    rviz::Config flag_config = flags_config.listChildAt( i );
+    // At this point each ``flag_config`` represents a single flag.
+    //
+    // Here we provide a default name in case the name is not in the config file for some reason:
+    QString name = "Flag " + QString::number( i + 1 );
+    // Then we use the convenience function mapGetString() to read the
+    // name from ``flag_config`` if it is there.  (If no "Name" entry
+    // were present it would return false, but we don't care about
+    // that because we have already set a default.)
+    flag_config.mapGetString( "Name", &name );
+    // Given the name we can create an rviz::VectorProperty to display the position:
+    rviz::VectorProperty* prop = new rviz::VectorProperty( name );
+    // Then we just tell the property to read its contents from the config, and we've read all the data.
+    prop->load( flag_config );
+    // We finish each flag by marking it read-only (as discussed
+    // above), adding it to the property container, and finally making
+    // an actual visible flag object in the 3D scene at the correct
+    // position.
+    prop->setReadOnly( true );
+    getPropertyContainer()->addChild( prop );
+    makeFlag( prop->getVector() );
+  }
+}
+
+// End of .cpp file
+// ^^^^^^^^^^^^^^^^
+//
+// At the end of every plugin class implementation, we end the
+// namespace and then tell pluginlib about the class.  It is important
+// to do this in global scope, outside our package's namespace.
+
+} // end namespace rviz_plugin_tutorials
+
+#include <pluginlib/class_list_macros.h>
+PLUGINLIB_EXPORT_CLASS(rviz_plugin_tutorials::PlantFlagTool,rviz::Tool )
+// END_TUTORIAL
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/plant_flag_tool.h
@@ -0,0 +1,83 @@
+/*
+ * Copyright (c) 2012, Willow Garage, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Willow Garage, Inc. nor the names of its
+ *       contributors may be used to endorse or promote products derived from
+ *       this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+#ifndef PLANT_FLAG_TOOL_H
+#define PLANT_FLAG_TOOL_H
+
+#include <rviz/tool.h>
+
+namespace Ogre
+{
+class SceneNode;
+class Vector3;
+}
+
+namespace rviz
+{
+class VectorProperty;
+class VisualizationManager;
+class ViewportMouseEvent;
+}
+
+namespace rviz_plugin_tutorials
+{
+
+// BEGIN_TUTORIAL
+// Here we declare our new subclass of rviz::Tool.  Every tool
+// which can be added to the tool bar is a subclass of
+// rviz::Tool.
+class PlantFlagTool: public rviz::Tool
+{
+Q_OBJECT
+public:
+  PlantFlagTool();
+  ~PlantFlagTool();
+
+  virtual void onInitialize();
+
+  virtual void activate();
+  virtual void deactivate();
+
+  virtual int processMouseEvent( rviz::ViewportMouseEvent& event );
+
+  virtual void load( const rviz::Config& config );
+  virtual void save( rviz::Config config ) const;
+
+private:
+  void makeFlag( const Ogre::Vector3& position );
+
+  std::vector<Ogre::SceneNode*> flag_nodes_;
+  Ogre::SceneNode* moving_flag_node_;
+  std::string flag_resource_;
+  rviz::VectorProperty* current_flag_property_;
+};
+// END_TUTORIAL
+
+} // end namespace rviz_plugin_tutorials
+
+#endif // PLANT_FLAG_TOOL_H
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/teleop_panel.cpp
@@ -0,0 +1,200 @@
+/*
+ * Copyright (c) 2011, Willow Garage, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Willow Garage, Inc. nor the names of its
+ *       contributors may be used to endorse or promote products derived from
+ *       this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <stdio.h>
+
+#include <QPainter>
+#include <QLineEdit>
+#include <QVBoxLayout>
+#include <QHBoxLayout>
+#include <QLabel>
+#include <QTimer>
+
+#include <geometry_msgs/Twist.h>
+
+#include "drive_widget.h"
+#include "teleop_panel.h"
+
+namespace rviz_plugin_tutorials
+{
+
+// BEGIN_TUTORIAL
+// Here is the implementation of the TeleopPanel class.  TeleopPanel
+// has these responsibilities:
+//
+// - Act as a container for GUI elements DriveWidget and QLineEdit.
+// - Publish command velocities 10 times per second (whether 0 or not).
+// - Saving and restoring internal state from a config file.
+//
+// We start with the constructor, doing the standard Qt thing of
+// passing the optional *parent* argument on to the superclass
+// constructor, and also zero-ing the velocities we will be
+// publishing.
+TeleopPanel::TeleopPanel( QWidget* parent )
+  : rviz::Panel( parent )
+  , linear_velocity_( 0 )
+  , angular_velocity_( 0 )
+{
+  // Next we lay out the "output topic" text entry field using a
+  // QLabel and a QLineEdit in a QHBoxLayout.
+  QHBoxLayout* topic_layout = new QHBoxLayout;
+  topic_layout->addWidget( new QLabel( "Output Topic:" ));
+  output_topic_editor_ = new QLineEdit;
+  topic_layout->addWidget( output_topic_editor_ );
+
+  // Then create the control widget.
+  drive_widget_ = new DriveWidget;
+
+  // Lay out the topic field above the control widget.
+  QVBoxLayout* layout = new QVBoxLayout;
+  layout->addLayout( topic_layout );
+  layout->addWidget( drive_widget_ );
+  setLayout( layout );
+
+  // Create a timer for sending the output.  Motor controllers want to
+  // be reassured frequently that they are doing the right thing, so
+  // we keep re-sending velocities even when they aren't changing.
+  // 
+  // Here we take advantage of QObject's memory management behavior:
+  // since "this" is passed to the new QTimer as its parent, the
+  // QTimer is deleted by the QObject destructor when this TeleopPanel
+  // object is destroyed.  Therefore we don't need to keep a pointer
+  // to the timer.
+  QTimer* output_timer = new QTimer( this );
+
+  // Next we make signal/slot connections.
+  connect( drive_widget_, SIGNAL( outputVelocity( float, float )), this, SLOT( setVel( float, float )));
+  connect( output_topic_editor_, SIGNAL( editingFinished() ), this, SLOT( updateTopic() ));
+  connect( output_timer, SIGNAL( timeout() ), this, SLOT( sendVel() ));
+
+  // Start the timer.
+  output_timer->start( 100 );
+
+  // Make the control widget start disabled, since we don't start with an output topic.
+  drive_widget_->setEnabled( false );
+}
+
+// setVel() is connected to the DriveWidget's output, which is sent
+// whenever it changes due to a mouse event.  This just records the
+// values it is given.  The data doesn't actually get sent until the
+// next timer callback.
+void TeleopPanel::setVel( float lin, float ang )
+{
+  linear_velocity_ = lin;
+  angular_velocity_ = ang;
+}
+
+// Read the topic name from the QLineEdit and call setTopic() with the
+// results.  This is connected to QLineEdit::editingFinished() which
+// fires when the user presses Enter or Tab or otherwise moves focus
+// away.
+void TeleopPanel::updateTopic()
+{
+  setTopic( output_topic_editor_->text() );
+}
+
+// Set the topic name we are publishing to.
+void TeleopPanel::setTopic( const QString& new_topic )
+{
+  // Only take action if the name has changed.
+  if( new_topic != output_topic_ )
+  {
+    output_topic_ = new_topic;
+    // If the topic is the empty string, don't publish anything.
+    if( output_topic_ == "" )
+    {
+      velocity_publisher_.shutdown();
+    }
+    else
+    {
+      // The old ``velocity_publisher_`` is destroyed by this assignment,
+      // and thus the old topic advertisement is removed.  The call to
+      // nh_advertise() says we want to publish data on the new topic
+      // name.
+      velocity_publisher_ = nh_.advertise<geometry_msgs::Twist>( output_topic_.toStdString(), 1 );
+    }
+    // rviz::Panel defines the configChanged() signal.  Emitting it
+    // tells RViz that something in this panel has changed that will
+    // affect a saved config file.  Ultimately this signal can cause
+    // QWidget::setWindowModified(true) to be called on the top-level
+    // rviz::VisualizationFrame, which causes a little asterisk ("*")
+    // to show in the window's title bar indicating unsaved changes.
+    Q_EMIT configChanged();
+  }
+
+  // Gray out the control widget when the output topic is empty.
+  drive_widget_->setEnabled( output_topic_ != "" );
+}
+
+// Publish the control velocities if ROS is not shutting down and the
+// publisher is ready with a valid topic name.
+void TeleopPanel::sendVel()
+{
+  if( ros::ok() && velocity_publisher_ )
+  {
+    geometry_msgs::Twist msg;
+    msg.linear.x = linear_velocity_;
+    msg.linear.y = 0;
+    msg.linear.z = 0;
+    msg.angular.x = 0;
+    msg.angular.y = 0;
+    msg.angular.z = angular_velocity_;
+    velocity_publisher_.publish( msg );
+  }
+}
+
+// Save all configuration data from this panel to the given
+// Config object.  It is important here that you call save()
+// on the parent class so the class id and panel name get saved.
+void TeleopPanel::save( rviz::Config config ) const
+{
+  rviz::Panel::save( config );
+  config.mapSetValue( "Topic", output_topic_ );
+}
+
+// Load all configuration data for this panel from the given Config object.
+void TeleopPanel::load( const rviz::Config& config )
+{
+  rviz::Panel::load( config );
+  QString topic;
+  if( config.mapGetString( "Topic", &topic ))
+  {
+    output_topic_editor_->setText( topic );
+    updateTopic();
+  }
+}
+
+} // end namespace rviz_plugin_tutorials
+
+// Tell pluginlib about this class.  Every class which should be
+// loadable by pluginlib::ClassLoader must have these two lines
+// compiled in its .cpp file, outside of any namespace scope.
+#include <pluginlib/class_list_macros.h>
+PLUGINLIB_EXPORT_CLASS(rviz_plugin_tutorials::TeleopPanel,rviz::Panel )
+// END_TUTORIAL
--- /dev/null
+++ ros-noetic-rviz-plugin-tutorials-0.11.0/src/teleop_panel.h
@@ -0,0 +1,123 @@
+/*
+ * Copyright (c) 2011, Willow Garage, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Willow Garage, Inc. nor the names of its
+ *       contributors may be used to endorse or promote products derived from
+ *       this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+#ifndef TELEOP_PANEL_H
+#define TELEOP_PANEL_H
+
+#ifndef Q_MOC_RUN
+# include <ros/ros.h>
+
+# include <rviz/panel.h>
+#endif
+
+class QLineEdit;
+
+namespace rviz_plugin_tutorials
+{
+
+class DriveWidget;
+
+// BEGIN_TUTORIAL
+// Here we declare our new subclass of rviz::Panel.  Every panel which
+// can be added via the Panels/Add_New_Panel menu is a subclass of
+// rviz::Panel.
+//
+// TeleopPanel will show a text-entry field to set the output topic
+// and a 2D control area.  The 2D control area is implemented by the
+// DriveWidget class, and is described there.
+class TeleopPanel: public rviz::Panel
+{
+// This class uses Qt slots and is a subclass of QObject, so it needs
+// the Q_OBJECT macro.
+Q_OBJECT
+public:
+  // QWidget subclass constructors usually take a parent widget
+  // parameter (which usually defaults to 0).  At the same time,
+  // pluginlib::ClassLoader creates instances by calling the default
+  // constructor (with no arguments).  Taking the parameter and giving
+  // a default of 0 lets the default constructor work and also lets
+  // someone using the class for something else to pass in a parent
+  // widget as they normally would with Qt.
+  TeleopPanel( QWidget* parent = 0 );
+
+  // Now we declare overrides of rviz::Panel functions for saving and
+  // loading data from the config file.  Here the data is the
+  // topic name.
+  virtual void load( const rviz::Config& config );
+  virtual void save( rviz::Config config ) const;
+
+  // Next come a couple of public Qt slots.
+public Q_SLOTS:
+  // The control area, DriveWidget, sends its output to a Qt signal
+  // for ease of re-use, so here we declare a Qt slot to receive it.
+  void setVel( float linear_velocity_, float angular_velocity_ );
+
+  // In this example setTopic() does not get connected to any signal
+  // (it is called directly), but it is easy to define it as a public
+  // slot instead of a private function in case it would be useful to
+  // some other user.
+  void setTopic( const QString& topic );
+
+  // Here we declare some internal slots.
+protected Q_SLOTS:
+  // sendvel() publishes the current velocity values to a ROS
+  // topic.  Internally this is connected to a timer which calls it 10
+  // times per second.
+  void sendVel();
+
+  // updateTopic() reads the topic name from the QLineEdit and calls
+  // setTopic() with the result.
+  void updateTopic();
+
+  // Then we finish up with protected member variables.
+protected:
+  // The control-area widget which turns mouse events into command
+  // velocities.
+  DriveWidget* drive_widget_;
+
+  // One-line text editor for entering the outgoing ROS topic name.
+  QLineEdit* output_topic_editor_;
+
+  // The current name of the output topic.
+  QString output_topic_;
+
+  // The ROS publisher for the command velocity.
+  ros::Publisher velocity_publisher_;
+
+  // The ROS node handle.
+  ros::NodeHandle nh_;
+
+  // The latest velocity values from the drive widget.
+  float linear_velocity_;
+  float angular_velocity_;
+  // END_TUTORIAL
+};
+
+} // end namespace rviz_plugin_tutorials
+
+#endif // TELEOP_PANEL_H
