Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ros-noetic-rosout (1.16.0-0jammy) jammy; urgency=high
Author: Michael Carroll <michael@openrobotics.org>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2024-08-18

--- /dev/null
+++ ros-noetic-rosout-1.16.0/CHANGELOG.rst
@@ -0,0 +1,239 @@
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Changelog for package rosout
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+1.16.0 (2023-02-15)
+-------------------
+
+1.15.15 (2022-11-23)
+--------------------
+* Move @jacobperron from maintainer to author (`#2302 <https://github.com/ros/ros_comm/issues/2302>`_)
+* Contributors: Shane Loretz
+
+1.15.14 (2022-01-06)
+--------------------
+
+1.15.13 (2021-09-22)
+--------------------
+
+1.15.12 (2021-09-21)
+--------------------
+
+1.15.11 (2021-04-06)
+--------------------
+
+1.15.10 (2021-03-18)
+--------------------
+
+1.15.9 (2020-10-16)
+-------------------
+* Update maintainers (`#2075 <https://github.com/ros/ros_comm/issues/2075>`_)
+* Fix spelling (`#2066 <https://github.com/ros/ros_comm/issues/2066>`_)
+* Contributors: Shane Loretz, tomoya
+
+1.15.8 (2020-07-23)
+-------------------
+
+1.15.7 (2020-05-28)
+-------------------
+
+1.15.6 (2020-05-21)
+-------------------
+
+1.15.5 (2020-05-15)
+-------------------
+
+1.15.4 (2020-03-19)
+-------------------
+
+1.15.3 (2020-02-28)
+-------------------
+
+1.15.2 (2020-02-25)
+-------------------
+
+1.15.1 (2020-02-24)
+-------------------
+
+1.15.0 (2020-02-21)
+-------------------
+
+1.14.4 (2020-02-20)
+-------------------
+* bump CMake minimum version to avoid CMP0048 warning (`#1869 <https://github.com/ros/ros_comm/issues/1869>`_)
+* fix use-after-free issue in rosout (`#1764 <https://github.com/ros/ros_comm/issues/1764>`_)
+* include cctype for std::tolower (`#1587 <https://github.com/ros/ros_comm/issues/1587>`_)
+* disable rosout.log by using environment variable (`#1425 <https://github.com/ros/ros_comm/issues/1425>`_)
+
+1.14.3 (2018-08-06)
+-------------------
+
+1.14.2 (2018-06-06)
+-------------------
+
+1.14.1 (2018-05-21)
+-------------------
+
+1.14.0 (2018-05-21)
+-------------------
+* allow disabling rosout file logging (to rosout.log) (`#1381 <https://github.com/ros/ros_comm/issues/1381>`_)
+
+1.13.6 (2018-02-05)
+-------------------
+* add parameter to omit topics list from rosout logs (`#1234 <https://github.com/ros/ros_comm/issues/1234>`_)
+
+1.13.5 (2017-11-09)
+-------------------
+
+1.13.4 (2017-11-02)
+-------------------
+
+1.13.3 (2017-10-25)
+-------------------
+
+1.13.2 (2017-08-15)
+-------------------
+
+1.13.1 (2017-07-27)
+-------------------
+* move code from init to initializer (`#990 <https://github.com/ros/ros_comm/issues/990>`_)
+
+1.13.0 (2017-02-22)
+-------------------
+* modify rosout log rotation to actually "rotate" old files (`#854 <https://github.com/ros/ros_comm/issues/854>`_)
+* add node name to the output in rosout.log (`#912 <https://github.com/ros/ros_comm/issues/912>`_)
+
+1.12.7 (2017-02-17)
+-------------------
+
+1.12.6 (2016-10-26)
+-------------------
+
+1.12.5 (2016-09-30)
+-------------------
+
+1.12.4 (2016-09-19)
+-------------------
+
+1.12.3 (2016-09-17)
+-------------------
+
+1.12.2 (2016-06-03)
+-------------------
+
+1.12.1 (2016-04-18)
+-------------------
+* use directory specific compiler flags (`#785 <https://github.com/ros/ros_comm/pull/785>`_)
+
+1.12.0 (2016-03-18)
+-------------------
+
+1.11.18 (2016-03-17)
+--------------------
+
+1.11.17 (2016-03-11)
+--------------------
+
+1.11.16 (2015-11-09)
+--------------------
+
+1.11.15 (2015-10-13)
+--------------------
+
+1.11.14 (2015-09-19)
+--------------------
+
+1.11.13 (2015-04-28)
+--------------------
+
+1.11.12 (2015-04-27)
+--------------------
+
+1.11.11 (2015-04-16)
+--------------------
+
+1.11.10 (2014-12-22)
+--------------------
+
+1.11.9 (2014-08-18)
+-------------------
+
+1.11.8 (2014-08-04)
+-------------------
+
+1.11.7 (2014-07-18)
+-------------------
+
+1.11.6 (2014-07-10)
+-------------------
+
+1.11.5 (2014-06-24)
+-------------------
+
+1.11.4 (2014-06-16)
+-------------------
+
+1.11.3 (2014-05-21)
+-------------------
+
+1.11.2 (2014-05-08)
+-------------------
+
+1.11.1 (2014-05-07)
+-------------------
+
+1.11.0 (2014-03-04)
+-------------------
+
+1.10.0 (2014-02-11)
+-------------------
+
+1.9.54 (2014-01-27)
+-------------------
+
+1.9.53 (2014-01-14)
+-------------------
+
+1.9.52 (2014-01-08)
+-------------------
+
+1.9.51 (2014-01-07)
+-------------------
+* remove log4cxx dependency from rosout, implementing custom rolling log file
+
+1.9.50 (2013-10-04)
+-------------------
+
+1.9.49 (2013-09-16)
+-------------------
+
+1.9.48 (2013-08-21)
+-------------------
+
+1.9.47 (2013-07-03)
+-------------------
+
+1.9.46 (2013-06-18)
+-------------------
+
+1.9.45 (2013-06-06)
+-------------------
+
+1.9.44 (2013-03-21)
+-------------------
+
+1.9.43 (2013-03-13)
+-------------------
+
+1.9.42 (2013-03-08)
+-------------------
+
+1.9.41 (2013-01-24)
+-------------------
+
+1.9.40 (2013-01-13)
+-------------------
+
+1.9.39 (2012-12-29)
+-------------------
+* first public release for Groovy
--- /dev/null
+++ ros-noetic-rosout-1.16.0/CMakeLists.txt
@@ -0,0 +1,18 @@
+cmake_minimum_required(VERSION 3.0.2)
+project(rosout)
+
+if(NOT WIN32)
+  set_directory_properties(PROPERTIES COMPILE_OPTIONS "-Wall;-Wextra")
+endif()
+
+find_package(catkin REQUIRED COMPONENTS roscpp rosgraph_msgs)
+
+catkin_package()
+
+include_directories(${catkin_INCLUDE_DIRS})
+
+add_executable(rosout rosout.cpp)
+target_link_libraries(rosout ${catkin_LIBRARIES})
+
+install(TARGETS rosout
+  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})
--- /dev/null
+++ ros-noetic-rosout-1.16.0/package.xml
@@ -0,0 +1,23 @@
+<package>
+  <name>rosout</name>
+  <version>1.16.0</version>
+  <description>
+     System-wide logging mechanism for messages sent to the /rosout topic.
+  </description>
+  <maintainer email="michael@openrobotics.org">Michael Carroll</maintainer>
+  <maintainer email="sloretz@openrobotics.org">Shane Loretz</maintainer>
+  <license>BSD</license>
+
+  <url>http://ros.org/wiki/rosout</url>
+  <author>Josh Faust</author>
+  <author email="dthomas@osrfoundation.org">Dirk Thomas</author>
+  <author email="jacob@openrobotics.org">Jacob Perron</author>
+
+  <buildtool_depend>catkin</buildtool_depend>
+
+  <build_depend>roscpp</build_depend>
+  <build_depend>rosgraph_msgs</build_depend>
+
+  <run_depend>roscpp</run_depend>
+  <run_depend>rosgraph_msgs</run_depend>
+</package>
--- /dev/null
+++ ros-noetic-rosout-1.16.0/rosout.cpp
@@ -0,0 +1,267 @@
+/*
+ * Copyright (c) 2008, Willow Garage, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of Willow Garage, Inc. nor the names of its
+ *       contributors may be used to endorse or promote products derived from
+ *       this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <cstring>
+#include <cstdlib>
+#include <cctype>
+
+#include "ros/ros.h"
+#include "ros/file_log.h"
+
+#ifdef WIN32
+  #ifdef ERROR
+    // ach, windows.h polluting everything again,
+        // clashes with autogenerated rosgraph_msgs/Log.h
+    #undef ERROR
+  #endif
+#endif
+#include "rosgraph_msgs/Log.h"
+
+/**
+ * @mainpage
+ *
+ * @htmlinclude manifest.html
+ *
+ * @b rosout logs messages sent to the /rosout topic,
+ * which is a system-wide string logging mechanism.
+ */
+
+/**
+ * the rosout node subscribes to /rosout, logs the messages to file, and re-broadcasts the messages to /rosout_agg
+ */
+class Rosout
+{
+public:
+  std::string log_file_name_;
+  FILE* handle_;
+  size_t max_file_size_;
+  size_t current_file_size_;
+  size_t max_backup_index_;
+  size_t current_backup_index_;
+  ros::NodeHandle node_;
+  ros::Subscriber rosout_sub_;
+  ros::Publisher agg_pub_;
+  bool omit_topics_;
+
+  Rosout() :
+    log_file_name_(ros::file_log::getLogDirectory() + "/rosout.log"),
+    handle_(NULL),
+    max_file_size_(100*1024*1024),
+    current_file_size_(0),
+    max_backup_index_(10),
+    current_backup_index_(0),
+    omit_topics_(false)
+  {
+    init();
+  }
+
+  void init()
+  {
+    const char* disable_file_logging_env = getenv("ROSOUT_DISABLE_FILE_LOGGING");
+    std::string disable_file_logging(disable_file_logging_env ? disable_file_logging_env : "");
+    std::transform(
+      disable_file_logging.begin(),
+      disable_file_logging.end(),
+      disable_file_logging.begin(),
+      [](char c){ return std::tolower(c); });
+    if (disable_file_logging.empty() ||  // Not set or set to empty string.
+      disable_file_logging == "0" ||
+      disable_file_logging == "false" ||
+      disable_file_logging == "off" ||
+      disable_file_logging == "no")
+    {
+      handle_ = fopen(log_file_name_.c_str(), "w");
+
+      if (handle_ == 0)
+      {
+        std::cerr << "Error opening rosout log file '" << log_file_name_.c_str() << "': " << strerror(errno);
+      }
+      else
+      {
+        std::cout << "logging to " << log_file_name_.c_str() << std::endl;
+
+        std::stringstream ss;
+        ss <<  "\n\n" << ros::Time::now() << "  Node Startup\n";
+        int written = fprintf(handle_, "%s", ss.str().c_str());
+        if (written < 0)
+        {
+          std::cerr << "Error writing to rosout log file '" << log_file_name_.c_str() << "': " << strerror(ferror(handle_)) << std::endl;
+        }
+        else if (written > 0)
+        {
+          current_file_size_ += written;
+          if (fflush(handle_))
+          {
+            std::cerr << "Error flushing rosout log file '" << log_file_name_.c_str() << "': " << strerror(ferror(handle_));
+          }
+        }
+      }
+    }
+
+    agg_pub_ = node_.advertise<rosgraph_msgs::Log>("/rosout_agg", 0);
+    std::cout << "re-publishing aggregated messages to /rosout_agg" << std::endl;
+
+    rosout_sub_ = node_.subscribe("/rosout", 0, &Rosout::rosoutCallback, this);
+    std::cout << "subscribed to /rosout" << std::endl;
+  }
+
+  void rosoutCallback(const rosgraph_msgs::Log::ConstPtr& msg)
+  {
+    agg_pub_.publish(msg);
+
+    if (!handle_)
+    {
+      return;
+    }
+
+    std::stringstream ss;
+    ss << msg->header.stamp << " ";
+    switch (msg->level)
+    {
+    case rosgraph_msgs::Log::FATAL:
+      ss << "FATAL ";
+      break;
+    case rosgraph_msgs::Log::ERROR:
+      ss << "ERROR ";
+      break;
+    case rosgraph_msgs::Log::WARN:
+      ss << "WARN ";
+      break;
+    case rosgraph_msgs::Log::DEBUG:
+      ss << "DEBUG ";
+      break;
+    case rosgraph_msgs::Log::INFO:
+      ss << "INFO ";
+      break;
+    default:
+      ss << msg->level << " ";
+    }
+
+    ss << msg->name << " ";
+    ss << "[" << msg->file << ":" << msg->line << "(" << msg->function << ")] ";
+
+    // check parameter server for omit_topics flag and set class member
+    node_.getParamCached("/rosout/omit_topics", omit_topics_);
+
+    if (!omit_topics_)
+    {
+      ss << "[topics: ";
+      std::vector<std::string>::const_iterator it = msg->topics.begin();
+      std::vector<std::string>::const_iterator end = msg->topics.end();
+      for ( ; it != end; ++it )
+      {
+        const std::string& topic = *it;
+
+        if ( it != msg->topics.begin() )
+        {
+          ss << ", ";
+        }
+
+        ss << topic;
+      }
+      ss << "] ";
+    }
+
+    ss << msg->msg;
+    ss << "\n";
+    int written = fprintf(handle_, "%s", ss.str().c_str());
+    if (written < 0)
+    {
+      std::cerr << "Error writing to rosout log file '" << log_file_name_.c_str() << "': " << strerror(ferror(handle_)) << std::endl;
+    }
+    else if (written > 0)
+    {
+      current_file_size_ += written;
+      if (fflush(handle_))
+      {
+        std::cerr << "Error flushing rosout log file '" << log_file_name_.c_str() << "': " << strerror(errno);
+      }
+
+      // check for rolling
+      if (current_file_size_ > max_file_size_)
+      {
+        std::cout << "rosout log file " << log_file_name_.c_str() << " reached max size, rotating log files" << std::endl;
+        if (fclose(handle_))
+        {
+          std::cerr << "Error closing rosout log file '" << log_file_name_.c_str() << "': " << strerror(errno) << std::endl;
+        }
+        if (current_backup_index_ == max_backup_index_)
+        {
+          std::stringstream backup_file_name;
+          backup_file_name << log_file_name_ << "." << max_backup_index_;
+          int rc = remove(backup_file_name.str().c_str());
+          if (rc != 0)
+          {
+            std::cerr << "Error deleting oldest rosout log file '" << backup_file_name.str().c_str() << "': " << strerror(errno) << std::endl;
+          }
+        }
+        std::size_t i = std::min(max_backup_index_, current_backup_index_ + 1);
+        while (i > 0)
+        {
+          std::stringstream current_file_name;
+          current_file_name << log_file_name_;
+          if (i > 1)
+          {
+            current_file_name << "." << (i - 1);
+          }
+          std::stringstream rotated_file_name;
+          rotated_file_name << log_file_name_ << "." << i;
+          int rc = rename(current_file_name.str().c_str(), rotated_file_name.str().c_str());
+          if (rc != 0)
+          {
+            std::cerr << "Error rotating rosout log file '" << current_file_name.str().c_str() << "' to '" << rotated_file_name.str().c_str() << "': " << strerror(errno) << std::endl;
+          }
+          --i;
+        }
+        if (current_backup_index_ < max_backup_index_)
+        {
+          ++current_backup_index_;
+        }
+        handle_ = fopen(log_file_name_.c_str(), "w");
+        if (handle_ == 0)
+        {
+          std::cerr << "Error opening rosout log file '" << log_file_name_.c_str() << "': " << strerror(errno);
+        }
+        current_file_size_ = 0;
+      }
+    }
+  }
+};
+
+int main(int argc, char **argv)
+{
+  ros::init(argc, argv, "rosout", ros::init_options::NoRosout);
+  ros::NodeHandle n;
+  Rosout r;
+
+  ros::spin();
+
+  return 0;
+}
+
